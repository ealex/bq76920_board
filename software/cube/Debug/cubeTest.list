
cubeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003244  08003244  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003244  08003244  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003244  08003244  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800324c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000004  08003250  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003250  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d96  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011e5  00000000  00000000  00024dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00025fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000660  00000000  00000000  00026698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ba6e  00000000  00000000  00026cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000482d  00000000  00000000  00032766  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003b9e3  00000000  00000000  00036f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00072976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a0  00000000  00000000  000729f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003034 	.word	0x08003034

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003034 	.word	0x08003034

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	2202      	movs	r2, #2
 8000402:	4013      	ands	r3, r2
 8000404:	2b02      	cmp	r3, #2
 8000406:	d101      	bne.n	800040c <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000408:	2301      	movs	r3, #1
 800040a:	e000      	b.n	800040e <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800040c:	2300      	movs	r3, #0
}
 800040e:	0018      	movs	r0, r3
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}

08000416 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	2204      	movs	r2, #4
 8000424:	4013      	ands	r3, r2
 8000426:	2b04      	cmp	r3, #4
 8000428:	d101      	bne.n	800042e <LL_I2C_IsActiveFlag_RXNE+0x18>
 800042a:	2301      	movs	r3, #1
 800042c:	e000      	b.n	8000430 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800042e:	2300      	movs	r3, #0
}
 8000430:	0018      	movs	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	b002      	add	sp, #8
 8000436:	bd80      	pop	{r7, pc}

08000438 <LL_I2C_IsActiveFlag_NACK>:
  * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(I2C_TypeDef *I2Cx)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	2210      	movs	r2, #16
 8000446:	4013      	ands	r3, r2
 8000448:	2b10      	cmp	r3, #16
 800044a:	d101      	bne.n	8000450 <LL_I2C_IsActiveFlag_NACK+0x18>
 800044c:	2301      	movs	r3, #1
 800044e:	e000      	b.n	8000452 <LL_I2C_IsActiveFlag_NACK+0x1a>
 8000450:	2300      	movs	r3, #0
}
 8000452:	0018      	movs	r0, r3
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}

0800045a <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	2210      	movs	r2, #16
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	61da      	str	r2, [r3, #28]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	69fa      	ldr	r2, [r7, #28]
 800048c:	0d51      	lsrs	r1, r2, #21
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	00d2      	lsls	r2, r2, #3
 8000492:	400a      	ands	r2, r1
 8000494:	490a      	ldr	r1, [pc, #40]	; (80004c0 <LL_I2C_HandleTransfer+0x48>)
 8000496:	430a      	orrs	r2, r1
 8000498:	43d2      	mvns	r2, r2
 800049a:	401a      	ands	r2, r3
 800049c:	68b9      	ldr	r1, [r7, #8]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4319      	orrs	r1, r3
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	041b      	lsls	r3, r3, #16
 80004a6:	4319      	orrs	r1, r3
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	4319      	orrs	r1, r3
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	430b      	orrs	r3, r1
 80004b0:	431a      	orrs	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	03ff7bff 	.word	0x03ff7bff

080004c4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	0018      	movs	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}

080004da <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	000a      	movs	r2, r1
 80004e4:	1cfb      	adds	r3, r7, #3
 80004e6:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <bqInit>:
/**
 * @brief	this will start the BQ769x0 chip and check it's present
 * @param	I2Cx - the I2C peripheral, already initialized by the user
 * @retval	(uint8_t)1 if OK, (uint8_t)0 if not
 */
uint8_t bqInit(I2C_TypeDef *I2Cx, condensed_afe_data * afeData, afe_config *afeConfig) {
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	bqI2C = I2Cx;
 8000504:	4b45      	ldr	r3, [pc, #276]	; (800061c <bqInit+0x124>)
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	601a      	str	r2, [r3, #0]
	data = afeData;
 800050a:	4b45      	ldr	r3, [pc, #276]	; (8000620 <bqInit+0x128>)
 800050c:	68ba      	ldr	r2, [r7, #8]
 800050e:	601a      	str	r2, [r3, #0]
	config = afeConfig;
 8000510:	4b44      	ldr	r3, [pc, #272]	; (8000624 <bqInit+0x12c>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

	// check if the chip is there
	if(0==writeRegister(CC_CFG, 0x19)) {
 8000516:	2119      	movs	r1, #25
 8000518:	200b      	movs	r0, #11
 800051a:	f000 fc41 	bl	8000da0 <writeRegister>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d101      	bne.n	8000526 <bqInit+0x2e>
		return 0;
 8000522:	2300      	movs	r3, #0
 8000524:	e075      	b.n	8000612 <bqInit+0x11a>
	}
	if(0x19!=readRegister(CC_CFG)) {
 8000526:	200b      	movs	r0, #11
 8000528:	f000 fc54 	bl	8000dd4 <readRegister>
 800052c:	0003      	movs	r3, r0
 800052e:	2b19      	cmp	r3, #25
 8000530:	d001      	beq.n	8000536 <bqInit+0x3e>
		return 0;
 8000532:	2300      	movs	r3, #0
 8000534:	e06d      	b.n	8000612 <bqInit+0x11a>
	}

	// run the initial configuration of the BQ chip
	writeRegister(CELLBAL1, 0x00);
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fc31 	bl	8000da0 <writeRegister>
	writeRegister(CELLBAL2, 0x00);
 800053e:	2100      	movs	r1, #0
 8000540:	2002      	movs	r0, #2
 8000542:	f000 fc2d 	bl	8000da0 <writeRegister>
	writeRegister(CELLBAL3, 0x00);
 8000546:	2100      	movs	r1, #0
 8000548:	2003      	movs	r0, #3
 800054a:	f000 fc29 	bl	8000da0 <writeRegister>
	writeRegister(SYS_CTRL1,0b00010000);
 800054e:	2110      	movs	r1, #16
 8000550:	2004      	movs	r0, #4
 8000552:	f000 fc25 	bl	8000da0 <writeRegister>
	writeRegister(SYS_CTRL2,0b01000000);
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	2005      	movs	r0, #5
 800055a:	f000 fc21 	bl	8000da0 <writeRegister>

	// reset data register
	data->status_reg = 0;
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <bqInit+0x128>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2226      	movs	r2, #38	; 0x26
 8000564:	2100      	movs	r1, #0
 8000566:	5499      	strb	r1, [r3, r2]
	data->balStatus = 0;
 8000568:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <bqInit+0x128>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	222e      	movs	r2, #46	; 0x2e
 800056e:	2100      	movs	r1, #0
 8000570:	5499      	strb	r1, [r3, r2]
	data->balTarget = 0;
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <bqInit+0x128>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2200      	movs	r2, #0
 8000578:	861a      	strh	r2, [r3, #48]	; 0x30

	// read calibration data
	adcOffset = (int32_t) readRegister(ADCOFFSET);  // convert from 2's complement
 800057a:	2051      	movs	r0, #81	; 0x51
 800057c:	f000 fc2a 	bl	8000dd4 <readRegister>
 8000580:	0003      	movs	r3, r0
 8000582:	001a      	movs	r2, r3
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <bqInit+0x130>)
 8000586:	601a      	str	r2, [r3, #0]
	adcGain = (uint32_t)365+(uint32_t)((readRegister(ADCGAIN1)&(uint8_t)0b00001100)<<(uint8_t)1)
 8000588:	2050      	movs	r0, #80	; 0x50
 800058a:	f000 fc23 	bl	8000dd4 <readRegister>
 800058e:	0003      	movs	r3, r0
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	001a      	movs	r2, r3
 8000594:	2318      	movs	r3, #24
 8000596:	401a      	ands	r2, r3
 8000598:	0014      	movs	r4, r2
			+(uint32_t)((readRegister(ADCGAIN2)&(uint8_t)11100000)>>(uint8_t)5);
 800059a:	2059      	movs	r0, #89	; 0x59
 800059c:	f000 fc1a 	bl	8000dd4 <readRegister>
 80005a0:	0003      	movs	r3, r0
 80005a2:	115b      	asrs	r3, r3, #5
 80005a4:	001a      	movs	r2, r3
 80005a6:	2303      	movs	r3, #3
 80005a8:	4013      	ands	r3, r2
 80005aa:	18e3      	adds	r3, r4, r3
 80005ac:	336e      	adds	r3, #110	; 0x6e
 80005ae:	33ff      	adds	r3, #255	; 0xff
 80005b0:	001a      	movs	r2, r3
	adcGain = (uint32_t)365+(uint32_t)((readRegister(ADCGAIN1)&(uint8_t)0b00001100)<<(uint8_t)1)
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <bqInit+0x134>)
 80005b4:	601a      	str	r2, [r3, #0]

	// now apply all settings
	setCurrentProtection(config->range,
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <bqInit+0x12c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	7898      	ldrb	r0, [r3, #2]
			config->sc_delay, config->sc_voltage,
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <bqInit+0x12c>)
 80005be:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80005c0:	78d9      	ldrb	r1, [r3, #3]
			config->sc_delay, config->sc_voltage,
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <bqInit+0x12c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80005c6:	791a      	ldrb	r2, [r3, #4]
			config->oc_delay, config->oc_voltage);
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <bqInit+0x12c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80005cc:	795c      	ldrb	r4, [r3, #5]
			config->oc_delay, config->oc_voltage);
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <bqInit+0x12c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80005d2:	799b      	ldrb	r3, [r3, #6]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	0023      	movs	r3, r4
 80005d8:	f000 fb46 	bl	8000c68 <setCurrentProtection>
	setOvUvProtection(config->uv_delay, config->uvLimit, config->ov_delay, config->ovLimit);
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <bqInit+0x12c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	7b18      	ldrb	r0, [r3, #12]
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <bqInit+0x12c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	7b59      	ldrb	r1, [r3, #13]
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <bqInit+0x12c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	7b9a      	ldrb	r2, [r3, #14]
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <bqInit+0x12c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	7bdb      	ldrb	r3, [r3, #15]
 80005f4:	f000 fb93 	bl	8000d1e <setOvUvProtection>

	config->cell_max_voltage = getRealOv();
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <bqInit+0x12c>)
 80005fa:	681c      	ldr	r4, [r3, #0]
 80005fc:	f000 fad4 	bl	8000ba8 <getRealOv>
 8000600:	0003      	movs	r3, r0
 8000602:	82a3      	strh	r3, [r4, #20]
	config->cell_min_voltage = getRealUv();
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <bqInit+0x12c>)
 8000606:	681c      	ldr	r4, [r3, #0]
 8000608:	f000 fafe 	bl	8000c08 <getRealUv>
 800060c:	0003      	movs	r3, r0
 800060e:	82e3      	strh	r3, [r4, #22]
	return 1;
 8000610:	2301      	movs	r3, #1
}
 8000612:	0018      	movs	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	b005      	add	sp, #20
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000060 	.word	0x20000060
 8000620:	2000006c 	.word	0x2000006c
 8000624:	20000070 	.word	0x20000070
 8000628:	20000064 	.word	0x20000064
 800062c:	20000068 	.word	0x20000068

08000630 <bqAct>:

/**
 *	@brief	This function updates the data from the AFE
 *	@retval	(uint8_t)1 if the system needs to pay attention to the AFE, 0 otherwise
 */
uint8_t bqAct(void) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
	//uint8_t retVal = 0x00;
	uint8_t tempVal;
	// get AFE status and reset all flags
	tempVal = readRegister(SYS_STAT);
 8000636:	1dfc      	adds	r4, r7, #7
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fbcb 	bl	8000dd4 <readRegister>
 800063e:	0003      	movs	r3, r0
 8000640:	7023      	strb	r3, [r4, #0]
	writeRegister(SYS_STAT,0b10111111);
 8000642:	21bf      	movs	r1, #191	; 0xbf
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fbab 	bl	8000da0 <writeRegister>

	afeStatus = afeStatus | (0b00001111&tempVal);
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	220f      	movs	r2, #15
 8000650:	4013      	ands	r3, r2
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <bqAct+0x74>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4313      	orrs	r3, r2
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <bqAct+0x74>)
 800065e:	701a      	strb	r2, [r3, #0]

	// fast act loop
	if(0b00001111 & tempVal) {
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	220f      	movs	r2, #15
 8000666:	4013      	ands	r3, r2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <bqAct+0x42>
		// OV, UV , OC , SCD reaction
		bqDisableAll();
 800066e:	f000 f81d 	bl	80006ac <bqDisableAll>
	}

	if(0b10000000 & tempVal) {
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b25b      	sxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	da07      	bge.n	800068c <bqAct+0x5c>
		// read all data registers and process them
		bqReadData(VC1_HI_BYTE,afeRawData,(CC_LO_BYTE-VC1_HI_BYTE)+1);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <bqAct+0x78>)
 800067e:	2228      	movs	r2, #40	; 0x28
 8000680:	0019      	movs	r1, r3
 8000682:	200c      	movs	r0, #12
 8000684:	f000 fc2e 	bl	8000ee4 <bqReadData>
		processDataRegisters();
 8000688:	f000 f922 	bl	80008d0 <processDataRegisters>
	}

	if(afeStatus) {
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <bqAct+0x74>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <bqAct+0x68>
		return 1;
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <bqAct+0x6a>
	} else {
		return 0;
 8000698:	2300      	movs	r3, #0
	}
}
 800069a:	0018      	movs	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	b003      	add	sp, #12
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000074 	.word	0x20000074
 80006a8:	20000020 	.word	0x20000020

080006ac <bqDisableAll>:

void bqDisableAll(void) {
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
	uint8_t tmp;
	tmp = readRegister(SYS_CTRL2);
 80006b2:	1dfc      	adds	r4, r7, #7
 80006b4:	2005      	movs	r0, #5
 80006b6:	f000 fb8d 	bl	8000dd4 <readRegister>
 80006ba:	0003      	movs	r3, r0
 80006bc:	7023      	strb	r3, [r4, #0]
	tmp = tmp & 0b11111100;
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	1dfa      	adds	r2, r7, #7
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	2103      	movs	r1, #3
 80006c6:	438a      	bics	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
	writeRegister(SYS_CTRL2, tmp);
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	0019      	movs	r1, r3
 80006d0:	2005      	movs	r0, #5
 80006d2:	f000 fb65 	bl	8000da0 <writeRegister>
	data->outStatus = 0x00;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <bqDisableAll+0x3c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2232      	movs	r2, #50	; 0x32
 80006dc:	2100      	movs	r1, #0
 80006de:	5499      	strb	r1, [r3, r2]
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b003      	add	sp, #12
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	2000006c 	.word	0x2000006c

080006ec <bqEnableAll>:

void bqEnableAll(void) {
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
	uint8_t tmp;
	tmp = readRegister(SYS_CTRL2);
 80006f2:	1dfc      	adds	r4, r7, #7
 80006f4:	2005      	movs	r0, #5
 80006f6:	f000 fb6d 	bl	8000dd4 <readRegister>
 80006fa:	0003      	movs	r3, r0
 80006fc:	7023      	strb	r3, [r4, #0]
	tmp = tmp | 0b00000011;
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	1dfa      	adds	r2, r7, #7
 8000702:	7812      	ldrb	r2, [r2, #0]
 8000704:	2103      	movs	r1, #3
 8000706:	430a      	orrs	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
	writeRegister(SYS_CTRL2, tmp);
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	0019      	movs	r1, r3
 8000710:	2005      	movs	r0, #5
 8000712:	f000 fb45 	bl	8000da0 <writeRegister>
	data->outStatus = 0x01;
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <bqEnableAll+0x3c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2232      	movs	r2, #50	; 0x32
 800071c:	2101      	movs	r1, #1
 800071e:	5499      	strb	r1, [r3, r2]
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b003      	add	sp, #12
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	2000006c 	.word	0x2000006c

0800072c <bqResetStatus>:

void bqResetStatus(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	afeStatus = 0x00;
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <bqResetStatus+0x10>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000074 	.word	0x20000074

08000740 <bqBalance>:

void bqBalance(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	if(1==data->balStatus) {
 8000746:	4b60      	ldr	r3, [pc, #384]	; (80008c8 <bqBalance+0x188>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	222e      	movs	r2, #46	; 0x2e
 800074c:	5c9b      	ldrb	r3, [r3, r2]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d000      	beq.n	8000754 <bqBalance+0x14>
 8000752:	e0a9      	b.n	80008a8 <bqBalance+0x168>
		if(0!=data->balTarget) {
 8000754:	4b5c      	ldr	r3, [pc, #368]	; (80008c8 <bqBalance+0x188>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800075a:	2b00      	cmp	r3, #0
 800075c:	d100      	bne.n	8000760 <bqBalance+0x20>
 800075e:	e06f      	b.n	8000840 <bqBalance+0x100>
			// target is already set
			uint8_t selected_cell = 0xFF;
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	22ff      	movs	r2, #255	; 0xff
 8000764:	701a      	strb	r2, [r3, #0]

			// find first cell over target and enable it's balance pin
			for(uint8_t cnt=0;cnt<15;cnt++) {
 8000766:	1dbb      	adds	r3, r7, #6
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e01f      	b.n	80007ae <bqBalance+0x6e>
				if(config->enabled_cells&(1<<cnt)) {
 800076e:	4b57      	ldr	r3, [pc, #348]	; (80008cc <bqBalance+0x18c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	411a      	asrs	r2, r3
 800077c:	0013      	movs	r3, r2
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	d00f      	beq.n	80007a4 <bqBalance+0x64>
					if(data->cells[cnt]>data->balTarget) {
 8000784:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <bqBalance+0x188>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	1dba      	adds	r2, r7, #6
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	5ad2      	ldrh	r2, [r2, r3]
 8000790:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <bqBalance+0x188>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000796:	429a      	cmp	r2, r3
 8000798:	d904      	bls.n	80007a4 <bqBalance+0x64>
						selected_cell=cnt;
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	1dba      	adds	r2, r7, #6
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	701a      	strb	r2, [r3, #0]
						break;
 80007a2:	e008      	b.n	80007b6 <bqBalance+0x76>
			for(uint8_t cnt=0;cnt<15;cnt++) {
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	1dbb      	adds	r3, r7, #6
 80007aa:	3201      	adds	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	1dbb      	adds	r3, r7, #6
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b0e      	cmp	r3, #14
 80007b4:	d9db      	bls.n	800076e <bqBalance+0x2e>
					}
				}
			}
			if(0xFF==selected_cell) {
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2bff      	cmp	r3, #255	; 0xff
 80007bc:	d115      	bne.n	80007ea <bqBalance+0xaa>
				// no more cells
				writeRegister(CELLBAL1, 0x00);
 80007be:	2100      	movs	r1, #0
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 faed 	bl	8000da0 <writeRegister>
				writeRegister(CELLBAL2, 0x00);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 fae9 	bl	8000da0 <writeRegister>
				writeRegister(CELLBAL3, 0x00);
 80007ce:	2100      	movs	r1, #0
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 fae5 	bl	8000da0 <writeRegister>
				data->balTarget = 0x00;
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <bqBalance+0x188>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2200      	movs	r2, #0
 80007dc:	861a      	strh	r2, [r3, #48]	; 0x30
				data->balStatus = 0x00;
 80007de:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <bqBalance+0x188>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	222e      	movs	r2, #46	; 0x2e
 80007e4:	2100      	movs	r1, #0
 80007e6:	5499      	strb	r1, [r3, r2]
	} else {
		writeRegister(CELLBAL1, 0x00);
		writeRegister(CELLBAL2, 0x00);
		writeRegister(CELLBAL3, 0x00);
	}
}
 80007e8:	e06a      	b.n	80008c0 <bqBalance+0x180>
				if(5>selected_cell) {	// cells 0,1,2,3,4
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d80a      	bhi.n	8000808 <bqBalance+0xc8>
					writeRegister(CELLBAL1, (1<<selected_cell));
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2201      	movs	r2, #1
 80007f8:	409a      	lsls	r2, r3
 80007fa:	0013      	movs	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	0019      	movs	r1, r3
 8000800:	2001      	movs	r0, #1
 8000802:	f000 facd 	bl	8000da0 <writeRegister>
}
 8000806:	e05b      	b.n	80008c0 <bqBalance+0x180>
				} else if (10>selected_cell) { // cells 5,6,7,8,9
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b09      	cmp	r3, #9
 800080e:	d80b      	bhi.n	8000828 <bqBalance+0xe8>
					writeRegister(CELLBAL2, (1<<(selected_cell-5)));
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	3b05      	subs	r3, #5
 8000816:	2201      	movs	r2, #1
 8000818:	409a      	lsls	r2, r3
 800081a:	0013      	movs	r3, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	0019      	movs	r1, r3
 8000820:	2002      	movs	r0, #2
 8000822:	f000 fabd 	bl	8000da0 <writeRegister>
}
 8000826:	e04b      	b.n	80008c0 <bqBalance+0x180>
					writeRegister(CELLBAL3, (1<<(selected_cell-10)));
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3b0a      	subs	r3, #10
 800082e:	2201      	movs	r2, #1
 8000830:	409a      	lsls	r2, r3
 8000832:	0013      	movs	r3, r2
 8000834:	b2db      	uxtb	r3, r3
 8000836:	0019      	movs	r1, r3
 8000838:	2003      	movs	r0, #3
 800083a:	f000 fab1 	bl	8000da0 <writeRegister>
}
 800083e:	e03f      	b.n	80008c0 <bqBalance+0x180>
			uint16_t minCell = 0xFFFF;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2201      	movs	r2, #1
 8000844:	4252      	negs	r2, r2
 8000846:	801a      	strh	r2, [r3, #0]
			for(uint8_t cnt=0;cnt<15;cnt++) {
 8000848:	1cfb      	adds	r3, r7, #3
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e021      	b.n	8000894 <bqBalance+0x154>
				if(config->enabled_cells&(1<<cnt)) {
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <bqBalance+0x18c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	001a      	movs	r2, r3
 8000858:	1cfb      	adds	r3, r7, #3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	411a      	asrs	r2, r3
 800085e:	0013      	movs	r3, r2
 8000860:	2201      	movs	r2, #1
 8000862:	4013      	ands	r3, r2
 8000864:	d011      	beq.n	800088a <bqBalance+0x14a>
					if(data->cells[cnt]<minCell) {
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <bqBalance+0x188>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1cfa      	adds	r2, r7, #3
 800086c:	7812      	ldrb	r2, [r2, #0]
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	5ad3      	ldrh	r3, [r2, r3]
 8000872:	1d3a      	adds	r2, r7, #4
 8000874:	8812      	ldrh	r2, [r2, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	d907      	bls.n	800088a <bqBalance+0x14a>
						minCell = data->cells[cnt];
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <bqBalance+0x188>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	1cfb      	adds	r3, r7, #3
 8000880:	7819      	ldrb	r1, [r3, #0]
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	0049      	lsls	r1, r1, #1
 8000886:	5a8a      	ldrh	r2, [r1, r2]
 8000888:	801a      	strh	r2, [r3, #0]
			for(uint8_t cnt=0;cnt<15;cnt++) {
 800088a:	1cfb      	adds	r3, r7, #3
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	1cfb      	adds	r3, r7, #3
 8000890:	3201      	adds	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	1cfb      	adds	r3, r7, #3
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b0e      	cmp	r3, #14
 800089a:	d9d9      	bls.n	8000850 <bqBalance+0x110>
			data->balTarget = minCell;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <bqBalance+0x188>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1d3a      	adds	r2, r7, #4
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	861a      	strh	r2, [r3, #48]	; 0x30
}
 80008a6:	e00b      	b.n	80008c0 <bqBalance+0x180>
		writeRegister(CELLBAL1, 0x00);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fa78 	bl	8000da0 <writeRegister>
		writeRegister(CELLBAL2, 0x00);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2002      	movs	r0, #2
 80008b4:	f000 fa74 	bl	8000da0 <writeRegister>
		writeRegister(CELLBAL3, 0x00);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2003      	movs	r0, #3
 80008bc:	f000 fa70 	bl	8000da0 <writeRegister>
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000006c 	.word	0x2000006c
 80008cc:	20000070 	.word	0x20000070

080008d0 <processDataRegisters>:

static void processDataRegisters(void) {
 80008d0:	b5b0      	push	{r4, r5, r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
	data->status_reg = afeStatus;
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <processDataRegisters+0xcc>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <processDataRegisters+0xd0>)
 80008dc:	7811      	ldrb	r1, [r2, #0]
 80008de:	2226      	movs	r2, #38	; 0x26
 80008e0:	5499      	strb	r1, [r3, r2]

	// cell voltage
	for(uint8_t cnt=0; cnt<15;cnt++) {
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e024      	b.n	8000934 <processDataRegisters+0x64>
		if(0==(config->enabled_cells&(1<<cnt))) {
 80008ea:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <processDataRegisters+0xd4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	001a      	movs	r2, r3
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	411a      	asrs	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	2201      	movs	r2, #1
 80008fc:	4013      	ands	r3, r2
 80008fe:	d107      	bne.n	8000910 <processDataRegisters+0x40>
			data->cells[cnt] = 0;
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <processDataRegisters+0xcc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	1dfa      	adds	r2, r7, #7
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	0052      	lsls	r2, r2, #1
 800090a:	2100      	movs	r1, #0
 800090c:	52d1      	strh	r1, [r2, r3]
 800090e:	e00c      	b.n	800092a <processDataRegisters+0x5a>
		} else {
			data->cells[cnt] = convertCellVoltage(cnt);
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <processDataRegisters+0xcc>)
 8000912:	681c      	ldr	r4, [r3, #0]
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781d      	ldrb	r5, [r3, #0]
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	0018      	movs	r0, r3
 800091e:	f000 f843 	bl	80009a8 <convertCellVoltage>
 8000922:	0003      	movs	r3, r0
 8000924:	001a      	movs	r2, r3
 8000926:	006b      	lsls	r3, r5, #1
 8000928:	531a      	strh	r2, [r3, r4]
	for(uint8_t cnt=0; cnt<15;cnt++) {
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	3201      	adds	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b0e      	cmp	r3, #14
 800093a:	d9d6      	bls.n	80008ea <processDataRegisters+0x1a>
		}
	}
	// total voltage
	data->total_voltage=convertPackVolage();
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <processDataRegisters+0xcc>)
 800093e:	681c      	ldr	r4, [r3, #0]
 8000940:	f000 f87e 	bl	8000a40 <convertPackVolage>
 8000944:	0003      	movs	r3, r0
 8000946:	83e3      	strh	r3, [r4, #30]

	// current
	data->system_current = convertPackCurrent();
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <processDataRegisters+0xcc>)
 800094a:	681c      	ldr	r4, [r3, #0]
 800094c:	f000 f8b4 	bl	8000ab8 <convertPackCurrent>
 8000950:	0003      	movs	r3, r0
 8000952:	84a3      	strh	r3, [r4, #36]	; 0x24
	if((data->system_current>0)&&(data->system_current>config->chargeCurrent_mA)) {
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <processDataRegisters+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2224      	movs	r2, #36	; 0x24
 800095a:	5e9b      	ldrsh	r3, [r3, r2]
 800095c:	2b00      	cmp	r3, #0
 800095e:	dd13      	ble.n	8000988 <processDataRegisters+0xb8>
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <processDataRegisters+0xcc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2224      	movs	r2, #36	; 0x24
 8000966:	5e9a      	ldrsh	r2, [r3, r2]
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <processDataRegisters+0xd4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	210a      	movs	r1, #10
 800096e:	5e5b      	ldrsh	r3, [r3, r1]
 8000970:	429a      	cmp	r2, r3
 8000972:	dd09      	ble.n	8000988 <processDataRegisters+0xb8>
		// over current charge protection;
		afeStatus |= 0b11000000;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <processDataRegisters+0xd0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	4252      	negs	r2, r2
 800097c:	4313      	orrs	r3, r2
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <processDataRegisters+0xd0>)
 8000982:	701a      	strb	r2, [r3, #0]
		bqDisableAll();
 8000984:	f7ff fe92 	bl	80006ac <bqDisableAll>
	}
	//ts1
	data->die_temperature = convertPackDieTS1();
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <processDataRegisters+0xcc>)
 800098a:	681c      	ldr	r4, [r3, #0]
 800098c:	f000 f8cc 	bl	8000b28 <convertPackDieTS1>
 8000990:	0003      	movs	r3, r0
 8000992:	6223      	str	r3, [r4, #32]
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bdb0      	pop	{r4, r5, r7, pc}
 800099c:	2000006c 	.word	0x2000006c
 80009a0:	20000074 	.word	0x20000074
 80009a4:	20000070 	.word	0x20000070

080009a8 <convertCellVoltage>:

static uint16_t convertCellVoltage(uint8_t cellIndex) {
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	701a      	strb	r2, [r3, #0]
	uint8_t high;
	uint8_t low;
	high = afeRawData[cellIndex*2];
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	005a      	lsls	r2, r3, #1
 80009ba:	200f      	movs	r0, #15
 80009bc:	183b      	adds	r3, r7, r0
 80009be:	491d      	ldr	r1, [pc, #116]	; (8000a34 <convertCellVoltage+0x8c>)
 80009c0:	5c8a      	ldrb	r2, [r1, r2]
 80009c2:	701a      	strb	r2, [r3, #0]
	low = afeRawData[(cellIndex*2)+1];
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	240e      	movs	r4, #14
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	4918      	ldr	r1, [pc, #96]	; (8000a34 <convertCellVoltage+0x8c>)
 80009d2:	5c8a      	ldrb	r2, [r1, r2]
 80009d4:	701a      	strb	r2, [r3, #0]
	uint16_t rawAdcValue = ((uint16_t)(high<<8) | (uint16_t)low) & 0x3FFF;
 80009d6:	183b      	adds	r3, r7, r0
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	b29a      	uxth	r2, r3
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	210c      	movs	r1, #12
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	0492      	lsls	r2, r2, #18
 80009f0:	0c92      	lsrs	r2, r2, #18
 80009f2:	801a      	strh	r2, [r3, #0]
	uint16_t outData = (uint16_t)((((uint32_t)adcGain * (uint32_t)rawAdcValue) + (uint32_t)(adcOffset*1000))/1000);
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	881a      	ldrh	r2, [r3, #0]
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <convertCellVoltage+0x90>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4353      	muls	r3, r2
 80009fe:	0019      	movs	r1, r3
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <convertCellVoltage+0x94>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	0013      	movs	r3, r2
 8000a06:	015b      	lsls	r3, r3, #5
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	189b      	adds	r3, r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	18ca      	adds	r2, r1, r3
 8000a12:	23fa      	movs	r3, #250	; 0xfa
 8000a14:	0099      	lsls	r1, r3, #2
 8000a16:	0010      	movs	r0, r2
 8000a18:	f7ff fb76 	bl	8000108 <__udivsi3>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	001a      	movs	r2, r3
 8000a20:	210a      	movs	r1, #10
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	801a      	strh	r2, [r3, #0]
	return outData;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	881b      	ldrh	r3, [r3, #0]
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b005      	add	sp, #20
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	20000020 	.word	0x20000020
 8000a38:	20000068 	.word	0x20000068
 8000a3c:	20000064 	.word	0x20000064

08000a40 <convertPackVolage>:

static uint16_t convertPackVolage(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	// V (BAT) = 4 x GAIN x ADC(cell) + (#Cells x OFFSET)
	// GAIN is stored in units of μV/LSB, while OFFSET is stored in mV units.
	uint8_t high;
	uint8_t low;
	high = afeRawData[BAT_HI_BYTE-VC1_HI_BYTE];
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	4a18      	ldr	r2, [pc, #96]	; (8000aac <convertPackVolage+0x6c>)
 8000a4a:	7f92      	ldrb	r2, [r2, #30]
 8000a4c:	701a      	strb	r2, [r3, #0]
	low = afeRawData[BAT_LO_BYTE-VC1_HI_BYTE];
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	4a16      	ldr	r2, [pc, #88]	; (8000aac <convertPackVolage+0x6c>)
 8000a52:	7fd2      	ldrb	r2, [r2, #31]
 8000a54:	701a      	strb	r2, [r3, #0]
	uint16_t rawAdcValue = (uint16_t)((uint16_t)high<<(uint8_t)8) | (uint16_t)low;
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	021b      	lsls	r3, r3, #8
 8000a5e:	b299      	uxth	r1, r3
 8000a60:	1dbb      	adds	r3, r7, #6
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	801a      	strh	r2, [r3, #0]
	uint16_t outData = (uint16_t)(((uint32_t)4*(uint32_t)adcGain*(uint32_t)rawAdcValue + ((uint32_t)4*adcOffset*1000))/(uint32_t)1000);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	881a      	ldrh	r2, [r3, #0]
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <convertPackVolage+0x70>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4353      	muls	r3, r2
 8000a76:	0019      	movs	r1, r3
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <convertPackVolage+0x74>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	0013      	movs	r3, r2
 8000a80:	015b      	lsls	r3, r3, #5
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	189b      	adds	r3, r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	18cb      	adds	r3, r1, r3
 8000a8c:	009a      	lsls	r2, r3, #2
 8000a8e:	23fa      	movs	r3, #250	; 0xfa
 8000a90:	0099      	lsls	r1, r3, #2
 8000a92:	0010      	movs	r0, r2
 8000a94:	f7ff fb38 	bl	8000108 <__udivsi3>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	1cbb      	adds	r3, r7, #2
 8000a9e:	801a      	strh	r2, [r3, #0]
	return outData;
 8000aa0:	1cbb      	adds	r3, r7, #2
 8000aa2:	881b      	ldrh	r3, [r3, #0]
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000020 	.word	0x20000020
 8000ab0:	20000068 	.word	0x20000068
 8000ab4:	20000064 	.word	0x20000064

08000ab8 <convertPackCurrent>:

static int16_t convertPackCurrent(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	uint8_t high;
	uint8_t low;
	high = afeRawData[CC_HI_BYTE-VC1_HI_BYTE];
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <convertPackCurrent+0x68>)
 8000ac2:	2126      	movs	r1, #38	; 0x26
 8000ac4:	5c52      	ldrb	r2, [r2, r1]
 8000ac6:	701a      	strb	r2, [r3, #0]
	low = afeRawData[CC_LO_BYTE-VC1_HI_BYTE];
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <convertPackCurrent+0x68>)
 8000acc:	2127      	movs	r1, #39	; 0x27
 8000ace:	5c52      	ldrb	r2, [r2, r1]
 8000ad0:	701a      	strb	r2, [r3, #0]
	int16_t rawAdcValue = (uint16_t)(high<<8) | (uint16_t)low;
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	801a      	strh	r2, [r3, #0]
	int16_t outData = (int16_t)((((int32_t)rawAdcValue*(int32_t)844))/((int32_t)100*(int32_t)config->shuntValue));
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	5e9b      	ldrsh	r3, [r3, r2]
 8000af0:	22d3      	movs	r2, #211	; 0xd3
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	435a      	muls	r2, r3
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <convertPackCurrent+0x6c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	891b      	ldrh	r3, [r3, #8]
 8000afc:	0019      	movs	r1, r3
 8000afe:	2364      	movs	r3, #100	; 0x64
 8000b00:	434b      	muls	r3, r1
 8000b02:	0019      	movs	r1, r3
 8000b04:	0010      	movs	r0, r2
 8000b06:	f7ff fb89 	bl	800021c <__divsi3>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	1cbb      	adds	r3, r7, #2
 8000b10:	801a      	strh	r2, [r3, #0]
	return outData;
 8000b12:	1cbb      	adds	r3, r7, #2
 8000b14:	2200      	movs	r2, #0
 8000b16:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000020 	.word	0x20000020
 8000b24:	20000070 	.word	0x20000070

08000b28 <convertPackDieTS1>:

static int32_t convertPackDieTS1(void) {
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
	uint8_t high;
	uint8_t low;
	high = afeRawData[TS1_HI_BYTE-VC1_HI_BYTE];
 8000b2e:	200f      	movs	r0, #15
 8000b30:	183b      	adds	r3, r7, r0
 8000b32:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <convertPackDieTS1+0x74>)
 8000b34:	2120      	movs	r1, #32
 8000b36:	5c52      	ldrb	r2, [r2, r1]
 8000b38:	701a      	strb	r2, [r3, #0]
	low = afeRawData[TS1_LO_BYTE-VC1_HI_BYTE];
 8000b3a:	240e      	movs	r4, #14
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <convertPackDieTS1+0x74>)
 8000b40:	2121      	movs	r1, #33	; 0x21
 8000b42:	5c52      	ldrb	r2, [r2, r1]
 8000b44:	701a      	strb	r2, [r3, #0]
	uint16_t rawAdcValue = ((uint16_t)(high<<8) | (uint16_t)low) & 0x3FFF;
 8000b46:	183b      	adds	r3, r7, r0
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	210c      	movs	r1, #12
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	0492      	lsls	r2, r2, #18
 8000b60:	0c92      	lsrs	r2, r2, #18
 8000b62:	801a      	strh	r2, [r3, #0]
	int32_t vtsx = rawAdcValue * 382; //uV
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	881a      	ldrh	r2, [r3, #0]
 8000b68:	0013      	movs	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	189b      	adds	r3, r3, r2
 8000b6e:	019b      	lsls	r3, r3, #6
 8000b70:	1a9b      	subs	r3, r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
	int32_t temp = (int32_t)((int32_t)25000 - ((int32_t)vtsx-(int32_t)1200000) /(int32_t) 4);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <convertPackDieTS1+0x78>)
 8000b7a:	4694      	mov	ip, r2
 8000b7c:	4463      	add	r3, ip
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da00      	bge.n	8000b84 <convertPackDieTS1+0x5c>
 8000b82:	3303      	adds	r3, #3
 8000b84:	109b      	asrs	r3, r3, #2
 8000b86:	425b      	negs	r3, r3
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <convertPackDieTS1+0x7c>)
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	4463      	add	r3, ip
 8000b8e:	607b      	str	r3, [r7, #4]
	return temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b005      	add	sp, #20
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000020 	.word	0x20000020
 8000ba0:	ffedb080 	.word	0xffedb080
 8000ba4:	000061a8 	.word	0x000061a8

08000ba8 <getRealOv>:

static uint16_t getRealOv(void) {
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
	uint8_t raw = readRegister(OV_TRIP);
 8000bae:	1dfc      	adds	r4, r7, #7
 8000bb0:	2009      	movs	r0, #9
 8000bb2:	f000 f90f 	bl	8000dd4 <readRegister>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	7023      	strb	r3, [r4, #0]
	uint16_t val =(uint16_t)((((uint32_t)(raw<<4)|(uint32_t)(1<<13))*(uint32_t)adcGain+(uint32_t)(adcOffset*1000))/(uint32_t)1000);
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <getRealOv+0x58>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4353      	muls	r3, r2
 8000bce:	0019      	movs	r1, r3
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <getRealOv+0x5c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	015b      	lsls	r3, r3, #5
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	189b      	adds	r3, r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	18ca      	adds	r2, r1, r3
 8000be2:	23fa      	movs	r3, #250	; 0xfa
 8000be4:	0099      	lsls	r1, r3, #2
 8000be6:	0010      	movs	r0, r2
 8000be8:	f7ff fa8e 	bl	8000108 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	001a      	movs	r2, r3
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	801a      	strh	r2, [r3, #0]
	return val;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	881b      	ldrh	r3, [r3, #0]
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	20000068 	.word	0x20000068
 8000c04:	20000064 	.word	0x20000064

08000c08 <getRealUv>:

static uint16_t getRealUv(void) {
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	uint8_t raw = readRegister(UV_TRIP);
 8000c0e:	1dfc      	adds	r4, r7, #7
 8000c10:	200a      	movs	r0, #10
 8000c12:	f000 f8df 	bl	8000dd4 <readRegister>
 8000c16:	0003      	movs	r3, r0
 8000c18:	7023      	strb	r3, [r4, #0]
	uint16_t val =(uint16_t)((((uint32_t)(raw<<4)|(uint32_t)(1<<12))*(uint32_t)adcGain+(uint32_t)(adcOffset*1000))/(uint32_t)1000);
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	001a      	movs	r2, r3
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	015b      	lsls	r3, r3, #5
 8000c26:	431a      	orrs	r2, r3
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <getRealUv+0x58>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4353      	muls	r3, r2
 8000c2e:	0019      	movs	r1, r3
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <getRealUv+0x5c>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	0013      	movs	r3, r2
 8000c36:	015b      	lsls	r3, r3, #5
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	18ca      	adds	r2, r1, r3
 8000c42:	23fa      	movs	r3, #250	; 0xfa
 8000c44:	0099      	lsls	r1, r3, #2
 8000c46:	0010      	movs	r0, r2
 8000c48:	f7ff fa5e 	bl	8000108 <__udivsi3>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	001a      	movs	r2, r3
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	801a      	strh	r2, [r3, #0]
	return val;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	881b      	ldrh	r3, [r3, #0]
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000068 	.word	0x20000068
 8000c64:	20000064 	.word	0x20000064

08000c68 <setCurrentProtection>:


static void setCurrentProtection(threshold range,
        short_circuit_delay_us sc_delay, short_circuit_discharge_mv sc_voltage,
        over_current_delay_ms oc_delay, over_current_discharge_mv oc_voltage ) {
 8000c68:	b5b0      	push	{r4, r5, r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	0005      	movs	r5, r0
 8000c70:	000c      	movs	r4, r1
 8000c72:	0010      	movs	r0, r2
 8000c74:	0019      	movs	r1, r3
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	1c2a      	adds	r2, r5, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	1dbb      	adds	r3, r7, #6
 8000c7e:	1c22      	adds	r2, r4, #0
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	1d7b      	adds	r3, r7, #5
 8000c84:	1c02      	adds	r2, r0, #0
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	1c0a      	adds	r2, r1, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
	uint8_t reg = readRegister(PROTECT1) & 0b01100000;
 8000c8e:	2006      	movs	r0, #6
 8000c90:	f000 f8a0 	bl	8000dd4 <readRegister>
 8000c94:	0003      	movs	r3, r0
 8000c96:	0019      	movs	r1, r3
 8000c98:	240f      	movs	r4, #15
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2260      	movs	r2, #96	; 0x60
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
	reg |= range;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	1939      	adds	r1, r7, r4
 8000ca6:	1dfa      	adds	r2, r7, #7
 8000ca8:	7809      	ldrb	r1, [r1, #0]
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	701a      	strb	r2, [r3, #0]
	reg |= sc_delay;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	1939      	adds	r1, r7, r4
 8000cb4:	1dba      	adds	r2, r7, #6
 8000cb6:	7809      	ldrb	r1, [r1, #0]
 8000cb8:	7812      	ldrb	r2, [r2, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
	reg |= sc_voltage;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	1939      	adds	r1, r7, r4
 8000cc2:	1d7a      	adds	r2, r7, #5
 8000cc4:	7809      	ldrb	r1, [r1, #0]
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
	writeRegister(PROTECT1, reg);
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	2006      	movs	r0, #6
 8000cd4:	f000 f864 	bl	8000da0 <writeRegister>

	reg = readRegister(PROTECT2) & 0b10000000;
 8000cd8:	2007      	movs	r0, #7
 8000cda:	f000 f87b 	bl	8000dd4 <readRegister>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	227f      	movs	r2, #127	; 0x7f
 8000ce6:	4391      	bics	r1, r2
 8000ce8:	000a      	movs	r2, r1
 8000cea:	701a      	strb	r2, [r3, #0]
	reg |= oc_delay;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	1939      	adds	r1, r7, r4
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	7809      	ldrb	r1, [r1, #0]
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
	reg |= oc_voltage;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	193a      	adds	r2, r7, r4
 8000cfe:	2120      	movs	r1, #32
 8000d00:	1878      	adds	r0, r7, r1
 8000d02:	7811      	ldrb	r1, [r2, #0]
 8000d04:	7802      	ldrb	r2, [r0, #0]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	writeRegister(PROTECT2, reg);
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0019      	movs	r1, r3
 8000d10:	2007      	movs	r0, #7
 8000d12:	f000 f845 	bl	8000da0 <writeRegister>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bdb0      	pop	{r4, r5, r7, pc}

08000d1e <setOvUvProtection>:

static void setOvUvProtection(under_voltage_delay_s uv_delay, uint8_t uvLimit, over_voltage_delay_s  ov_delay, uint8_t ovLimit) {
 8000d1e:	b5b0      	push	{r4, r5, r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	0005      	movs	r5, r0
 8000d26:	000c      	movs	r4, r1
 8000d28:	0010      	movs	r0, r2
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	1c2a      	adds	r2, r5, #0
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	1dbb      	adds	r3, r7, #6
 8000d34:	1c22      	adds	r2, r4, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	1d7b      	adds	r3, r7, #5
 8000d3a:	1c02      	adds	r2, r0, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	1c0a      	adds	r2, r1, #0
 8000d42:	701a      	strb	r2, [r3, #0]
	uint8_t reg = readRegister(PROTECT3) & 0b00001111;
 8000d44:	2008      	movs	r0, #8
 8000d46:	f000 f845 	bl	8000dd4 <readRegister>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	200f      	movs	r0, #15
 8000d50:	183b      	adds	r3, r7, r0
 8000d52:	220f      	movs	r2, #15
 8000d54:	400a      	ands	r2, r1
 8000d56:	701a      	strb	r2, [r3, #0]
	reg |= uv_delay;
 8000d58:	183b      	adds	r3, r7, r0
 8000d5a:	1839      	adds	r1, r7, r0
 8000d5c:	1dfa      	adds	r2, r7, #7
 8000d5e:	7809      	ldrb	r1, [r1, #0]
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
	reg |= ov_delay;
 8000d66:	183b      	adds	r3, r7, r0
 8000d68:	1839      	adds	r1, r7, r0
 8000d6a:	1d7a      	adds	r2, r7, #5
 8000d6c:	7809      	ldrb	r1, [r1, #0]
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	701a      	strb	r2, [r3, #0]
	writeRegister(PROTECT3, reg);
 8000d74:	183b      	adds	r3, r7, r0
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	2008      	movs	r0, #8
 8000d7c:	f000 f810 	bl	8000da0 <writeRegister>
	writeRegister(UV_TRIP, uvLimit);
 8000d80:	1dbb      	adds	r3, r7, #6
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	0019      	movs	r1, r3
 8000d86:	200a      	movs	r0, #10
 8000d88:	f000 f80a 	bl	8000da0 <writeRegister>
	writeRegister(OV_TRIP, ovLimit);
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	0019      	movs	r1, r3
 8000d92:	2009      	movs	r0, #9
 8000d94:	f000 f804 	bl	8000da0 <writeRegister>
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bdb0      	pop	{r4, r5, r7, pc}

08000da0 <writeRegister>:

static uint8_t writeRegister(uint8_t reg, uint8_t data) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	1dbb      	adds	r3, r7, #6
 8000dae:	1c0a      	adds	r2, r1, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];
	buf[0]=data;
 8000db2:	210c      	movs	r1, #12
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	1dba      	adds	r2, r7, #6
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	701a      	strb	r2, [r3, #0]
	return bqSendData(reg,buf,1);
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 f81d 	bl	8000e04 <bqSendData>
 8000dca:	0003      	movs	r3, r0
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b004      	add	sp, #16
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <readRegister>:

static uint8_t readRegister(uint8_t reg) {
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	0002      	movs	r2, r0
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1]={0};
 8000de0:	240c      	movs	r4, #12
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
	bqReadData(reg,buf,1);
 8000de8:	1939      	adds	r1, r7, r4
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2201      	movs	r2, #1
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 f877 	bl	8000ee4 <bqReadData>
	return buf[0];
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	781b      	ldrb	r3, [r3, #0]
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b005      	add	sp, #20
 8000e00:	bd90      	pop	{r4, r7, pc}
	...

08000e04 <bqSendData>:

static uint8_t bqSendData(uint8_t addr, uint8_t *buffer, uint8_t count) {
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	6039      	str	r1, [r7, #0]
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	1c02      	adds	r2, r0, #0
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	1dbb      	adds	r3, r7, #6
 8000e16:	1c0a      	adds	r2, r1, #0
 8000e18:	701a      	strb	r2, [r3, #0]
	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, (count+1)
 8000e1a:	4b30      	ldr	r3, [pc, #192]	; (8000edc <bqSendData+0xd8>)
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	1dbb      	adds	r3, r7, #6
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	001a      	movs	r2, r3
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <bqSendData+0xdc>)
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	049b      	lsls	r3, r3, #18
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	0013      	movs	r3, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	2130      	movs	r1, #48	; 0x30
 8000e36:	f7ff fb1f 	bl	8000478 <LL_I2C_HandleTransfer>
			, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_TXIS(bqI2C)));
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <bqSendData+0xd8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff faf9 	bl	8000438 <LL_I2C_IsActiveFlag_NACK>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d106      	bne.n	8000e58 <bqSendData+0x54>
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <bqSendData+0xd8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fad0 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d0f1      	beq.n	8000e3c <bqSendData+0x38>
	if(1==LL_I2C_IsActiveFlag_TXIS(bqI2C)) {
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <bqSendData+0xd8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff fac9 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 8000e62:	0003      	movs	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d12c      	bne.n	8000ec2 <bqSendData+0xbe>
		LL_I2C_TransmitData8(bqI2C, addr);
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <bqSendData+0xd8>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	0019      	movs	r1, r3
 8000e72:	0010      	movs	r0, r2
 8000e74:	f7ff fb31 	bl	80004da <LL_I2C_TransmitData8>
		for(uint8_t cnt=0;cnt<count;cnt++) {
 8000e78:	230f      	movs	r3, #15
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e017      	b.n	8000eb2 <bqSendData+0xae>
			while(0==LL_I2C_IsActiveFlag_TXIS(bqI2C));
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <bqSendData+0xd8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fab3 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d0f8      	beq.n	8000e84 <bqSendData+0x80>
			LL_I2C_TransmitData8(bqI2C, buffer[cnt]);
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <bqSendData+0xd8>)
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	240f      	movs	r4, #15
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	18d3      	adds	r3, r2, r3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	f7ff fb19 	bl	80004da <LL_I2C_TransmitData8>
		for(uint8_t cnt=0;cnt<count;cnt++) {
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	3201      	adds	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	18fa      	adds	r2, r7, r3
 8000eb6:	1dbb      	adds	r3, r7, #6
 8000eb8:	7812      	ldrb	r2, [r2, #0]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d3e0      	bcc.n	8000e82 <bqSendData+0x7e>
 8000ec0:	e006      	b.n	8000ed0 <bqSendData+0xcc>
		}
	} else {
		LL_I2C_ClearFlag_NACK(bqI2C);
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <bqSendData+0xd8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff fac7 	bl	800045a <LL_I2C_ClearFlag_NACK>
		return 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e000      	b.n	8000ed2 <bqSendData+0xce>
	}
	return 1;
 8000ed0:	2301      	movs	r3, #1
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b005      	add	sp, #20
 8000ed8:	bd90      	pop	{r4, r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	20000060 	.word	0x20000060
 8000ee0:	80002000 	.word	0x80002000

08000ee4 <bqReadData>:

static uint8_t bqReadData(uint8_t addr, uint8_t *buffer, uint8_t count) {
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	6039      	str	r1, [r7, #0]
 8000eec:	0011      	movs	r1, r2
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	1c02      	adds	r2, r0, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	1dbb      	adds	r3, r7, #6
 8000ef6:	1c0a      	adds	r2, r1, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE );
 8000efa:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <bqReadData+0x114>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <bqReadData+0x118>)
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2300      	movs	r3, #0
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2130      	movs	r1, #48	; 0x30
 8000f0c:	f7ff fab4 	bl	8000478 <LL_I2C_HandleTransfer>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_TXIS(bqI2C)));
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <bqReadData+0x114>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff fa8e 	bl	8000438 <LL_I2C_IsActiveFlag_NACK>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d106      	bne.n	8000f2e <bqReadData+0x4a>
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <bqReadData+0x114>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff fa65 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d0f1      	beq.n	8000f12 <bqReadData+0x2e>
	if(1==LL_I2C_IsActiveFlag_TXIS(bqI2C)) {
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <bqReadData+0x114>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff fa5e 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d116      	bne.n	8000f6c <bqReadData+0x88>
		LL_I2C_TransmitData8(bqI2C, addr);
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <bqReadData+0x114>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0019      	movs	r1, r3
 8000f48:	0010      	movs	r0, r2
 8000f4a:	f7ff fac6 	bl	80004da <LL_I2C_TransmitData8>
	} else {
		return 0;
	}

	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, count, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ );
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <bqReadData+0x114>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	1dbb      	adds	r3, r7, #6
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <bqReadData+0x11c>)
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	049b      	lsls	r3, r3, #18
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	0013      	movs	r3, r2
 8000f62:	2200      	movs	r2, #0
 8000f64:	2130      	movs	r1, #48	; 0x30
 8000f66:	f7ff fa87 	bl	8000478 <LL_I2C_HandleTransfer>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_RXNE(bqI2C)));
 8000f6a:	e001      	b.n	8000f70 <bqReadData+0x8c>
		return 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e03e      	b.n	8000fee <bqReadData+0x10a>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_RXNE(bqI2C)));
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <bqReadData+0x114>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff fa5f 	bl	8000438 <LL_I2C_IsActiveFlag_NACK>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d106      	bne.n	8000f8c <bqReadData+0xa8>
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <bqReadData+0x114>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff fa47 	bl	8000416 <LL_I2C_IsActiveFlag_RXNE>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d0f1      	beq.n	8000f70 <bqReadData+0x8c>
	if(1==LL_I2C_IsActiveFlag_RXNE(bqI2C)) {
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <bqReadData+0x114>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff fa40 	bl	8000416 <LL_I2C_IsActiveFlag_RXNE>
 8000f96:	0003      	movs	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d125      	bne.n	8000fe8 <bqReadData+0x104>
		for(uint8_t cnt=0; cnt<count;cnt++) {
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e018      	b.n	8000fd8 <bqReadData+0xf4>
			while(0==LL_I2C_IsActiveFlag_RXNE(bqI2C));
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <bqReadData+0x114>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff fa32 	bl	8000416 <LL_I2C_IsActiveFlag_RXNE>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d0f8      	beq.n	8000fa8 <bqReadData+0xc4>
			buffer[cnt]=LL_I2C_ReceiveData8(bqI2C);
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <bqReadData+0x114>)
 8000fb8:	6819      	ldr	r1, [r3, #0]
 8000fba:	250f      	movs	r5, #15
 8000fbc:	197b      	adds	r3, r7, r5
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	18d4      	adds	r4, r2, r3
 8000fc4:	0008      	movs	r0, r1
 8000fc6:	f7ff fa7d 	bl	80004c4 <LL_I2C_ReceiveData8>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
		for(uint8_t cnt=0; cnt<count;cnt++) {
 8000fce:	197b      	adds	r3, r7, r5
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	197b      	adds	r3, r7, r5
 8000fd4:	3201      	adds	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	230f      	movs	r3, #15
 8000fda:	18fa      	adds	r2, r7, r3
 8000fdc:	1dbb      	adds	r3, r7, #6
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d3df      	bcc.n	8000fa6 <bqReadData+0xc2>
 8000fe6:	e001      	b.n	8000fec <bqReadData+0x108>
		}
	} else {
		return 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e000      	b.n	8000fee <bqReadData+0x10a>
	}
	return 1;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b004      	add	sp, #16
 8000ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	20000060 	.word	0x20000060
 8000ffc:	80002000 	.word	0x80002000
 8001000:	80002400 	.word	0x80002400

08001004 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2220      	movs	r2, #32
 8001012:	4013      	ands	r3, r2
 8001014:	2b20      	cmp	r3, #32
 8001016:	d101      	bne.n	800101c <LL_USART_IsActiveFlag_RXNE+0x18>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <LL_USART_IsActiveFlag_RXNE+0x1a>
 800101c:	2300      	movs	r3, #0
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}

08001026 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	2240      	movs	r2, #64	; 0x40
 8001034:	4013      	ands	r3, r2
 8001036:	2b40      	cmp	r3, #64	; 0x40
 8001038:	d101      	bne.n	800103e <LL_USART_IsActiveFlag_TC+0x18>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <LL_USART_IsActiveFlag_TC+0x1a>
 800103e:	2300      	movs	r3, #0
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}

08001048 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	4013      	ands	r3, r2
 8001058:	2b80      	cmp	r3, #128	; 0x80
 800105a:	d101      	bne.n	8001060 <LL_USART_IsActiveFlag_TXE+0x18>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001060:	2300      	movs	r3, #0
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}

0800106a <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	b2db      	uxtb	r3, r3
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}

08001080 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	000a      	movs	r2, r1
 800108a:	1cfb      	adds	r3, r7, #3
 800108c:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800108e:	1cfb      	adds	r3, r7, #3
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <LL_GetUID_Word0+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	1ff80050 	.word	0x1ff80050

080010b4 <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 0x04U))));
 80010b8:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <LL_GetUID_Word1+0x10>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	1ff80054 	.word	0x1ff80054

080010c8 <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 0x14U))));
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <LL_GetUID_Word2+0x10>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	1ff80064 	.word	0x1ff80064

080010dc <commInit>:
static void sendBuffer(uint8_t * buffer, uint8_t size);
static void sendText(uint8_t * buffer);

#define mmio32(x)   (*(volatile unsigned long *)(x))

void commInit(USART_TypeDef *USARTx, condensed_afe_data * afeData, afe_config *afeConfig) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	port = USARTx;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <commInit+0x3c>)
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	601a      	str	r2, [r3, #0]
	data = afeData;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <commInit+0x40>)
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	601a      	str	r2, [r3, #0]
	config = afeConfig;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <commInit+0x44>)
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	601a      	str	r2, [r3, #0]
	xsprintf((char*)commBuffer,"+++\r\n");
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <commInit+0x48>)
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <commInit+0x4c>)
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f001 f8bb 	bl	800227c <xsprintf>
	sendText(commBuffer);
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <commInit+0x4c>)
 8001108:	0018      	movs	r0, r3
 800110a:	f000 f975 	bl	80013f8 <sendText>
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b004      	add	sp, #16
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000080 	.word	0x20000080
 800111c:	20000078 	.word	0x20000078
 8001120:	2000007c 	.word	0x2000007c
 8001124:	0800304c 	.word	0x0800304c
 8001128:	20000084 	.word	0x20000084

0800112c <commAct>:

void commAct(void) {
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af02      	add	r7, sp, #8
	uint8_t inCh;
	if(LL_USART_IsActiveFlag_RXNE(port)) {
 8001132:	4ba4      	ldr	r3, [pc, #656]	; (80013c4 <commAct+0x298>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff ff64 	bl	8001004 <LL_USART_IsActiveFlag_RXNE>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d100      	bne.n	8001142 <commAct+0x16>
 8001140:	e139      	b.n	80013b6 <commAct+0x28a>
		inCh = LL_USART_ReceiveData8(port);
 8001142:	4ba0      	ldr	r3, [pc, #640]	; (80013c4 <commAct+0x298>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	1cfc      	adds	r4, r7, #3
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ff8e 	bl	800106a <LL_USART_ReceiveData8>
 800114e:	0003      	movs	r3, r0
 8001150:	7023      	strb	r3, [r4, #0]
		switch(inCh) {
 8001152:	1cfb      	adds	r3, r7, #3
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3b62      	subs	r3, #98	; 0x62
 8001158:	2b11      	cmp	r3, #17
 800115a:	d900      	bls.n	800115e <commAct+0x32>
 800115c:	e12d      	b.n	80013ba <commAct+0x28e>
 800115e:	009a      	lsls	r2, r3, #2
 8001160:	4b99      	ldr	r3, [pc, #612]	; (80013c8 <commAct+0x29c>)
 8001162:	18d3      	adds	r3, r2, r3
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	469f      	mov	pc, r3
		case 'i': // info
			xsprintf((char*)commBuffer,"\r\n+\r\n");
 8001168:	4a98      	ldr	r2, [pc, #608]	; (80013cc <commAct+0x2a0>)
 800116a:	4b99      	ldr	r3, [pc, #612]	; (80013d0 <commAct+0x2a4>)
 800116c:	0011      	movs	r1, r2
 800116e:	0018      	movs	r0, r3
 8001170:	f001 f884 	bl	800227c <xsprintf>
			sendText(commBuffer);
 8001174:	4b96      	ldr	r3, [pc, #600]	; (80013d0 <commAct+0x2a4>)
 8001176:	0018      	movs	r0, r3
 8001178:	f000 f93e 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%04X%04X%04X\r\n",
 800117c:	f7ff ffa4 	bl	80010c8 <LL_GetUID_Word2>
 8001180:	0004      	movs	r4, r0
 8001182:	f7ff ff97 	bl	80010b4 <LL_GetUID_Word1>
 8001186:	0005      	movs	r5, r0
 8001188:	f7ff ff8a 	bl	80010a0 <LL_GetUID_Word0>
 800118c:	0003      	movs	r3, r0
 800118e:	4991      	ldr	r1, [pc, #580]	; (80013d4 <commAct+0x2a8>)
 8001190:	488f      	ldr	r0, [pc, #572]	; (80013d0 <commAct+0x2a4>)
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	002b      	movs	r3, r5
 8001196:	0022      	movs	r2, r4
 8001198:	f001 f870 	bl	800227c <xsprintf>
					LL_GetUID_Word2(),LL_GetUID_Word1(),LL_GetUID_Word0());
			sendText(commBuffer);
 800119c:	4b8c      	ldr	r3, [pc, #560]	; (80013d0 <commAct+0x2a4>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 f92a 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->pack_max_voltage);
 80011a4:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <commAct+0x2ac>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	8a1b      	ldrh	r3, [r3, #16]
 80011aa:	001a      	movs	r2, r3
 80011ac:	498b      	ldr	r1, [pc, #556]	; (80013dc <commAct+0x2b0>)
 80011ae:	4b88      	ldr	r3, [pc, #544]	; (80013d0 <commAct+0x2a4>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 f863 	bl	800227c <xsprintf>
			sendText(commBuffer);
 80011b6:	4b86      	ldr	r3, [pc, #536]	; (80013d0 <commAct+0x2a4>)
 80011b8:	0018      	movs	r0, r3
 80011ba:	f000 f91d 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->cell_bal_voltage);
 80011be:	4b86      	ldr	r3, [pc, #536]	; (80013d8 <commAct+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	8b1b      	ldrh	r3, [r3, #24]
 80011c4:	001a      	movs	r2, r3
 80011c6:	4985      	ldr	r1, [pc, #532]	; (80013dc <commAct+0x2b0>)
 80011c8:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <commAct+0x2a4>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f001 f856 	bl	800227c <xsprintf>
			sendText(commBuffer);
 80011d0:	4b7f      	ldr	r3, [pc, #508]	; (80013d0 <commAct+0x2a4>)
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 f910 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->chargeCurrent_mA);
 80011d8:	4b7f      	ldr	r3, [pc, #508]	; (80013d8 <commAct+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	220a      	movs	r2, #10
 80011de:	5e9b      	ldrsh	r3, [r3, r2]
 80011e0:	001a      	movs	r2, r3
 80011e2:	497e      	ldr	r1, [pc, #504]	; (80013dc <commAct+0x2b0>)
 80011e4:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <commAct+0x2a4>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f001 f848 	bl	800227c <xsprintf>
			sendText(commBuffer);
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <commAct+0x2a4>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 f902 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->cell_max_voltage);
 80011f4:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <commAct+0x2ac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	8a9b      	ldrh	r3, [r3, #20]
 80011fa:	001a      	movs	r2, r3
 80011fc:	4977      	ldr	r1, [pc, #476]	; (80013dc <commAct+0x2b0>)
 80011fe:	4b74      	ldr	r3, [pc, #464]	; (80013d0 <commAct+0x2a4>)
 8001200:	0018      	movs	r0, r3
 8001202:	f001 f83b 	bl	800227c <xsprintf>
			sendText(commBuffer);
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <commAct+0x2a4>)
 8001208:	0018      	movs	r0, r3
 800120a:	f000 f8f5 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->cell_min_voltage);
 800120e:	4b72      	ldr	r3, [pc, #456]	; (80013d8 <commAct+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	8adb      	ldrh	r3, [r3, #22]
 8001214:	001a      	movs	r2, r3
 8001216:	4971      	ldr	r1, [pc, #452]	; (80013dc <commAct+0x2b0>)
 8001218:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <commAct+0x2a4>)
 800121a:	0018      	movs	r0, r3
 800121c:	f001 f82e 	bl	800227c <xsprintf>
			sendText(commBuffer);
 8001220:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <commAct+0x2a4>)
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f8e8 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"*\r\n");
 8001228:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <commAct+0x2b4>)
 800122a:	4b69      	ldr	r3, [pc, #420]	; (80013d0 <commAct+0x2a4>)
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f001 f824 	bl	800227c <xsprintf>
			sendText(commBuffer);
 8001234:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <commAct+0x2a4>)
 8001236:	0018      	movs	r0, r3
 8001238:	f000 f8de 	bl	80013f8 <sendText>
			break;
 800123c:	e0be      	b.n	80013bc <commAct+0x290>
		case 's': // status
			xsprintf((char*)commBuffer,"\r\n+\r\n");
 800123e:	4a63      	ldr	r2, [pc, #396]	; (80013cc <commAct+0x2a0>)
 8001240:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <commAct+0x2a4>)
 8001242:	0011      	movs	r1, r2
 8001244:	0018      	movs	r0, r3
 8001246:	f001 f819 	bl	800227c <xsprintf>
			for(int cnt=0;cnt<15;cnt++) {
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	e01a      	b.n	8001286 <commAct+0x15a>
				if(config->enabled_cells&(1<<cnt)) {
 8001250:	4b61      	ldr	r3, [pc, #388]	; (80013d8 <commAct+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	001a      	movs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	411a      	asrs	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	2201      	movs	r2, #1
 8001260:	4013      	ands	r3, r2
 8001262:	d00d      	beq.n	8001280 <commAct+0x154>
					xsprintf((char*)commBuffer,"%u:%u\r\n",cnt,data->cells[cnt]);
 8001264:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <commAct+0x2b8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	0052      	lsls	r2, r2, #1
 800126c:	5ad3      	ldrh	r3, [r2, r3]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	495d      	ldr	r1, [pc, #372]	; (80013e8 <commAct+0x2bc>)
 8001272:	4857      	ldr	r0, [pc, #348]	; (80013d0 <commAct+0x2a4>)
 8001274:	f001 f802 	bl	800227c <xsprintf>
					sendText(commBuffer);
 8001278:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <commAct+0x2a4>)
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f8bc 	bl	80013f8 <sendText>
			for(int cnt=0;cnt<15;cnt++) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3301      	adds	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0e      	cmp	r3, #14
 800128a:	dde1      	ble.n	8001250 <commAct+0x124>
				}

			}
			xsprintf((char*)commBuffer,"%u\r\n",data->total_voltage);
 800128c:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <commAct+0x2b8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	8bdb      	ldrh	r3, [r3, #30]
 8001292:	001a      	movs	r2, r3
 8001294:	4951      	ldr	r1, [pc, #324]	; (80013dc <commAct+0x2b0>)
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <commAct+0x2a4>)
 8001298:	0018      	movs	r0, r3
 800129a:	f000 ffef 	bl	800227c <xsprintf>
			sendText(commBuffer);
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <commAct+0x2a4>)
 80012a0:	0018      	movs	r0, r3
 80012a2:	f000 f8a9 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%d\r\n",data->system_current);
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <commAct+0x2b8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2224      	movs	r2, #36	; 0x24
 80012ac:	5e9b      	ldrsh	r3, [r3, r2]
 80012ae:	001a      	movs	r2, r3
 80012b0:	494e      	ldr	r1, [pc, #312]	; (80013ec <commAct+0x2c0>)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <commAct+0x2a4>)
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 ffe1 	bl	800227c <xsprintf>
			sendText(commBuffer);
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <commAct+0x2a4>)
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 f89b 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%d\r\n",data->die_temperature);
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <commAct+0x2b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	4948      	ldr	r1, [pc, #288]	; (80013ec <commAct+0x2c0>)
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <commAct+0x2a4>)
 80012cc:	0018      	movs	r0, r3
 80012ce:	f000 ffd5 	bl	800227c <xsprintf>
			sendText(commBuffer);
 80012d2:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <commAct+0x2a4>)
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 f88f 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%02X\r\n",data->status_reg);
 80012da:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <commAct+0x2b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2226      	movs	r2, #38	; 0x26
 80012e0:	5c9b      	ldrb	r3, [r3, r2]
 80012e2:	001a      	movs	r2, r3
 80012e4:	4942      	ldr	r1, [pc, #264]	; (80013f0 <commAct+0x2c4>)
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <commAct+0x2a4>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 ffc7 	bl	800227c <xsprintf>
			sendText(commBuffer);
 80012ee:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <commAct+0x2a4>)
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 f881 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%d\r\n",data->outStatus);
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <commAct+0x2b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2232      	movs	r2, #50	; 0x32
 80012fc:	5c9b      	ldrb	r3, [r3, r2]
 80012fe:	001a      	movs	r2, r3
 8001300:	493a      	ldr	r1, [pc, #232]	; (80013ec <commAct+0x2c0>)
 8001302:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <commAct+0x2a4>)
 8001304:	0018      	movs	r0, r3
 8001306:	f000 ffb9 	bl	800227c <xsprintf>
			sendText(commBuffer);
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <commAct+0x2a4>)
 800130c:	0018      	movs	r0, r3
 800130e:	f000 f873 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"%d %d\r\n",data->balStatus, data->balTarget);
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <commAct+0x2b8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	222e      	movs	r2, #46	; 0x2e
 8001318:	5c9b      	ldrb	r3, [r3, r2]
 800131a:	001a      	movs	r2, r3
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <commAct+0x2b8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001322:	4934      	ldr	r1, [pc, #208]	; (80013f4 <commAct+0x2c8>)
 8001324:	482a      	ldr	r0, [pc, #168]	; (80013d0 <commAct+0x2a4>)
 8001326:	f000 ffa9 	bl	800227c <xsprintf>
			sendText(commBuffer);
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <commAct+0x2a4>)
 800132c:	0018      	movs	r0, r3
 800132e:	f000 f863 	bl	80013f8 <sendText>
			xsprintf((char*)commBuffer,"*\r\n");
 8001332:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <commAct+0x2b4>)
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <commAct+0x2a4>)
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f000 ff9f 	bl	800227c <xsprintf>
			sendText(commBuffer);
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <commAct+0x2a4>)
 8001340:	0018      	movs	r0, r3
 8001342:	f000 f859 	bl	80013f8 <sendText>
			break;
 8001346:	e039      	b.n	80013bc <commAct+0x290>
		case 'e' : // enable
			bqEnableAll();
 8001348:	f7ff f9d0 	bl	80006ec <bqEnableAll>
			xsprintf((char*)commBuffer,"*\r\n");
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <commAct+0x2b4>)
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <commAct+0x2a4>)
 8001350:	0011      	movs	r1, r2
 8001352:	0018      	movs	r0, r3
 8001354:	f000 ff92 	bl	800227c <xsprintf>
			sendText(commBuffer);
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <commAct+0x2a4>)
 800135a:	0018      	movs	r0, r3
 800135c:	f000 f84c 	bl	80013f8 <sendText>
			break;
 8001360:	e02c      	b.n	80013bc <commAct+0x290>
		case 'd' : // disable
			bqDisableAll();
 8001362:	f7ff f9a3 	bl	80006ac <bqDisableAll>
			xsprintf((char*)commBuffer,"*\r\n");
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <commAct+0x2b4>)
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <commAct+0x2a4>)
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f000 ff85 	bl	800227c <xsprintf>
			sendText(commBuffer);
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <commAct+0x2a4>)
 8001374:	0018      	movs	r0, r3
 8001376:	f000 f83f 	bl	80013f8 <sendText>
			break;
 800137a:	e01f      	b.n	80013bc <commAct+0x290>
		case 'r' : // reset
			bqResetStatus();
 800137c:	f7ff f9d6 	bl	800072c <bqResetStatus>
			xsprintf((char*)commBuffer,"*\r\n");
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <commAct+0x2b4>)
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <commAct+0x2a4>)
 8001384:	0011      	movs	r1, r2
 8001386:	0018      	movs	r0, r3
 8001388:	f000 ff78 	bl	800227c <xsprintf>
			sendText(commBuffer);
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <commAct+0x2a4>)
 800138e:	0018      	movs	r0, r3
 8001390:	f000 f832 	bl	80013f8 <sendText>
			break;
 8001394:	e012      	b.n	80013bc <commAct+0x290>
		case 'b' : // balance start
			data->balStatus = 1;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <commAct+0x2b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	222e      	movs	r2, #46	; 0x2e
 800139c:	2101      	movs	r1, #1
 800139e:	5499      	strb	r1, [r3, r2]
			xsprintf((char*)commBuffer,"*\r\n");
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <commAct+0x2b4>)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <commAct+0x2a4>)
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 ff68 	bl	800227c <xsprintf>
			sendText(commBuffer);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <commAct+0x2a4>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f822 	bl	80013f8 <sendText>
			break;
 80013b4:	e002      	b.n	80013bc <commAct+0x290>
		default:
			break;
		}
	}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	e000      	b.n	80013bc <commAct+0x290>
			break;
 80013ba:	46c0      	nop			; (mov r8, r8)
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bdb0      	pop	{r4, r5, r7, pc}
 80013c4:	20000080 	.word	0x20000080
 80013c8:	0800317c 	.word	0x0800317c
 80013cc:	08003054 	.word	0x08003054
 80013d0:	20000084 	.word	0x20000084
 80013d4:	0800305c 	.word	0x0800305c
 80013d8:	2000007c 	.word	0x2000007c
 80013dc:	0800306c 	.word	0x0800306c
 80013e0:	08003074 	.word	0x08003074
 80013e4:	20000078 	.word	0x20000078
 80013e8:	08003078 	.word	0x08003078
 80013ec:	08003080 	.word	0x08003080
 80013f0:	08003088 	.word	0x08003088
 80013f4:	08003090 	.word	0x08003090

080013f8 <sendText>:
		LL_USART_TransmitData8(port, buffer[cnt]);
	}
	while(0==LL_USART_IsActiveFlag_TC(port));
}

static void sendText(uint8_t * buffer) {
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	uint8_t cnt=0;
 8001400:	230f      	movs	r3, #15
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
	while(0!=buffer[cnt]) {
 8001408:	e017      	b.n	800143a <sendText+0x42>
		while(0==LL_USART_IsActiveFlag_TXE(port));
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <sendText+0x6c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fe19 	bl	8001048 <LL_USART_IsActiveFlag_TXE>
 8001416:	1e03      	subs	r3, r0, #0
 8001418:	d0f8      	beq.n	800140c <sendText+0x14>
		LL_USART_TransmitData8(port, buffer[cnt]);
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <sendText+0x6c>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	240f      	movs	r4, #15
 8001420:	193b      	adds	r3, r7, r4
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	0019      	movs	r1, r3
 800142c:	f7ff fe28 	bl	8001080 <LL_USART_TransmitData8>
		cnt++;
 8001430:	193b      	adds	r3, r7, r4
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	193b      	adds	r3, r7, r4
 8001436:	3201      	adds	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
	while(0!=buffer[cnt]) {
 800143a:	230f      	movs	r3, #15
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	18d3      	adds	r3, r2, r3
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1df      	bne.n	800140a <sendText+0x12>
	}
	while(0==LL_USART_IsActiveFlag_TC(port));
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <sendText+0x6c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff fde8 	bl	8001026 <LL_USART_IsActiveFlag_TC>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d0f8      	beq.n	800144c <sendText+0x54>
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b005      	add	sp, #20
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	20000080 	.word	0x20000080

08001468 <LL_I2C_EnableClockStretching>:
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <LL_I2C_EnableClockStretching+0x1c>)
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}
 8001484:	fffdffff 	.word	0xfffdffff

08001488 <LL_I2C_DisableGeneralCall>:
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <LL_I2C_DisableGeneralCall+0x1c>)
 8001496:	401a      	ands	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	fff7ffff 	.word	0xfff7ffff

080014a8 <LL_I2C_SetOwnAddress2>:
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <LL_I2C_SetOwnAddress2+0x28>)
 80014ba:	401a      	ands	r2, r3
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	430b      	orrs	r3, r1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	60da      	str	r2, [r3, #12]
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b004      	add	sp, #16
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	fffff801 	.word	0xfffff801

080014d4 <LL_I2C_DisableOwnAddress2>:
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <LL_I2C_DisableOwnAddress2+0x1c>)
 80014e2:	401a      	ands	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	60da      	str	r2, [r3, #12]
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	ffff7fff 	.word	0xffff7fff

080014f4 <LL_I2C_EnableAutoEndMode>:
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	0492      	lsls	r2, r2, #18
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	605a      	str	r2, [r3, #4]
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <LL_RCC_MSI_Enable+0x18>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <LL_RCC_MSI_Enable+0x18>)
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	0049      	lsls	r1, r1, #1
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000

08001530 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <LL_RCC_MSI_IsReady+0x24>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	401a      	ands	r2, r3
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	429a      	cmp	r2, r3
 8001544:	d101      	bne.n	800154a <LL_RCC_MSI_IsReady+0x1a>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <LL_RCC_MSI_IsReady+0x1c>
 800154a:	2300      	movs	r3, #0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	40021000 	.word	0x40021000

08001558 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <LL_RCC_MSI_SetRange+0x24>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <LL_RCC_MSI_SetRange+0x28>)
 8001566:	4013      	ands	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <LL_RCC_MSI_SetRange+0x24>)
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	430a      	orrs	r2, r1
 8001570:	605a      	str	r2, [r3, #4]
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	40021000 	.word	0x40021000
 8001580:	ffff1fff 	.word	0xffff1fff

08001584 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	0a19      	lsrs	r1, r3, #8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	061a      	lsls	r2, r3, #24
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 800159a:	430a      	orrs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000

080015ac <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <LL_RCC_SetSysClkSource+0x24>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2203      	movs	r2, #3
 80015ba:	4393      	bics	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <LL_RCC_SetSysClkSource+0x24>)
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	40021000 	.word	0x40021000

080015d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <LL_RCC_GetSysClkSource+0x14>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	220c      	movs	r2, #12
 80015de:	4013      	ands	r3, r2
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	40021000 	.word	0x40021000

080015ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <LL_RCC_SetAHBPrescaler+0x24>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	22f0      	movs	r2, #240	; 0xf0
 80015fa:	4393      	bics	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <LL_RCC_SetAHBPrescaler+0x24>)
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	430a      	orrs	r2, r1
 8001604:	60da      	str	r2, [r3, #12]
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40021000 	.word	0x40021000

08001614 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <LL_RCC_SetAPB1Prescaler+0x24>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001622:	4013      	ands	r3, r2
 8001624:	0019      	movs	r1, r3
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	40021000 	.word	0x40021000
 800163c:	fffff8ff 	.word	0xfffff8ff

08001640 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <LL_RCC_SetAPB2Prescaler+0x24>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <LL_RCC_SetAPB2Prescaler+0x28>)
 800164e:	4013      	ands	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	430a      	orrs	r2, r1
 8001658:	60da      	str	r2, [r3, #12]
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	40021000 	.word	0x40021000
 8001668:	ffffc7ff 	.word	0xffffc7ff

0800166c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	0c12      	lsrs	r2, r2, #16
 800167c:	43d2      	mvns	r2, r2
 800167e:	401a      	ands	r2, r3
 8001680:	0011      	movs	r1, r2
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	0c1a      	lsrs	r2, r3, #16
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <LL_RCC_SetUSARTClockSource+0x2c>)
 800168a:	430a      	orrs	r2, r1
 800168c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40021000 	.word	0x40021000

0800169c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <LL_RCC_SetI2CClockSource+0x34>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	0911      	lsrs	r1, r2, #4
 80016ac:	22ff      	movs	r2, #255	; 0xff
 80016ae:	0312      	lsls	r2, r2, #12
 80016b0:	400a      	ands	r2, r1
 80016b2:	43d2      	mvns	r2, r2
 80016b4:	401a      	ands	r2, r3
 80016b6:	0011      	movs	r1, r2
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	011a      	lsls	r2, r3, #4
 80016bc:	23ff      	movs	r3, #255	; 0xff
 80016be:	031b      	lsls	r3, r3, #12
 80016c0:	401a      	ands	r2, r3
 80016c2:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <LL_RCC_SetI2CClockSource+0x34>)
 80016c4:	430a      	orrs	r2, r1
 80016c6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <LL_APB1_GRP1_EnableClock+0x28>)
 80016de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <LL_APB1_GRP1_EnableClock+0x28>)
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <LL_APB1_GRP1_EnableClock+0x28>)
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000

08001700 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <LL_APB2_GRP1_EnableClock+0x28>)
 800170a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <LL_APB2_GRP1_EnableClock+0x28>)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	430a      	orrs	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <LL_APB2_GRP1_EnableClock+0x28>)
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4013      	ands	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <LL_IOP_GRP1_EnableClock+0x28>)
 8001736:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <LL_IOP_GRP1_EnableClock+0x28>)
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	430a      	orrs	r2, r1
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <LL_IOP_GRP1_EnableClock+0x28>)
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4013      	ands	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b004      	add	sp, #16
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000

08001758 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <LL_FLASH_SetLatency+0x24>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4393      	bics	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <LL_FLASH_SetLatency+0x24>)
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	40022000 	.word	0x40022000

08001780 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <LL_FLASH_GetLatency+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40022000 	.word	0x40022000

08001798 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <LL_PWR_SetRegulVoltageScaling+0x28>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40007000 	.word	0x40007000
 80017c0:	ffffe7ff 	.word	0xffffe7ff

080017c4 <LL_USART_Enable>:
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2201      	movs	r2, #1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}

080017e0 <LL_USART_DisableOverrunDetect>:
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	0152      	lsls	r2, r2, #5
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	609a      	str	r2, [r3, #8]
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <LL_USART_ConfigAsyncMode>:
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <LL_USART_ConfigAsyncMode+0x2c>)
 800180e:	401a      	ands	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	222a      	movs	r2, #42	; 0x2a
 800181a:	4393      	bics	r3, r2
 800181c:	001a      	movs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	609a      	str	r2, [r3, #8]
}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b002      	add	sp, #8
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	ffffb7ff 	.word	0xffffb7ff

08001830 <LL_USART_DisableDMADeactOnRxErr>:
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <LL_USART_DisableDMADeactOnRxErr+0x1c>)
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}
 800184c:	ffffdfff 	.word	0xffffdfff

08001850 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	4013      	ands	r3, r2
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	425a      	negs	r2, r3
 8001868:	4153      	adcs	r3, r2
 800186a:	b2db      	uxtb	r3, r3
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b002      	add	sp, #8
 8001872:	bd80      	pop	{r7, pc}

08001874 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	619a      	str	r2, [r3, #24]
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff ff29 	bl	8001700 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	055b      	lsls	r3, r3, #21
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7ff ff0e 	bl	80016d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b8:	f000 f8aa 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018bc:	f000 f9f8 	bl	8001cb0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018c0:	f000 f8ee 	bl	8001aa0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80018c4:	f000 f974 	bl	8001bb0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  afeConfig.enabled_cells=0b00010111;
 80018c8:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <main+0x14c>)
 80018ca:	2217      	movs	r2, #23
 80018cc:	801a      	strh	r2, [r3, #0]
  // current limit settings
  afeConfig.range = threshold_upper;
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <main+0x14c>)
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	709a      	strb	r2, [r3, #2]
  afeConfig.sc_delay = scd_400_us;
 80018d4:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <main+0x14c>)
 80018d6:	2218      	movs	r2, #24
 80018d8:	70da      	strb	r2, [r3, #3]
  afeConfig.sc_voltage=scd_44_22_mv;
 80018da:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <main+0x14c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	711a      	strb	r2, [r3, #4]
  afeConfig.oc_delay=ocd_8_ms;
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <main+0x14c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	715a      	strb	r2, [r3, #5]
  afeConfig.oc_voltage=ocd_17_8_mv;
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <main+0x14c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	719a      	strb	r2, [r3, #6]
  afeConfig.shuntValue=5; // 5 mOhms
 80018ec:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <main+0x14c>)
 80018ee:	2205      	movs	r2, #5
 80018f0:	811a      	strh	r2, [r3, #8]
  afeConfig.chargeCurrent_mA = 1500;
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <main+0x14c>)
 80018f4:	4a3f      	ldr	r2, [pc, #252]	; (80019f4 <main+0x150>)
 80018f6:	815a      	strh	r2, [r3, #10]

  // voltage limit settings
  afeConfig.uv_delay=uvd_4_s;
 80018f8:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <main+0x14c>)
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	731a      	strb	r2, [r3, #12]
  afeConfig.uvLimit=0xDA;
 80018fe:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <main+0x14c>)
 8001900:	22da      	movs	r2, #218	; 0xda
 8001902:	735a      	strb	r2, [r3, #13]
  afeConfig.ov_delay=ovd_2_s;
 8001904:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <main+0x14c>)
 8001906:	2210      	movs	r2, #16
 8001908:	739a      	strb	r2, [r3, #14]
  afeConfig.ovLimit=0xAA;
 800190a:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <main+0x14c>)
 800190c:	22aa      	movs	r2, #170	; 0xaa
 800190e:	73da      	strb	r2, [r3, #15]

  // generic pack configuration
  afeConfig.pack_max_voltage = 16400;
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <main+0x14c>)
 8001912:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <main+0x154>)
 8001914:	821a      	strh	r2, [r3, #16]
  afeConfig.cell_bal_voltage = 4100;
 8001916:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <main+0x14c>)
 8001918:	4a38      	ldr	r2, [pc, #224]	; (80019fc <main+0x158>)
 800191a:	831a      	strh	r2, [r3, #24]

  if(0==bqInit(I2C1, &afeData, &afeConfig)) {
 800191c:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <main+0x14c>)
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <main+0x15c>)
 8001920:	4838      	ldr	r0, [pc, #224]	; (8001a04 <main+0x160>)
 8001922:	0019      	movs	r1, r3
 8001924:	f7fe fde8 	bl	80004f8 <bqInit>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d101      	bne.n	8001930 <main+0x8c>
	  // ERROR
	  asm volatile ("bkpt 0");
 800192c:	be00      	bkpt	0x0000
 800192e:	e001      	b.n	8001934 <main+0x90>
  } else {
	  bqEnableAll();
 8001930:	f7fe fedc 	bl	80006ec <bqEnableAll>
  }

  commInit(USART2, &afeData, &afeConfig);
 8001934:	4a2e      	ldr	r2, [pc, #184]	; (80019f0 <main+0x14c>)
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <main+0x15c>)
 8001938:	4833      	ldr	r0, [pc, #204]	; (8001a08 <main+0x164>)
 800193a:	0019      	movs	r1, r3
 800193c:	f7ff fbce 	bl	80010dc <commInit>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // handle AFE
	  if(LL_GPIO_IsInputPinSet(SIGNAL_GPIO_Port,SIGNAL_Pin)) {
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <main+0x168>)
 8001942:	2102      	movs	r1, #2
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff ff83 	bl	8001850 <LL_GPIO_IsInputPinSet>
 800194a:	1e03      	subs	r3, r0, #0
 800194c:	d0f8      	beq.n	8001940 <main+0x9c>
		  LL_GPIO_SetOutputPin(LED0_GPIO_Port, LED0_Pin);
 800194e:	23a0      	movs	r3, #160	; 0xa0
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	2120      	movs	r1, #32
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff ff8d 	bl	8001874 <LL_GPIO_SetOutputPin>
		  // AFE event signaled,
		  bqAct();
 800195a:	f7fe fe69 	bl	8000630 <bqAct>
		  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 800195e:	23a0      	movs	r3, #160	; 0xa0
 8001960:	05db      	lsls	r3, r3, #23
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ff91 	bl	800188c <LL_GPIO_ResetOutputPin>
		  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 800196a:	23a0      	movs	r3, #160	; 0xa0
 800196c:	05db      	lsls	r3, r3, #23
 800196e:	2110      	movs	r1, #16
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff ff8b 	bl	800188c <LL_GPIO_ResetOutputPin>
		  if(0b00001100&afeData.status_reg) { // voltage problem
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <main+0x15c>)
 8001978:	2226      	movs	r2, #38	; 0x26
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	220c      	movs	r2, #12
 800197e:	4013      	ands	r3, r2
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <main+0xf0>
			  LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001986:	23a0      	movs	r3, #160	; 0xa0
 8001988:	05db      	lsls	r3, r3, #23
 800198a:	2140      	movs	r1, #64	; 0x40
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ff71 	bl	8001874 <LL_GPIO_SetOutputPin>
 8001992:	e022      	b.n	80019da <main+0x136>
		  } else if(0b00000011&afeData.status_reg) { // discharge current problem
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <main+0x15c>)
 8001996:	2226      	movs	r2, #38	; 0x26
 8001998:	5c9b      	ldrb	r3, [r3, r2]
 800199a:	2203      	movs	r2, #3
 800199c:	4013      	ands	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <main+0x10e>
			  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 80019a4:	23a0      	movs	r3, #160	; 0xa0
 80019a6:	05db      	lsls	r3, r3, #23
 80019a8:	2110      	movs	r1, #16
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff ff62 	bl	8001874 <LL_GPIO_SetOutputPin>
 80019b0:	e013      	b.n	80019da <main+0x136>
		  } else if (0b11000000&afeData.status_reg) { // charge current problem
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <main+0x15c>)
 80019b4:	2226      	movs	r2, #38	; 0x26
 80019b6:	5c9b      	ldrb	r3, [r3, r2]
 80019b8:	223f      	movs	r2, #63	; 0x3f
 80019ba:	4393      	bics	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <main+0x136>
			  LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80019c2:	23a0      	movs	r3, #160	; 0xa0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	2140      	movs	r1, #64	; 0x40
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff ff53 	bl	8001874 <LL_GPIO_SetOutputPin>
			  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 80019ce:	23a0      	movs	r3, #160	; 0xa0
 80019d0:	05db      	lsls	r3, r3, #23
 80019d2:	2110      	movs	r1, #16
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff ff4d 	bl	8001874 <LL_GPIO_SetOutputPin>
		  }
		  // handle the balancing system
		  bqBalance();
 80019da:	f7fe feb1 	bl	8000740 <bqBalance>

		  // handle the communication system
		  commAct();
 80019de:	f7ff fba5 	bl	800112c <commAct>

		  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 80019e2:	23a0      	movs	r3, #160	; 0xa0
 80019e4:	05db      	lsls	r3, r3, #23
 80019e6:	2120      	movs	r1, #32
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ff4f 	bl	800188c <LL_GPIO_ResetOutputPin>
	  if(LL_GPIO_IsInputPinSet(SIGNAL_GPIO_Port,SIGNAL_Pin)) {
 80019ee:	e7a7      	b.n	8001940 <main+0x9c>
 80019f0:	20000104 	.word	0x20000104
 80019f4:	000005dc 	.word	0x000005dc
 80019f8:	00004010 	.word	0x00004010
 80019fc:	00001004 	.word	0x00001004
 8001a00:	20000120 	.word	0x20000120
 8001a04:	40005400 	.word	0x40005400
 8001a08:	40004400 	.word	0x40004400
 8001a0c:	50000400 	.word	0x50000400

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fe9f 	bl	8001758 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001a1a:	f7ff feb1 	bl	8001780 <LL_FLASH_GetLatency>
 8001a1e:	1e03      	subs	r3, r0, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x16>
  {
  Error_Handler();  
 8001a22:	f000 fa13 	bl	8001e4c <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff feb4 	bl	8001798 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001a30:	f7ff fd70 	bl	8001514 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	f7ff fd7b 	bl	8001530 <LL_RCC_MSI_IsReady>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d1fa      	bne.n	8001a36 <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_5);
 8001a40:	23a0      	movs	r3, #160	; 0xa0
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff fd87 	bl	8001558 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fd9a 	bl	8001584 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fdcb 	bl	80015ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fddc 	bl	8001614 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fdef 	bl	8001640 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fda2 	bl	80015ac <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	f7ff fdb3 	bl	80015d4 <LL_RCC_GetSysClkSource>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d1fb      	bne.n	8001a6a <SystemClock_Config+0x5a>
  {
  
  }

  LL_Init1msTick(2097000);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <SystemClock_Config+0x8c>)
 8001a74:	0018      	movs	r0, r3
 8001a76:	f001 fa93 	bl	8002fa0 <LL_Init1msTick>

  LL_SetSystemCoreClock(2097000);
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <SystemClock_Config+0x8c>)
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f001 fa9f 	bl	8002fc0 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001a82:	23c0      	movs	r3, #192	; 0xc0
 8001a84:	031b      	lsls	r3, r3, #12
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff fdf0 	bl	800166c <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8001a8c:	23c0      	movs	r3, #192	; 0xc0
 8001a8e:	029b      	lsls	r3, r3, #10
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff fe03 	bl	800169c <LL_RCC_SetI2CClockSource>
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	001fff68 	.word	0x001fff68

08001aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08f      	sub	sp, #60	; 0x3c
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001aa6:	241c      	movs	r4, #28
 8001aa8:	193b      	adds	r3, r7, r4
 8001aaa:	0018      	movs	r0, r3
 8001aac:	231c      	movs	r3, #28
 8001aae:	001a      	movs	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f001 fab7 	bl	8003024 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	0018      	movs	r0, r3
 8001aba:	2318      	movs	r3, #24
 8001abc:	001a      	movs	r2, r3
 8001abe:	2100      	movs	r1, #0
 8001ac0:	f001 fab0 	bl	8003024 <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7ff fe31 	bl	800172c <LL_IOP_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2203      	movs	r2, #3
 8001adc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2201      	movs	r2, #1
 8001aee:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	1d3a      	adds	r2, r7, #4
 8001af2:	23a0      	movs	r3, #160	; 0xa0
 8001af4:	05db      	lsls	r3, r3, #23
 8001af6:	0011      	movs	r1, r2
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 fcc9 	bl	8002490 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	00d2      	lsls	r2, r2, #3
 8001b04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2202      	movs	r2, #2
 8001b0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2203      	movs	r2, #3
 8001b10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2201      	movs	r2, #1
 8001b16:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2201      	movs	r2, #1
 8001b22:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	1d3a      	adds	r2, r7, #4
 8001b26:	23a0      	movs	r3, #160	; 0xa0
 8001b28:	05db      	lsls	r3, r3, #23
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 fcaf 	bl	8002490 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	039b      	lsls	r3, r3, #14
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff fdcc 	bl	80016d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <MX_I2C1_Init+0x10c>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff fcd8 	bl	80014f4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <MX_I2C1_Init+0x10c>)
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff fcc4 	bl	80014d4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_I2C1_Init+0x10c>)
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7ff fc9a 	bl	8001488 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_I2C1_Init+0x10c>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff fc86 	bl	8001468 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001b5c:	193b      	adds	r3, r7, r4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x00000508;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	22a1      	movs	r2, #161	; 0xa1
 8001b66:	00d2      	lsls	r2, r2, #3
 8001b68:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001b6a:	0021      	movs	r1, r4
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 1;
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	2201      	movs	r2, #1
 8001b76:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <MX_I2C1_Init+0x10c>)
 8001b8e:	0019      	movs	r1, r3
 8001b90:	0010      	movs	r0, r2
 8001b92:	f000 fe21 	bl	80027d8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <MX_I2C1_Init+0x10c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fc83 	bl	80014a8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b00f      	add	sp, #60	; 0x3c
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	40005400 	.word	0x40005400

08001bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b08f      	sub	sp, #60	; 0x3c
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001bb6:	241c      	movs	r4, #28
 8001bb8:	193b      	adds	r3, r7, r4
 8001bba:	0018      	movs	r0, r3
 8001bbc:	231c      	movs	r3, #28
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	f001 fa2f 	bl	8003024 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	0018      	movs	r0, r3
 8001bca:	2318      	movs	r3, #24
 8001bcc:	001a      	movs	r2, r3
 8001bce:	2100      	movs	r1, #0
 8001bd0:	f001 fa28 	bl	8003024 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	029b      	lsls	r3, r3, #10
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fd7b 	bl	80016d4 <LL_APB1_GRP1_EnableClock>
  
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fda4 	bl	800172c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2204      	movs	r2, #4
 8001be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2202      	movs	r2, #2
 8001bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2204      	movs	r2, #4
 8001c06:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	1d3a      	adds	r2, r7, #4
 8001c0a:	23a0      	movs	r3, #160	; 0xa0
 8001c0c:	05db      	lsls	r3, r3, #23
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 fc3d 	bl	8002490 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2208      	movs	r2, #8
 8001c1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2202      	movs	r2, #2
 8001c20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2203      	movs	r2, #3
 8001c26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2204      	movs	r2, #4
 8001c38:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	1d3a      	adds	r2, r7, #4
 8001c3c:	23a0      	movs	r3, #160	; 0xa0
 8001c3e:	05db      	lsls	r3, r3, #23
 8001c40:	0011      	movs	r1, r2
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fc24 	bl	8002490 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001c48:	193b      	adds	r3, r7, r4
 8001c4a:	22e1      	movs	r2, #225	; 0xe1
 8001c4c:	0252      	lsls	r2, r2, #9
 8001c4e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c50:	0021      	movs	r1, r4
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2200      	movs	r2, #0
 8001c56:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	220c      	movs	r2, #12
 8001c68:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <MX_USART2_UART_Init+0xfc>)
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f001 f867 	bl	8002d50 <LL_USART_Init>
  LL_USART_DisableOverrunDetect(USART2);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_USART2_UART_Init+0xfc>)
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff fdab 	bl	80017e0 <LL_USART_DisableOverrunDetect>
  LL_USART_DisableDMADeactOnRxErr(USART2);
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART2_UART_Init+0xfc>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff fdcf 	bl	8001830 <LL_USART_DisableDMADeactOnRxErr>
  LL_USART_ConfigAsyncMode(USART2);
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USART2_UART_Init+0xfc>)
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff fdb3 	bl	8001800 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <MX_USART2_UART_Init+0xfc>)
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff fd91 	bl	80017c4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b00f      	add	sp, #60	; 0x3c
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40004400 	.word	0x40004400

08001cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	003b      	movs	r3, r7
 8001cb8:	0018      	movs	r0, r3
 8001cba:	2318      	movs	r3, #24
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f001 f9b0 	bl	8003024 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001cc4:	2004      	movs	r0, #4
 8001cc6:	f7ff fd31 	bl	800172c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff fd2e 	bl	800172c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	f7ff fd2b 	bl	800172c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001cd6:	23a0      	movs	r3, #160	; 0xa0
 8001cd8:	05db      	lsls	r3, r3, #23
 8001cda:	2110      	movs	r1, #16
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff fdd5 	bl	800188c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001ce2:	23a0      	movs	r3, #160	; 0xa0
 8001ce4:	05db      	lsls	r3, r3, #23
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff fdcf 	bl	800188c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001cee:	23a0      	movs	r3, #160	; 0xa0
 8001cf0:	05db      	lsls	r3, r3, #23
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fdc9 	bl	800188c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001cfa:	003b      	movs	r3, r7
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	01d2      	lsls	r2, r2, #7
 8001d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d02:	003b      	movs	r3, r7
 8001d04:	2203      	movs	r2, #3
 8001d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d08:	003b      	movs	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	003b      	movs	r3, r7
 8001d10:	4a4c      	ldr	r2, [pc, #304]	; (8001e44 <MX_GPIO_Init+0x194>)
 8001d12:	0019      	movs	r1, r3
 8001d14:	0010      	movs	r0, r2
 8001d16:	f000 fbbb 	bl	8002490 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001d1a:	003b      	movs	r3, r7
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	0212      	lsls	r2, r2, #8
 8001d20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d22:	003b      	movs	r3, r7
 8001d24:	2203      	movs	r2, #3
 8001d26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d28:	003b      	movs	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	003b      	movs	r3, r7
 8001d30:	4a44      	ldr	r2, [pc, #272]	; (8001e44 <MX_GPIO_Init+0x194>)
 8001d32:	0019      	movs	r1, r3
 8001d34:	0010      	movs	r0, r2
 8001d36:	f000 fbab 	bl	8002490 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001d3a:	003b      	movs	r3, r7
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d40:	003b      	movs	r3, r7
 8001d42:	2203      	movs	r2, #3
 8001d44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d46:	003b      	movs	r3, r7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	003a      	movs	r2, r7
 8001d4e:	23a0      	movs	r3, #160	; 0xa0
 8001d50:	05db      	lsls	r3, r3, #23
 8001d52:	0011      	movs	r1, r2
 8001d54:	0018      	movs	r0, r3
 8001d56:	f000 fb9b 	bl	8002490 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001d5a:	003b      	movs	r3, r7
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d60:	003b      	movs	r3, r7
 8001d62:	2203      	movs	r2, #3
 8001d64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d66:	003b      	movs	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	003a      	movs	r2, r7
 8001d6e:	23a0      	movs	r3, #160	; 0xa0
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 fb8b 	bl	8002490 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001d7a:	003b      	movs	r3, r7
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d80:	003b      	movs	r3, r7
 8001d82:	2201      	movs	r2, #1
 8001d84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d86:	003b      	movs	r3, r7
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d8c:	003b      	movs	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d92:	003b      	movs	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001d98:	003a      	movs	r2, r7
 8001d9a:	23a0      	movs	r3, #160	; 0xa0
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	0011      	movs	r1, r2
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 fb75 	bl	8002490 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001da6:	003b      	movs	r3, r7
 8001da8:	2220      	movs	r2, #32
 8001daa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dac:	003b      	movs	r3, r7
 8001dae:	2201      	movs	r2, #1
 8001db0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db2:	003b      	movs	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001db8:	003b      	movs	r3, r7
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dbe:	003b      	movs	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	003a      	movs	r2, r7
 8001dc6:	23a0      	movs	r3, #160	; 0xa0
 8001dc8:	05db      	lsls	r3, r3, #23
 8001dca:	0011      	movs	r1, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 fb5f 	bl	8002490 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8001dd2:	003b      	movs	r3, r7
 8001dd4:	2240      	movs	r2, #64	; 0x40
 8001dd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dd8:	003b      	movs	r3, r7
 8001dda:	2201      	movs	r2, #1
 8001ddc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dde:	003b      	movs	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001de4:	003b      	movs	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dea:	003b      	movs	r3, r7
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001df0:	003a      	movs	r2, r7
 8001df2:	23a0      	movs	r3, #160	; 0xa0
 8001df4:	05db      	lsls	r3, r3, #23
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 fb49 	bl	8002490 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001dfe:	003b      	movs	r3, r7
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001e04:	003b      	movs	r3, r7
 8001e06:	2203      	movs	r2, #3
 8001e08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e0a:	003b      	movs	r3, r7
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	003a      	movs	r2, r7
 8001e12:	23a0      	movs	r3, #160	; 0xa0
 8001e14:	05db      	lsls	r3, r3, #23
 8001e16:	0011      	movs	r1, r2
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 fb39 	bl	8002490 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8001e1e:	003b      	movs	r3, r7
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e24:	003b      	movs	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e2a:	003b      	movs	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001e30:	003b      	movs	r3, r7
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <MX_GPIO_Init+0x198>)
 8001e34:	0019      	movs	r1, r3
 8001e36:	0010      	movs	r0, r2
 8001e38:	f000 fb2a 	bl	8002490 <LL_GPIO_Init>

}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b006      	add	sp, #24
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	50000800 	.word	0x50000800
 8001e48:	50000400 	.word	0x50000400

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	asm volatile("bkpt 1");
 8001e50:	be01      	bkpt	0x0001
  /* USER CODE END Error_Handler_Debug */
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <HardFault_Handler+0x4>

08001e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <SystemInit+0x64>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <SystemInit+0x64>)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	0049      	lsls	r1, r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <SystemInit+0x64>)
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <SystemInit+0x64>)
 8001eb0:	4913      	ldr	r1, [pc, #76]	; (8001f00 <SystemInit+0x68>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <SystemInit+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <SystemInit+0x64>)
 8001ebc:	4911      	ldr	r1, [pc, #68]	; (8001f04 <SystemInit+0x6c>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <SystemInit+0x64>)
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <SystemInit+0x64>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	438a      	bics	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <SystemInit+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <SystemInit+0x64>)
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <SystemInit+0x70>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <SystemInit+0x64>)
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <SystemInit+0x64>)
 8001ee0:	490a      	ldr	r1, [pc, #40]	; (8001f0c <SystemInit+0x74>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SystemInit+0x64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <SystemInit+0x78>)
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0512      	lsls	r2, r2, #20
 8001ef2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40021000 	.word	0x40021000
 8001f00:	88ff400c 	.word	0x88ff400c
 8001f04:	fef6fff6 	.word	0xfef6fff6
 8001f08:	fffbffff 	.word	0xfffbffff
 8001f0c:	ff02ffff 	.word	0xff02ffff
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	1dfb      	adds	r3, r7, #7
 8001f1e:	701a      	strb	r2, [r3, #0]
	if (outptr) {
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <xputc+0x2c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <xputc+0x26>
		*outptr++ = (unsigned char)c;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <xputc+0x2c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	1c59      	adds	r1, r3, #1
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <xputc+0x2c>)
 8001f30:	6011      	str	r1, [r2, #0]
 8001f32:	1dfa      	adds	r2, r7, #7
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	701a      	strb	r2, [r3, #0]
		return;
 8001f38:	46c0      	nop			; (mov r8, r8)
	}
}
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000154 	.word	0x20000154

08001f44 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	while (*str)
 8001f4c:	e006      	b.n	8001f5c <xputs+0x18>
		xputc(*str++);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff ffdc 	bl	8001f14 <xputc>
	while (*str)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f4      	bne.n	8001f4e <xputs+0xa>
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b08f      	sub	sp, #60	; 0x3c
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	211f      	movs	r1, #31
 8001f7e:	187a      	adds	r2, r7, r1
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d100      	bne.n	8001f8e <xvprintf+0x22>
 8001f8c:	e16c      	b.n	8002268 <xvprintf+0x2fc>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8001f8e:	231f      	movs	r3, #31
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b25      	cmp	r3, #37	; 0x25
 8001f96:	d006      	beq.n	8001fa6 <xvprintf+0x3a>
			xputc(c); continue;
 8001f98:	231f      	movs	r3, #31
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f7ff ffb8 	bl	8001f14 <xputc>
 8001fa4:	e15f      	b.n	8002266 <xvprintf+0x2fa>
		}
		f = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	211f      	movs	r1, #31
 8001fb2:	187a      	adds	r2, r7, r1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 8001fb8:	187b      	adds	r3, r7, r1
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b30      	cmp	r3, #48	; 0x30
 8001fbe:	d109      	bne.n	8001fd4 <xvprintf+0x68>
			f = 1; c = *fmt++;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	221f      	movs	r2, #31
 8001fcc:	18ba      	adds	r2, r7, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	7013      	strb	r3, [r2, #0]
 8001fd2:	e00d      	b.n	8001ff0 <xvprintf+0x84>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8001fd4:	231f      	movs	r3, #31
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b2d      	cmp	r3, #45	; 0x2d
 8001fdc:	d108      	bne.n	8001ff0 <xvprintf+0x84>
				f = 2; c = *fmt++;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	221f      	movs	r2, #31
 8001fea:	18ba      	adds	r2, r7, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff4:	e011      	b.n	800201a <xvprintf+0xae>
			w = w * 10 + c - '0';
 8001ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	189b      	adds	r3, r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	001a      	movs	r2, r3
 8002002:	211f      	movs	r1, #31
 8002004:	187b      	adds	r3, r7, r1
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	3b30      	subs	r3, #48	; 0x30
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	187a      	adds	r2, r7, r1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	7013      	strb	r3, [r2, #0]
 800201a:	231f      	movs	r3, #31
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b2f      	cmp	r3, #47	; 0x2f
 8002022:	d904      	bls.n	800202e <xvprintf+0xc2>
 8002024:	231f      	movs	r3, #31
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b39      	cmp	r3, #57	; 0x39
 800202c:	d9e3      	bls.n	8001ff6 <xvprintf+0x8a>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800202e:	231f      	movs	r3, #31
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b6c      	cmp	r3, #108	; 0x6c
 8002036:	d004      	beq.n	8002042 <xvprintf+0xd6>
 8002038:	231f      	movs	r3, #31
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b4c      	cmp	r3, #76	; 0x4c
 8002040:	d10a      	bne.n	8002058 <xvprintf+0xec>
			f |= 4; c = *fmt++;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	2204      	movs	r2, #4
 8002046:	4313      	orrs	r3, r2
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	221f      	movs	r2, #31
 8002052:	18ba      	adds	r2, r7, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 8002058:	231f      	movs	r3, #31
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d100      	bne.n	8002064 <xvprintf+0xf8>
 8002062:	e103      	b.n	800226c <xvprintf+0x300>
		d = c;
 8002064:	211e      	movs	r1, #30
 8002066:	187b      	adds	r3, r7, r1
 8002068:	221f      	movs	r2, #31
 800206a:	18ba      	adds	r2, r7, r2
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 8002070:	187b      	adds	r3, r7, r1
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b60      	cmp	r3, #96	; 0x60
 8002076:	d905      	bls.n	8002084 <xvprintf+0x118>
 8002078:	221e      	movs	r2, #30
 800207a:	18bb      	adds	r3, r7, r2
 800207c:	18ba      	adds	r2, r7, r2
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	3a20      	subs	r2, #32
 8002082:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 8002084:	231e      	movs	r3, #30
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3b42      	subs	r3, #66	; 0x42
 800208c:	2b16      	cmp	r3, #22
 800208e:	d847      	bhi.n	8002120 <xvprintf+0x1b4>
 8002090:	009a      	lsls	r2, r3, #2
 8002092:	4b79      	ldr	r3, [pc, #484]	; (8002278 <xvprintf+0x30c>)
 8002094:	18d3      	adds	r3, r2, r3
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	1d1a      	adds	r2, r3, #4
 800209e:	603a      	str	r2, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a8:	e002      	b.n	80020b0 <xvprintf+0x144>
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	3301      	adds	r3, #1
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	18d3      	adds	r3, r2, r3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f6      	bne.n	80020aa <xvprintf+0x13e>
			while (!(f & 2) && j++ < w) xputc(' ');
 80020bc:	e002      	b.n	80020c4 <xvprintf+0x158>
 80020be:	2020      	movs	r0, #32
 80020c0:	f7ff ff28 	bl	8001f14 <xputc>
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d105      	bne.n	80020d8 <xvprintf+0x16c>
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d8f2      	bhi.n	80020be <xvprintf+0x152>
			xputs(p);
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	0018      	movs	r0, r3
 80020dc:	f7ff ff32 	bl	8001f44 <xputs>
			while (j++ < w) xputc(' ');
 80020e0:	e002      	b.n	80020e8 <xvprintf+0x17c>
 80020e2:	2020      	movs	r0, #32
 80020e4:	f7ff ff16 	bl	8001f14 <xputc>
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d8f6      	bhi.n	80020e2 <xvprintf+0x176>
			continue;
 80020f4:	e0b7      	b.n	8002266 <xvprintf+0x2fa>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	1d1a      	adds	r2, r3, #4
 80020fa:	603a      	str	r2, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ff07 	bl	8001f14 <xputc>
 8002106:	e0ae      	b.n	8002266 <xvprintf+0x2fa>
		case 'B' :					/* Binary */
			r = 2; break;
 8002108:	2302      	movs	r3, #2
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	e00f      	b.n	800212e <xvprintf+0x1c2>
		case 'O' :					/* Octal */
			r = 8; break;
 800210e:	2308      	movs	r3, #8
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
 8002112:	e00c      	b.n	800212e <xvprintf+0x1c2>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8002114:	230a      	movs	r3, #10
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
 8002118:	e009      	b.n	800212e <xvprintf+0x1c2>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800211a:	2310      	movs	r3, #16
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
 800211e:	e006      	b.n	800212e <xvprintf+0x1c2>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8002120:	231f      	movs	r3, #31
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	0018      	movs	r0, r3
 8002128:	f7ff fef4 	bl	8001f14 <xputc>
 800212c:	e09b      	b.n	8002266 <xvprintf+0x2fa>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	2204      	movs	r2, #4
 8002132:	4013      	ands	r3, r2
 8002134:	d004      	beq.n	8002140 <xvprintf+0x1d4>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	1d1a      	adds	r2, r3, #4
 800213a:	603a      	str	r2, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	e00d      	b.n	800215c <xvprintf+0x1f0>
 8002140:	231e      	movs	r3, #30
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b44      	cmp	r3, #68	; 0x44
 8002148:	d104      	bne.n	8002154 <xvprintf+0x1e8>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	1d1a      	adds	r2, r3, #4
 800214e:	603a      	str	r2, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	e003      	b.n	800215c <xvprintf+0x1f0>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	603a      	str	r2, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 800215e:	231e      	movs	r3, #30
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b44      	cmp	r3, #68	; 0x44
 8002166:	d109      	bne.n	800217c <xvprintf+0x210>
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	2b00      	cmp	r3, #0
 800216c:	da06      	bge.n	800217c <xvprintf+0x210>
			v = 0 - v;
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	425b      	negs	r3, r3
 8002172:	623b      	str	r3, [r7, #32]
			f |= 8;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	2208      	movs	r2, #8
 8002178:	4313      	orrs	r3, r2
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002184:	0018      	movs	r0, r3
 8002186:	f7fe f845 	bl	8000214 <__aeabi_uidivmod>
 800218a:	000b      	movs	r3, r1
 800218c:	001a      	movs	r2, r3
 800218e:	241e      	movs	r4, #30
 8002190:	193b      	adds	r3, r7, r4
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002196:	6a38      	ldr	r0, [r7, #32]
 8002198:	f7fd ffb6 	bl	8000108 <__udivsi3>
 800219c:	0003      	movs	r3, r0
 800219e:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b09      	cmp	r3, #9
 80021a6:	d90d      	bls.n	80021c4 <xvprintf+0x258>
 80021a8:	231f      	movs	r3, #31
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b78      	cmp	r3, #120	; 0x78
 80021b0:	d101      	bne.n	80021b6 <xvprintf+0x24a>
 80021b2:	2327      	movs	r3, #39	; 0x27
 80021b4:	e000      	b.n	80021b8 <xvprintf+0x24c>
 80021b6:	2307      	movs	r3, #7
 80021b8:	211e      	movs	r1, #30
 80021ba:	187a      	adds	r2, r7, r1
 80021bc:	1879      	adds	r1, r7, r1
 80021be:	7809      	ldrb	r1, [r1, #0]
 80021c0:	185b      	adds	r3, r3, r1
 80021c2:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	633a      	str	r2, [r7, #48]	; 0x30
 80021ca:	221e      	movs	r2, #30
 80021cc:	18ba      	adds	r2, r7, r2
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	3230      	adds	r2, #48	; 0x30
 80021d2:	b2d1      	uxtb	r1, r2
 80021d4:	2208      	movs	r2, #8
 80021d6:	18ba      	adds	r2, r7, r2
 80021d8:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <xvprintf+0x27a>
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	d9cc      	bls.n	8002180 <xvprintf+0x214>
		if (f & 8) s[i++] = '-';
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	2208      	movs	r2, #8
 80021ea:	4013      	ands	r3, r2
 80021ec:	d006      	beq.n	80021fc <xvprintf+0x290>
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	633a      	str	r2, [r7, #48]	; 0x30
 80021f4:	2208      	movs	r2, #8
 80021f6:	18ba      	adds	r2, r7, r2
 80021f8:	212d      	movs	r1, #45	; 0x2d
 80021fa:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	2201      	movs	r2, #1
 8002204:	4013      	ands	r3, r2
 8002206:	d001      	beq.n	800220c <xvprintf+0x2a0>
 8002208:	2230      	movs	r2, #48	; 0x30
 800220a:	e000      	b.n	800220e <xvprintf+0x2a2>
 800220c:	2220      	movs	r2, #32
 800220e:	231e      	movs	r3, #30
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 8002214:	e005      	b.n	8002222 <xvprintf+0x2b6>
 8002216:	231e      	movs	r3, #30
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	0018      	movs	r0, r3
 800221e:	f7ff fe79 	bl	8001f14 <xputc>
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	2202      	movs	r2, #2
 8002226:	4013      	ands	r3, r2
 8002228:	d105      	bne.n	8002236 <xvprintf+0x2ca>
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002232:	429a      	cmp	r2, r3
 8002234:	d8ef      	bhi.n	8002216 <xvprintf+0x2aa>
		do xputc(s[--i]); while(i);
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	3b01      	subs	r3, #1
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
 800223c:	2308      	movs	r3, #8
 800223e:	18fa      	adds	r2, r7, r3
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	18d3      	adds	r3, r2, r3
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	0018      	movs	r0, r3
 8002248:	f7ff fe64 	bl	8001f14 <xputc>
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f1      	bne.n	8002236 <xvprintf+0x2ca>
		while (j++ < w) xputc(' ');
 8002252:	e002      	b.n	800225a <xvprintf+0x2ee>
 8002254:	2020      	movs	r0, #32
 8002256:	f7ff fe5d 	bl	8001f14 <xputc>
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002262:	429a      	cmp	r2, r3
 8002264:	d8f6      	bhi.n	8002254 <xvprintf+0x2e8>
		c = *fmt++;					/* Get a char */
 8002266:	e686      	b.n	8001f76 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	e000      	b.n	800226e <xvprintf+0x302>
		if (!c) break;				/* End of format? */
 800226c:	46c0      	nop			; (mov r8, r8)
	}
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b00f      	add	sp, #60	; 0x3c
 8002274:	bd90      	pop	{r4, r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	080031e8 	.word	0x080031e8

0800227c <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 800227c:	b40e      	push	{r1, r2, r3}
 800227e:	b580      	push	{r7, lr}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <xsprintf+0x40>)
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	601a      	str	r2, [r3, #0]

	va_start(arp, fmt);
 800228c:	2320      	movs	r3, #32
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	60fb      	str	r3, [r7, #12]
	xvprintf(fmt, arp);
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff fe67 	bl	8001f6c <xvprintf>
	va_end(arp);

	*outptr = 0;		/* Terminate output string with a \0 */
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <xsprintf+0x40>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
	outptr = 0;			/* Switch destination for device */
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <xsprintf+0x40>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b005      	add	sp, #20
 80022b2:	bc80      	pop	{r7}
 80022b4:	bc08      	pop	{r3}
 80022b6:	b003      	add	sp, #12
 80022b8:	4718      	bx	r3
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	20000154 	.word	0x20000154

080022c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80022c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80022c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022c6:	e003      	b.n	80022d0 <LoopCopyDataInit>

080022c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80022ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022ce:	3104      	adds	r1, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80022d0:	480b      	ldr	r0, [pc, #44]	; (8002300 <LoopForever+0xa>)
  ldr  r3, =_edata
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <LoopForever+0xe>)
  adds  r2, r0, r1
 80022d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022d8:	d3f6      	bcc.n	80022c8 <CopyDataInit>
  ldr  r2, =_sbss
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <LoopForever+0x12>)
  b  LoopFillZerobss
 80022dc:	e002      	b.n	80022e4 <LoopFillZerobss>

080022de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80022de:	2300      	movs	r3, #0
  str  r3, [r2]
 80022e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e2:	3204      	adds	r2, #4

080022e4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <LoopForever+0x16>)
  cmp  r2, r3
 80022e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022e8:	d3f9      	bcc.n	80022de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022ea:	f7ff fdd5 	bl	8001e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ee:	f000 fe75 	bl	8002fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022f2:	f7ff fad7 	bl	80018a4 <main>

080022f6 <LoopForever>:

LoopForever:
    b LoopForever
 80022f6:	e7fe      	b.n	80022f6 <LoopForever>
   ldr   r0, =_estack
 80022f8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80022fc:	0800324c 	.word	0x0800324c
  ldr  r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002304:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002308:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800230c:	20000158 	.word	0x20000158

08002310 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002310:	e7fe      	b.n	8002310 <ADC1_COMP_IRQHandler>

08002312 <LL_GPIO_SetPinMode>:
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	435a      	muls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	189b      	adds	r3, r3, r2
 800232e:	43db      	mvns	r3, r3
 8002330:	400b      	ands	r3, r1
 8002332:	001a      	movs	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	434b      	muls	r3, r1
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	434b      	muls	r3, r1
 800233e:	431a      	orrs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b004      	add	sp, #16
 800234a:	bd80      	pop	{r7, pc}

0800234c <LL_GPIO_SetPinOutputType>:
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	43d2      	mvns	r2, r2
 8002360:	401a      	ands	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	434b      	muls	r3, r1
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	605a      	str	r2, [r3, #4]
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}

08002376 <LL_GPIO_SetPinSpeed>:
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6899      	ldr	r1, [r3, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	435a      	muls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	189b      	adds	r3, r3, r2
 8002392:	43db      	mvns	r3, r3
 8002394:	400b      	ands	r3, r1
 8002396:	001a      	movs	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	434b      	muls	r3, r1
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	434b      	muls	r3, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	609a      	str	r2, [r3, #8]
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b004      	add	sp, #16
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <LL_GPIO_SetPinPull>:
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68d9      	ldr	r1, [r3, #12]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	435a      	muls	r2, r3
 80023c6:	0013      	movs	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	189b      	adds	r3, r3, r2
 80023cc:	43db      	mvns	r3, r3
 80023ce:	400b      	ands	r3, r1
 80023d0:	001a      	movs	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	434b      	muls	r3, r1
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	434b      	muls	r3, r1
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	60da      	str	r2, [r3, #12]
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}

080023ea <LL_GPIO_SetAFPin_0_7>:
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a19      	ldr	r1, [r3, #32]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	4353      	muls	r3, r2
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	4353      	muls	r3, r2
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	435a      	muls	r2, r3
 8002408:	0013      	movs	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	43db      	mvns	r3, r3
 8002410:	400b      	ands	r3, r1
 8002412:	001a      	movs	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	434b      	muls	r3, r1
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	434b      	muls	r3, r1
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	434b      	muls	r3, r1
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	434b      	muls	r3, r1
 8002426:	431a      	orrs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	621a      	str	r2, [r3, #32]
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b004      	add	sp, #16
 8002432:	bd80      	pop	{r7, pc}

08002434 <LL_GPIO_SetAFPin_8_15>:
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	0a12      	lsrs	r2, r2, #8
 800244c:	4353      	muls	r3, r2
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	0a12      	lsrs	r2, r2, #8
 8002452:	4353      	muls	r3, r2
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	0a12      	lsrs	r2, r2, #8
 8002458:	435a      	muls	r2, r3
 800245a:	0013      	movs	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	43db      	mvns	r3, r3
 8002462:	400b      	ands	r3, r1
 8002464:	001a      	movs	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	0a09      	lsrs	r1, r1, #8
 800246e:	434b      	muls	r3, r1
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	0a09      	lsrs	r1, r1, #8
 8002474:	434b      	muls	r3, r1
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	0a09      	lsrs	r1, r1, #8
 800247a:	434b      	muls	r3, r1
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	434b      	muls	r3, r1
 8002480:	431a      	orrs	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b004      	add	sp, #16
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	23a0      	movs	r3, #160	; 0xa0
 80024a6:	05db      	lsls	r3, r3, #23
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d010      	beq.n	80024ce <LL_GPIO_Init+0x3e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a76      	ldr	r2, [pc, #472]	; (8002688 <LL_GPIO_Init+0x1f8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00c      	beq.n	80024ce <LL_GPIO_Init+0x3e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a75      	ldr	r2, [pc, #468]	; (800268c <LL_GPIO_Init+0x1fc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d008      	beq.n	80024ce <LL_GPIO_Init+0x3e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a74      	ldr	r2, [pc, #464]	; (8002690 <LL_GPIO_Init+0x200>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <LL_GPIO_Init+0x3e>
 80024c4:	4b73      	ldr	r3, [pc, #460]	; (8002694 <LL_GPIO_Init+0x204>)
 80024c6:	21a3      	movs	r1, #163	; 0xa3
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff fcc5 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <LL_GPIO_Init+0x50>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6f      	ldr	r2, [pc, #444]	; (8002698 <LL_GPIO_Init+0x208>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d904      	bls.n	80024ea <LL_GPIO_Init+0x5a>
 80024e0:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <LL_GPIO_Init+0x204>)
 80024e2:	21a4      	movs	r1, #164	; 0xa4
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7ff fcb7 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <LL_GPIO_Init+0x84>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d00c      	beq.n	8002514 <LL_GPIO_Init+0x84>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d008      	beq.n	8002514 <LL_GPIO_Init+0x84>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d004      	beq.n	8002514 <LL_GPIO_Init+0x84>
 800250a:	4b62      	ldr	r3, [pc, #392]	; (8002694 <LL_GPIO_Init+0x204>)
 800250c:	21a5      	movs	r1, #165	; 0xa5
 800250e:	0018      	movs	r0, r3
 8002510:	f7ff fca2 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d100      	bne.n	800251e <LL_GPIO_Init+0x8e>
 800251c:	e08b      	b.n	8002636 <LL_GPIO_Init+0x1a6>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d100      	bne.n	8002528 <LL_GPIO_Init+0x98>
 8002526:	e086      	b.n	8002636 <LL_GPIO_Init+0x1a6>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d100      	bne.n	8002532 <LL_GPIO_Init+0xa2>
 8002530:	e081      	b.n	8002636 <LL_GPIO_Init+0x1a6>
 8002532:	4b58      	ldr	r3, [pc, #352]	; (8002694 <LL_GPIO_Init+0x204>)
 8002534:	21a6      	movs	r1, #166	; 0xa6
 8002536:	0018      	movs	r0, r3
 8002538:	f7ff fc8e 	bl	8001e58 <assert_failed>
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800253c:	e07b      	b.n	8002636 <LL_GPIO_Init+0x1a6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4091      	lsls	r1, r2
 8002548:	000a      	movs	r2, r1
 800254a:	4013      	ands	r3, r2
 800254c:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d100      	bne.n	8002556 <LL_GPIO_Init+0xc6>
 8002554:	e06c      	b.n	8002630 <LL_GPIO_Init+0x1a0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	0018      	movs	r0, r3
 8002560:	f7ff fed7 	bl	8002312 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d003      	beq.n	8002574 <LL_GPIO_Init+0xe4>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d11b      	bne.n	80025ac <LL_GPIO_Init+0x11c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <LL_GPIO_Init+0x10e>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00c      	beq.n	800259e <LL_GPIO_Init+0x10e>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d008      	beq.n	800259e <LL_GPIO_Init+0x10e>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d004      	beq.n	800259e <LL_GPIO_Init+0x10e>
 8002594:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <LL_GPIO_Init+0x204>)
 8002596:	21ba      	movs	r1, #186	; 0xba
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff fc5d 	bl	8001e58 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff fee5 	bl	8002376 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff fefb 	bl	80023b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d136      	bne.n	8002630 <LL_GPIO_Init+0x1a0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d020      	beq.n	800260c <LL_GPIO_Init+0x17c>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d01c      	beq.n	800260c <LL_GPIO_Init+0x17c>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d018      	beq.n	800260c <LL_GPIO_Init+0x17c>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d014      	beq.n	800260c <LL_GPIO_Init+0x17c>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d010      	beq.n	800260c <LL_GPIO_Init+0x17c>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d00c      	beq.n	800260c <LL_GPIO_Init+0x17c>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d008      	beq.n	800260c <LL_GPIO_Init+0x17c>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b07      	cmp	r3, #7
 8002600:	d004      	beq.n	800260c <LL_GPIO_Init+0x17c>
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <LL_GPIO_Init+0x204>)
 8002604:	21c6      	movs	r1, #198	; 0xc6
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff fc26 	bl	8001e58 <assert_failed>

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2bff      	cmp	r3, #255	; 0xff
 8002610:	d807      	bhi.n	8002622 <LL_GPIO_Init+0x192>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff fee5 	bl	80023ea <LL_GPIO_SetAFPin_0_7>
 8002620:	e006      	b.n	8002630 <LL_GPIO_Init+0x1a0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f7ff ff02 	bl	8002434 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3301      	adds	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	40da      	lsrs	r2, r3
 800263e:	1e13      	subs	r3, r2, #0
 8002640:	d000      	beq.n	8002644 <LL_GPIO_Init+0x1b4>
 8002642:	e77c      	b.n	800253e <LL_GPIO_Init+0xae>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d003      	beq.n	8002654 <LL_GPIO_Init+0x1c4>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d114      	bne.n	800267e <LL_GPIO_Init+0x1ee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <LL_GPIO_Init+0x1de>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d004      	beq.n	800266e <LL_GPIO_Init+0x1de>
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <LL_GPIO_Init+0x204>)
 8002666:	21d9      	movs	r1, #217	; 0xd9
 8002668:	0018      	movs	r0, r3
 800266a:	f7ff fbf5 	bl	8001e58 <assert_failed>

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff fe67 	bl	800234c <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800267e:	2300      	movs	r3, #0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}
 8002688:	50000400 	.word	0x50000400
 800268c:	50000800 	.word	0x50000800
 8002690:	50001c00 	.word	0x50001c00
 8002694:	08003098 	.word	0x08003098
 8002698:	0000ffff 	.word	0x0000ffff

0800269c <LL_I2C_Enable>:
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	601a      	str	r2, [r3, #0]
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b002      	add	sp, #8
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <LL_I2C_Disable>:
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4393      	bics	r3, r2
 80026c8:	001a      	movs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <LL_I2C_ConfigFilters>:
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a06      	ldr	r2, [pc, #24]	; (8002704 <LL_I2C_ConfigFilters+0x2c>)
 80026ea:	401a      	ands	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0219      	lsls	r1, r3, #8
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	430b      	orrs	r3, r1
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	ffffe0ff 	.word	0xffffe0ff

08002708 <LL_I2C_SetOwnAddress1>:
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	0adb      	lsrs	r3, r3, #11
 800271a:	02da      	lsls	r2, r3, #11
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	430b      	orrs	r3, r1
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}

08002730 <LL_I2C_EnableOwnAddress1>:
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0212      	lsls	r2, r2, #8
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]
}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b002      	add	sp, #8
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <LL_I2C_DisableOwnAddress1>:
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <LL_I2C_DisableOwnAddress1+0x1c>)
 800275e:	401a      	ands	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}
 800276c:	ffff7fff 	.word	0xffff7fff

08002770 <LL_I2C_SetTiming>:
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	611a      	str	r2, [r3, #16]
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <LL_I2C_SetMode>:
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <LL_I2C_SetMode+0x24>)
 8002798:	401a      	ands	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	601a      	str	r2, [r3, #0]
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	ffcfffff 	.word	0xffcfffff

080027b0 <LL_I2C_AcknowledgeNextData>:
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <LL_I2C_AcknowledgeNextData+0x24>)
 80027c0:	401a      	ands	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]
}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	ffff7fff 	.word	0xffff7fff

080027d8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4f      	ldr	r2, [pc, #316]	; (8002924 <LL_I2C_Init+0x14c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <LL_I2C_Init+0x1c>
 80027ea:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <LL_I2C_Init+0x150>)
 80027ec:	218e      	movs	r1, #142	; 0x8e
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff fb32 	bl	8001e58 <assert_failed>

  /* Check the I2C parameters from I2C_InitStruct */
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d014      	beq.n	8002826 <LL_I2C_Init+0x4e>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	035b      	lsls	r3, r3, #13
 8002804:	429a      	cmp	r2, r3
 8002806:	d00e      	beq.n	8002826 <LL_I2C_Init+0x4e>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <LL_I2C_Init+0x4e>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	039b      	lsls	r3, r3, #14
 8002818:	429a      	cmp	r2, r3
 800281a:	d004      	beq.n	8002826 <LL_I2C_Init+0x4e>
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <LL_I2C_Init+0x150>)
 800281e:	2191      	movs	r1, #145	; 0x91
 8002820:	0018      	movs	r0, r3
 8002822:	f7ff fb19 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_I2C_ANALOG_FILTER(I2C_InitStruct->AnalogFilter));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <LL_I2C_Init+0x6c>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	015b      	lsls	r3, r3, #5
 8002836:	429a      	cmp	r2, r3
 8002838:	d004      	beq.n	8002844 <LL_I2C_Init+0x6c>
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <LL_I2C_Init+0x150>)
 800283c:	2192      	movs	r1, #146	; 0x92
 800283e:	0018      	movs	r0, r3
 8002840:	f7ff fb0a 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_I2C_DIGITAL_FILTER(I2C_InitStruct->DigitalFilter));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b0f      	cmp	r3, #15
 800284a:	d904      	bls.n	8002856 <LL_I2C_Init+0x7e>
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <LL_I2C_Init+0x150>)
 800284e:	2193      	movs	r1, #147	; 0x93
 8002850:	0018      	movs	r0, r3
 8002852:	f7ff fb01 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	4a34      	ldr	r2, [pc, #208]	; (800292c <LL_I2C_Init+0x154>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d904      	bls.n	800286a <LL_I2C_Init+0x92>
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <LL_I2C_Init+0x150>)
 8002862:	2194      	movs	r1, #148	; 0x94
 8002864:	0018      	movs	r0, r3
 8002866:	f7ff faf7 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <LL_I2C_Init+0xb0>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	429a      	cmp	r2, r3
 800287c:	d004      	beq.n	8002888 <LL_I2C_Init+0xb0>
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <LL_I2C_Init+0x150>)
 8002880:	2195      	movs	r1, #149	; 0x95
 8002882:	0018      	movs	r0, r3
 8002884:	f7ff fae8 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <LL_I2C_Init+0xce>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	429a      	cmp	r2, r3
 800289a:	d004      	beq.n	80028a6 <LL_I2C_Init+0xce>
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <LL_I2C_Init+0x150>)
 800289e:	2196      	movs	r1, #150	; 0x96
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff fad9 	bl	8001e58 <assert_failed>

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff ff05 	bl	80026b8 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6899      	ldr	r1, [r3, #8]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff ff0d 	bl	80026d8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0011      	movs	r1, r2
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7ff ff52 	bl	8002770 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f7ff fee4 	bl	800269c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7ff ff3a 	bl	8002750 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6919      	ldr	r1, [r3, #16]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7ff ff0e 	bl	8002708 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <LL_I2C_Init+0x124>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7ff ff1a 	bl	8002730 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ff3f 	bl	8002788 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0011      	movs	r1, r2
 8002912:	0018      	movs	r0, r3
 8002914:	f7ff ff4c 	bl	80027b0 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	40005400 	.word	0x40005400
 8002928:	080030d0 	.word	0x080030d0
 800292c:	000003ff 	.word	0x000003ff

08002930 <LL_RCC_HSI_IsReady>:
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <LL_RCC_HSI_IsReady+0x1c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2204      	movs	r2, #4
 800293a:	4013      	ands	r3, r2
 800293c:	2b04      	cmp	r3, #4
 800293e:	d101      	bne.n	8002944 <LL_RCC_HSI_IsReady+0x14>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <LL_RCC_HSI_IsReady+0x16>
 8002944:	2300      	movs	r3, #0
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000

08002950 <LL_RCC_LSE_IsReady>:
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <LL_RCC_LSE_IsReady+0x24>)
 8002956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	401a      	ands	r2, r3
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	429a      	cmp	r2, r3
 8002964:	d101      	bne.n	800296a <LL_RCC_LSE_IsReady+0x1a>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_RCC_LSE_IsReady+0x1c>
 800296a:	2300      	movs	r3, #0
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40021000 	.word	0x40021000

08002978 <LL_RCC_MSI_GetRange>:
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <LL_RCC_MSI_GetRange+0x14>)
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	23e0      	movs	r3, #224	; 0xe0
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	4013      	ands	r3, r2
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000

08002990 <LL_RCC_GetSysClkSource>:
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <LL_RCC_GetSysClkSource+0x14>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	220c      	movs	r2, #12
 800299a:	4013      	ands	r3, r2
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	40021000 	.word	0x40021000

080029a8 <LL_RCC_GetAHBPrescaler>:
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <LL_RCC_GetAHBPrescaler+0x14>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	22f0      	movs	r2, #240	; 0xf0
 80029b2:	4013      	ands	r3, r2
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	40021000 	.word	0x40021000

080029c0 <LL_RCC_GetAPB1Prescaler>:
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	23e0      	movs	r3, #224	; 0xe0
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4013      	ands	r3, r2
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000

080029d8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <LL_RCC_GetUSARTClockSource+0x20>)
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	401a      	ands	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	4313      	orrs	r3, r2
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40021000 	.word	0x40021000

080029fc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <LL_RCC_PLL_GetMainSource+0x14>)
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	025b      	lsls	r3, r3, #9
 8002a08:	4013      	ands	r3, r2
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000

08002a14 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	23f0      	movs	r3, #240	; 0xf0
 8002a1e:	039b      	lsls	r3, r3, #14
 8002a20:	4013      	ands	r3, r2
}
 8002a22:	0018      	movs	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000

08002a2c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <LL_RCC_PLL_GetDivider+0x14>)
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	23c0      	movs	r3, #192	; 0xc0
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	4013      	ands	r3, r2
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000

08002a44 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d101      	bne.n	8002a58 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000

08002a64 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d004      	beq.n	8002a80 <LL_RCC_GetUSARTClockFreq+0x1c>
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <LL_RCC_GetUSARTClockFreq+0xa4>)
 8002a78:	21fc      	movs	r1, #252	; 0xfc
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff f9ec 	bl	8001e58 <assert_failed>
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d135      	bne.n	8002af2 <LL_RCC_GetUSARTClockFreq+0x8e>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff ffa5 	bl	80029d8 <LL_RCC_GetUSARTClockSource>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	4a1e      	ldr	r2, [pc, #120]	; (8002b0c <LL_RCC_GetUSARTClockFreq+0xa8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00a      	beq.n	8002aac <LL_RCC_GetUSARTClockFreq+0x48>
 8002a96:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <LL_RCC_GetUSARTClockFreq+0xac>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d015      	beq.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x64>
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <LL_RCC_GetUSARTClockFreq+0xb0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d11a      	bne.n	8002ad8 <LL_RCC_GetUSARTClockFreq+0x74>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002aa2:	f000 f83d 	bl	8002b20 <RCC_GetSystemClockFreq>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	60fb      	str	r3, [r7, #12]
        break;
 8002aaa:	e027      	b.n	8002afc <LL_RCC_GetUSARTClockFreq+0x98>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002aac:	f7ff ff40 	bl	8002930 <LL_RCC_HSI_IsReady>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d020      	beq.n	8002af6 <LL_RCC_GetUSARTClockFreq+0x92>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002ab4:	f7ff ffc6 	bl	8002a44 <LL_RCC_IsActiveFlag_HSIDIV>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d002      	beq.n	8002ac2 <LL_RCC_GetUSARTClockFreq+0x5e>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <LL_RCC_GetUSARTClockFreq+0xb4>)
 8002abe:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8002ac0:	e019      	b.n	8002af6 <LL_RCC_GetUSARTClockFreq+0x92>
            usart_frequency = HSI_VALUE;
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <LL_RCC_GetUSARTClockFreq+0xb8>)
 8002ac4:	60fb      	str	r3, [r7, #12]
        break;
 8002ac6:	e016      	b.n	8002af6 <LL_RCC_GetUSARTClockFreq+0x92>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002ac8:	f7ff ff42 	bl	8002950 <LL_RCC_LSE_IsReady>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d014      	beq.n	8002afa <LL_RCC_GetUSARTClockFreq+0x96>
        {
          usart_frequency = LSE_VALUE;
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002ad6:	e010      	b.n	8002afa <LL_RCC_GetUSARTClockFreq+0x96>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002ad8:	f000 f822 	bl	8002b20 <RCC_GetSystemClockFreq>
 8002adc:	0003      	movs	r3, r0
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 f862 	bl	8002ba8 <RCC_GetHCLKClockFreq>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f874 	bl	8002bd4 <RCC_GetPCLK1ClockFreq>
 8002aec:	0003      	movs	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
        break;
 8002af0:	e004      	b.n	8002afc <LL_RCC_GetUSARTClockFreq+0x98>
    }
  }
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	e002      	b.n	8002afc <LL_RCC_GetUSARTClockFreq+0x98>
        break;
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	e000      	b.n	8002afc <LL_RCC_GetUSARTClockFreq+0x98>
        break;
 8002afa:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8002afc:	68fb      	ldr	r3, [r7, #12]
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b004      	add	sp, #16
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	08003108 	.word	0x08003108
 8002b0c:	000c0008 	.word	0x000c0008
 8002b10:	000c000c 	.word	0x000c000c
 8002b14:	000c0004 	.word	0x000c0004
 8002b18:	003d0900 	.word	0x003d0900
 8002b1c:	00f42400 	.word	0x00f42400

08002b20 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002b26:	f7ff ff33 	bl	8002990 <LL_RCC_GetSysClkSource>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d013      	beq.n	8002b58 <RCC_GetSystemClockFreq+0x38>
 8002b30:	d802      	bhi.n	8002b38 <RCC_GetSystemClockFreq+0x18>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <RCC_GetSystemClockFreq+0x22>
 8002b36:	e021      	b.n	8002b7c <RCC_GetSystemClockFreq+0x5c>
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d017      	beq.n	8002b6c <RCC_GetSystemClockFreq+0x4c>
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d018      	beq.n	8002b72 <RCC_GetSystemClockFreq+0x52>
 8002b40:	e01c      	b.n	8002b7c <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b42:	f7ff ff19 	bl	8002978 <LL_RCC_MSI_GetRange>
 8002b46:	0003      	movs	r3, r0
 8002b48:	0b5b      	lsrs	r3, r3, #13
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	0212      	lsls	r2, r2, #8
 8002b50:	409a      	lsls	r2, r3
 8002b52:	0013      	movs	r3, r2
 8002b54:	607b      	str	r3, [r7, #4]
      break;
 8002b56:	e01c      	b.n	8002b92 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002b58:	f7ff ff74 	bl	8002a44 <LL_RCC_IsActiveFlag_HSIDIV>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d002      	beq.n	8002b66 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <RCC_GetSystemClockFreq+0x7c>)
 8002b62:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8002b64:	e015      	b.n	8002b92 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <RCC_GetSystemClockFreq+0x80>)
 8002b68:	607b      	str	r3, [r7, #4]
      break;
 8002b6a:	e012      	b.n	8002b92 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <RCC_GetSystemClockFreq+0x84>)
 8002b6e:	607b      	str	r3, [r7, #4]
      break;
 8002b70:	e00f      	b.n	8002b92 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002b72:	f000 f843 	bl	8002bfc <RCC_PLL_GetFreqDomain_SYS>
 8002b76:	0003      	movs	r3, r0
 8002b78:	607b      	str	r3, [r7, #4]
      break;
 8002b7a:	e00a      	b.n	8002b92 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b7c:	f7ff fefc 	bl	8002978 <LL_RCC_MSI_GetRange>
 8002b80:	0003      	movs	r3, r0
 8002b82:	0b5b      	lsrs	r3, r3, #13
 8002b84:	3301      	adds	r3, #1
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	0212      	lsls	r2, r2, #8
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	607b      	str	r3, [r7, #4]
      break;
 8002b90:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	003d0900 	.word	0x003d0900
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200

08002ba8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002bb0:	f7ff fefa 	bl	80029a8 <LL_RCC_GetAHBPrescaler>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	220f      	movs	r2, #15
 8002bba:	4013      	ands	r3, r2
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <RCC_GetHCLKClockFreq+0x28>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	40d3      	lsrs	r3, r2
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b002      	add	sp, #8
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	080031c4 	.word	0x080031c4

08002bd4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002bdc:	f7ff fef0 	bl	80029c0 <LL_RCC_GetAPB1Prescaler>
 8002be0:	0003      	movs	r3, r0
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <RCC_GetPCLK1ClockFreq+0x24>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	001a      	movs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	40d3      	lsrs	r3, r2
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	080031d4 	.word	0x080031d4

08002bfc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002c02:	f7ff fefb 	bl	80029fc <LL_RCC_PLL_GetMainSource>
 8002c06:	0003      	movs	r3, r0
 8002c08:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002c10:	f7ff ff18 	bl	8002a44 <LL_RCC_IsActiveFlag_HSIDIV>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d002      	beq.n	8002c1e <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002c1a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8002c1c:	e005      	b.n	8002c2a <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8002c20:	607b      	str	r3, [r7, #4]
      break;
 8002c22:	e002      	b.n	8002c2a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8002c26:	607b      	str	r3, [r7, #4]
      break;
 8002c28:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8002c2a:	f7ff fef3 	bl	8002a14 <LL_RCC_PLL_GetMultiplicator>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	0c9b      	lsrs	r3, r3, #18
 8002c32:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002c34:	5cd3      	ldrb	r3, [r2, r3]
 8002c36:	001a      	movs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4353      	muls	r3, r2
 8002c3c:	001c      	movs	r4, r3
 8002c3e:	f7ff fef5 	bl	8002a2c <LL_RCC_PLL_GetDivider>
 8002c42:	0003      	movs	r3, r0
 8002c44:	0d9b      	lsrs	r3, r3, #22
 8002c46:	3301      	adds	r3, #1
 8002c48:	0019      	movs	r1, r3
 8002c4a:	0020      	movs	r0, r4
 8002c4c:	f7fd fa5c 	bl	8000108 <__udivsi3>
 8002c50:	0003      	movs	r3, r0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b003      	add	sp, #12
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	003d0900 	.word	0x003d0900
 8002c60:	00f42400 	.word	0x00f42400
 8002c64:	007a1200 	.word	0x007a1200
 8002c68:	080031dc 	.word	0x080031dc

08002c6c <LL_USART_IsEnabled>:
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <LL_USART_IsEnabled+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_USART_IsEnabled+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b002      	add	sp, #8
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <LL_USART_SetStopBitsLength>:
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <LL_USART_SetStopBitsLength+0x24>)
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	605a      	str	r2, [r3, #4]
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	ffffcfff 	.word	0xffffcfff

08002cb8 <LL_USART_SetHWFlowCtrl>:
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <LL_USART_SetHWFlowCtrl+0x24>)
 8002cc8:	401a      	ands	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	fffffcff 	.word	0xfffffcff

08002ce0 <LL_USART_SetBaudRate>:
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d117      	bne.n	8002d28 <LL_USART_SetBaudRate+0x48>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	005a      	lsls	r2, r3, #1
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	18d3      	adds	r3, r2, r3
 8002d02:	6839      	ldr	r1, [r7, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7fd f9ff 	bl	8000108 <__udivsi3>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	001d      	movs	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <LL_USART_SetBaudRate+0x6c>)
 8002d12:	402b      	ands	r3, r5
 8002d14:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d16:	086b      	lsrs	r3, r5, #1
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	2307      	movs	r3, #7
 8002d1e:	4013      	ands	r3, r2
 8002d20:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	60dc      	str	r4, [r3, #12]
}
 8002d26:	e00c      	b.n	8002d42 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	085a      	lsrs	r2, r3, #1
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	18d3      	adds	r3, r2, r3
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7fd f9e8 	bl	8000108 <__udivsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	60da      	str	r2, [r3, #12]
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	0000fff0 	.word	0x0000fff0

08002d50 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002d5a:	230f      	movs	r3, #15
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
#if defined(USART4) || defined(USART5)
  LL_RCC_ClocksTypeDef RCC_Clocks;
#endif

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a7b      	ldr	r2, [pc, #492]	; (8002f58 <LL_USART_Init+0x208>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <LL_USART_Init+0x28>
 8002d6e:	4b7b      	ldr	r3, [pc, #492]	; (8002f5c <LL_USART_Init+0x20c>)
 8002d70:	21ce      	movs	r1, #206	; 0xce
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7ff f870 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a78      	ldr	r2, [pc, #480]	; (8002f60 <LL_USART_Init+0x210>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d904      	bls.n	8002d8c <LL_USART_Init+0x3c>
 8002d82:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <LL_USART_Init+0x20c>)
 8002d84:	21cf      	movs	r1, #207	; 0xcf
 8002d86:	0018      	movs	r0, r3
 8002d88:	f7ff f866 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	055b      	lsls	r3, r3, #21
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d00e      	beq.n	8002db6 <LL_USART_Init+0x66>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <LL_USART_Init+0x66>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	015b      	lsls	r3, r3, #5
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d004      	beq.n	8002db6 <LL_USART_Init+0x66>
 8002dac:	4b6b      	ldr	r3, [pc, #428]	; (8002f5c <LL_USART_Init+0x20c>)
 8002dae:	21d0      	movs	r1, #208	; 0xd0
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7ff f851 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	015b      	lsls	r3, r3, #5
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d014      	beq.n	8002dec <LL_USART_Init+0x9c>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d010      	beq.n	8002dec <LL_USART_Init+0x9c>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	23c0      	movs	r3, #192	; 0xc0
 8002dd0:	019b      	lsls	r3, r3, #6
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d00a      	beq.n	8002dec <LL_USART_Init+0x9c>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	019b      	lsls	r3, r3, #6
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d004      	beq.n	8002dec <LL_USART_Init+0x9c>
 8002de2:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <LL_USART_Init+0x20c>)
 8002de4:	21d1      	movs	r1, #209	; 0xd1
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7ff f836 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <LL_USART_Init+0xc6>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d00a      	beq.n	8002e16 <LL_USART_Init+0xc6>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	23c0      	movs	r3, #192	; 0xc0
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d004      	beq.n	8002e16 <LL_USART_Init+0xc6>
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <LL_USART_Init+0x20c>)
 8002e0e:	21d2      	movs	r1, #210	; 0xd2
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7ff f821 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <LL_USART_Init+0xf0>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d00c      	beq.n	8002e40 <LL_USART_Init+0xf0>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d008      	beq.n	8002e40 <LL_USART_Init+0xf0>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d004      	beq.n	8002e40 <LL_USART_Init+0xf0>
 8002e36:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <LL_USART_Init+0x20c>)
 8002e38:	21d3      	movs	r1, #211	; 0xd3
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff f80c 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d016      	beq.n	8002e76 <LL_USART_Init+0x126>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d010      	beq.n	8002e76 <LL_USART_Init+0x126>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d00a      	beq.n	8002e76 <LL_USART_Init+0x126>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	23c0      	movs	r3, #192	; 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d004      	beq.n	8002e76 <LL_USART_Init+0x126>
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <LL_USART_Init+0x20c>)
 8002e6e:	21d4      	movs	r1, #212	; 0xd4
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7fe fff1 	bl	8001e58 <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <LL_USART_Init+0x144>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d004      	beq.n	8002e94 <LL_USART_Init+0x144>
 8002e8a:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <LL_USART_Init+0x20c>)
 8002e8c:	21d5      	movs	r1, #213	; 0xd5
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7fe ffe2 	bl	8001e58 <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7ff fee8 	bl	8002c6c <LL_USART_IsEnabled>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d153      	bne.n	8002f48 <LL_USART_Init+0x1f8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <LL_USART_Init+0x214>)
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4319      	orrs	r1, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	4319      	orrs	r1, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0011      	movs	r1, r2
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff fedf 	bl	8002c90 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0011      	movs	r1, r2
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7ff feec 	bl	8002cb8 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <LL_USART_Init+0x208>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d104      	bne.n	8002ef2 <LL_USART_Init+0x1a2>
#endif
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002ee8:	200c      	movs	r0, #12
 8002eea:	f7ff fdbb 	bl	8002a64 <LL_RCC_GetUSARTClockFreq>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d027      	beq.n	8002f48 <LL_USART_Init+0x1f8>
        && (USART_InitStruct->BaudRate != 0U))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d023      	beq.n	8002f48 <LL_USART_Init+0x1f8>
    {
      status = SUCCESS;
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fee4 	bl	8002ce0 <LL_USART_SetBaudRate>
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b0f      	cmp	r3, #15
 8002f1e:	d807      	bhi.n	8002f30 <LL_USART_Init+0x1e0>
 8002f20:	232a      	movs	r3, #42	; 0x2a
 8002f22:	33ff      	adds	r3, #255	; 0xff
 8002f24:	001a      	movs	r2, r3
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <LL_USART_Init+0x20c>)
 8002f28:	0011      	movs	r1, r2
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7fe ff94 	bl	8001e58 <assert_failed>

      /* Check BRR is lower than or equal to 0xFFFF */
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <LL_USART_Init+0x218>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d906      	bls.n	8002f48 <LL_USART_Init+0x1f8>
 8002f3a:	2396      	movs	r3, #150	; 0x96
 8002f3c:	005a      	lsls	r2, r3, #1
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <LL_USART_Init+0x20c>)
 8002f40:	0011      	movs	r1, r2
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7fe ff88 	bl	8001e58 <assert_failed>
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002f48:	230f      	movs	r3, #15
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	40004400 	.word	0x40004400
 8002f5c:	08003140 	.word	0x08003140
 8002f60:	003d0900 	.word	0x003d0900
 8002f64:	efff69f3 	.word	0xefff69f3
 8002f68:	0000ffff 	.word	0x0000ffff

08002f6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fd f8c5 	bl	8000108 <__udivsi3>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	001a      	movs	r2, r3
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <LL_InitTick+0x30>)
 8002f84:	3a01      	subs	r2, #1
 8002f86:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <LL_InitTick+0x30>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <LL_InitTick+0x30>)
 8002f90:	2205      	movs	r2, #5
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	e000e010 	.word	0xe000e010

08002fa0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002fa8:	23fa      	movs	r3, #250	; 0xfa
 8002faa:	009a      	lsls	r2, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff ffdb 	bl	8002f6c <LL_InitTick>
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <LL_SetSystemCoreClock+0x18>)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	20000000 	.word	0x20000000

08002fdc <__libc_init_array>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	2600      	movs	r6, #0
 8002fe0:	4d0c      	ldr	r5, [pc, #48]	; (8003014 <__libc_init_array+0x38>)
 8002fe2:	4c0d      	ldr	r4, [pc, #52]	; (8003018 <__libc_init_array+0x3c>)
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	42a6      	cmp	r6, r4
 8002fea:	d109      	bne.n	8003000 <__libc_init_array+0x24>
 8002fec:	2600      	movs	r6, #0
 8002fee:	f000 f821 	bl	8003034 <_init>
 8002ff2:	4d0a      	ldr	r5, [pc, #40]	; (800301c <__libc_init_array+0x40>)
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	; (8003020 <__libc_init_array+0x44>)
 8002ff6:	1b64      	subs	r4, r4, r5
 8002ff8:	10a4      	asrs	r4, r4, #2
 8002ffa:	42a6      	cmp	r6, r4
 8002ffc:	d105      	bne.n	800300a <__libc_init_array+0x2e>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	00b3      	lsls	r3, r6, #2
 8003002:	58eb      	ldr	r3, [r5, r3]
 8003004:	4798      	blx	r3
 8003006:	3601      	adds	r6, #1
 8003008:	e7ee      	b.n	8002fe8 <__libc_init_array+0xc>
 800300a:	00b3      	lsls	r3, r6, #2
 800300c:	58eb      	ldr	r3, [r5, r3]
 800300e:	4798      	blx	r3
 8003010:	3601      	adds	r6, #1
 8003012:	e7f2      	b.n	8002ffa <__libc_init_array+0x1e>
 8003014:	08003244 	.word	0x08003244
 8003018:	08003244 	.word	0x08003244
 800301c:	08003244 	.word	0x08003244
 8003020:	08003248 	.word	0x08003248

08003024 <memset>:
 8003024:	0003      	movs	r3, r0
 8003026:	1812      	adds	r2, r2, r0
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	7019      	strb	r1, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
