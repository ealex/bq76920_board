
cubeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003484  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c0  080037c0  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037c8  080037c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c8  080037c8  000137c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080037d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000008  080037d4  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080037d4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e28  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011cb  00000000  00000000  00024e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00026020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000660  00000000  00000000  00026710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000baa7  00000000  00000000  00026d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004845  00000000  00000000  00032817  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003ba2b  00000000  00000000  0003705c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00072a87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000183c  00000000  00000000  00072b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800352c 	.word	0x0800352c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	0800352c 	.word	0x0800352c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_ldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d115      	bne.n	8000424 <__aeabi_ldivmod+0x30>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d113      	bne.n	8000424 <__aeabi_ldivmod+0x30>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	db06      	blt.n	800040e <__aeabi_ldivmod+0x1a>
 8000400:	dc01      	bgt.n	8000406 <__aeabi_ldivmod+0x12>
 8000402:	2800      	cmp	r0, #0
 8000404:	d006      	beq.n	8000414 <__aeabi_ldivmod+0x20>
 8000406:	2000      	movs	r0, #0
 8000408:	43c0      	mvns	r0, r0
 800040a:	0841      	lsrs	r1, r0, #1
 800040c:	e002      	b.n	8000414 <__aeabi_ldivmod+0x20>
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	0609      	lsls	r1, r1, #24
 8000412:	2000      	movs	r0, #0
 8000414:	b407      	push	{r0, r1, r2}
 8000416:	4802      	ldr	r0, [pc, #8]	; (8000420 <__aeabi_ldivmod+0x2c>)
 8000418:	a101      	add	r1, pc, #4	; (adr r1, 8000420 <__aeabi_ldivmod+0x2c>)
 800041a:	1840      	adds	r0, r0, r1
 800041c:	9002      	str	r0, [sp, #8]
 800041e:	bd03      	pop	{r0, r1, pc}
 8000420:	ffffffd1 	.word	0xffffffd1
 8000424:	b403      	push	{r0, r1}
 8000426:	4668      	mov	r0, sp
 8000428:	b501      	push	{r0, lr}
 800042a:	9802      	ldr	r0, [sp, #8]
 800042c:	f000 f830 	bl	8000490 <__gnu_ldivmod_helper>
 8000430:	9b01      	ldr	r3, [sp, #4]
 8000432:	469e      	mov	lr, r3
 8000434:	b002      	add	sp, #8
 8000436:	bc0c      	pop	{r2, r3}
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_lmul>:
 800043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043e:	46ce      	mov	lr, r9
 8000440:	4647      	mov	r7, r8
 8000442:	0415      	lsls	r5, r2, #16
 8000444:	0c2d      	lsrs	r5, r5, #16
 8000446:	002e      	movs	r6, r5
 8000448:	b580      	push	{r7, lr}
 800044a:	0407      	lsls	r7, r0, #16
 800044c:	0c14      	lsrs	r4, r2, #16
 800044e:	0c3f      	lsrs	r7, r7, #16
 8000450:	4699      	mov	r9, r3
 8000452:	0c03      	lsrs	r3, r0, #16
 8000454:	437e      	muls	r6, r7
 8000456:	435d      	muls	r5, r3
 8000458:	4367      	muls	r7, r4
 800045a:	4363      	muls	r3, r4
 800045c:	197f      	adds	r7, r7, r5
 800045e:	0c34      	lsrs	r4, r6, #16
 8000460:	19e4      	adds	r4, r4, r7
 8000462:	469c      	mov	ip, r3
 8000464:	42a5      	cmp	r5, r4
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x34>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	464b      	mov	r3, r9
 8000472:	4343      	muls	r3, r0
 8000474:	4351      	muls	r1, r2
 8000476:	0c25      	lsrs	r5, r4, #16
 8000478:	0436      	lsls	r6, r6, #16
 800047a:	4465      	add	r5, ip
 800047c:	0c36      	lsrs	r6, r6, #16
 800047e:	0424      	lsls	r4, r4, #16
 8000480:	19a4      	adds	r4, r4, r6
 8000482:	195b      	adds	r3, r3, r5
 8000484:	1859      	adds	r1, r3, r1
 8000486:	0020      	movs	r0, r4
 8000488:	bc0c      	pop	{r2, r3}
 800048a:	4690      	mov	r8, r2
 800048c:	4699      	mov	r9, r3
 800048e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000490 <__gnu_ldivmod_helper>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	b083      	sub	sp, #12
 8000494:	0016      	movs	r6, r2
 8000496:	001f      	movs	r7, r3
 8000498:	9000      	str	r0, [sp, #0]
 800049a:	9101      	str	r1, [sp, #4]
 800049c:	f000 f814 	bl	80004c8 <__divdi3>
 80004a0:	0004      	movs	r4, r0
 80004a2:	000d      	movs	r5, r1
 80004a4:	0002      	movs	r2, r0
 80004a6:	000b      	movs	r3, r1
 80004a8:	0030      	movs	r0, r6
 80004aa:	0039      	movs	r1, r7
 80004ac:	f7ff ffc6 	bl	800043c <__aeabi_lmul>
 80004b0:	9a00      	ldr	r2, [sp, #0]
 80004b2:	9b01      	ldr	r3, [sp, #4]
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	418b      	sbcs	r3, r1
 80004b8:	9908      	ldr	r1, [sp, #32]
 80004ba:	0020      	movs	r0, r4
 80004bc:	600a      	str	r2, [r1, #0]
 80004be:	604b      	str	r3, [r1, #4]
 80004c0:	0029      	movs	r1, r5
 80004c2:	b003      	add	sp, #12
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__divdi3>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	464e      	mov	r6, r9
 80004cc:	4657      	mov	r7, sl
 80004ce:	46de      	mov	lr, fp
 80004d0:	4645      	mov	r5, r8
 80004d2:	b5e0      	push	{r5, r6, r7, lr}
 80004d4:	000f      	movs	r7, r1
 80004d6:	2100      	movs	r1, #0
 80004d8:	b083      	sub	sp, #12
 80004da:	0006      	movs	r6, r0
 80004dc:	4689      	mov	r9, r1
 80004de:	2f00      	cmp	r7, #0
 80004e0:	da06      	bge.n	80004f0 <__divdi3+0x28>
 80004e2:	0039      	movs	r1, r7
 80004e4:	2700      	movs	r7, #0
 80004e6:	4246      	negs	r6, r0
 80004e8:	418f      	sbcs	r7, r1
 80004ea:	2101      	movs	r1, #1
 80004ec:	4249      	negs	r1, r1
 80004ee:	4689      	mov	r9, r1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da07      	bge.n	8000504 <__divdi3+0x3c>
 80004f4:	4649      	mov	r1, r9
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0010      	movs	r0, r2
 80004fa:	4689      	mov	r9, r1
 80004fc:	0019      	movs	r1, r3
 80004fe:	2300      	movs	r3, #0
 8000500:	4242      	negs	r2, r0
 8000502:	418b      	sbcs	r3, r1
 8000504:	0034      	movs	r4, r6
 8000506:	003d      	movs	r5, r7
 8000508:	4692      	mov	sl, r2
 800050a:	4698      	mov	r8, r3
 800050c:	42bb      	cmp	r3, r7
 800050e:	d869      	bhi.n	80005e4 <__divdi3+0x11c>
 8000510:	d066      	beq.n	80005e0 <__divdi3+0x118>
 8000512:	4641      	mov	r1, r8
 8000514:	4650      	mov	r0, sl
 8000516:	f000 f8af 	bl	8000678 <__clzdi2>
 800051a:	4683      	mov	fp, r0
 800051c:	0039      	movs	r1, r7
 800051e:	0030      	movs	r0, r6
 8000520:	f000 f8aa 	bl	8000678 <__clzdi2>
 8000524:	465b      	mov	r3, fp
 8000526:	1a1b      	subs	r3, r3, r0
 8000528:	469c      	mov	ip, r3
 800052a:	3b20      	subs	r3, #32
 800052c:	469b      	mov	fp, r3
 800052e:	d500      	bpl.n	8000532 <__divdi3+0x6a>
 8000530:	e075      	b.n	800061e <__divdi3+0x156>
 8000532:	4651      	mov	r1, sl
 8000534:	4658      	mov	r0, fp
 8000536:	4081      	lsls	r1, r0
 8000538:	000b      	movs	r3, r1
 800053a:	4651      	mov	r1, sl
 800053c:	4660      	mov	r0, ip
 800053e:	4081      	lsls	r1, r0
 8000540:	000a      	movs	r2, r1
 8000542:	42bb      	cmp	r3, r7
 8000544:	d861      	bhi.n	800060a <__divdi3+0x142>
 8000546:	d05e      	beq.n	8000606 <__divdi3+0x13e>
 8000548:	0034      	movs	r4, r6
 800054a:	003d      	movs	r5, r7
 800054c:	4659      	mov	r1, fp
 800054e:	1aa4      	subs	r4, r4, r2
 8000550:	419d      	sbcs	r5, r3
 8000552:	2900      	cmp	r1, #0
 8000554:	da00      	bge.n	8000558 <__divdi3+0x90>
 8000556:	e07a      	b.n	800064e <__divdi3+0x186>
 8000558:	2100      	movs	r1, #0
 800055a:	2000      	movs	r0, #0
 800055c:	2601      	movs	r6, #1
 800055e:	9000      	str	r0, [sp, #0]
 8000560:	9101      	str	r1, [sp, #4]
 8000562:	4659      	mov	r1, fp
 8000564:	408e      	lsls	r6, r1
 8000566:	9601      	str	r6, [sp, #4]
 8000568:	4661      	mov	r1, ip
 800056a:	2601      	movs	r6, #1
 800056c:	408e      	lsls	r6, r1
 800056e:	4661      	mov	r1, ip
 8000570:	9600      	str	r6, [sp, #0]
 8000572:	2900      	cmp	r1, #0
 8000574:	d050      	beq.n	8000618 <__divdi3+0x150>
 8000576:	07d9      	lsls	r1, r3, #31
 8000578:	0856      	lsrs	r6, r2, #1
 800057a:	085f      	lsrs	r7, r3, #1
 800057c:	430e      	orrs	r6, r1
 800057e:	4663      	mov	r3, ip
 8000580:	e00e      	b.n	80005a0 <__divdi3+0xd8>
 8000582:	42af      	cmp	r7, r5
 8000584:	d101      	bne.n	800058a <__divdi3+0xc2>
 8000586:	42a6      	cmp	r6, r4
 8000588:	d80c      	bhi.n	80005a4 <__divdi3+0xdc>
 800058a:	1ba4      	subs	r4, r4, r6
 800058c:	41bd      	sbcs	r5, r7
 800058e:	2101      	movs	r1, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2200      	movs	r2, #0
 8000596:	3b01      	subs	r3, #1
 8000598:	1864      	adds	r4, r4, r1
 800059a:	4155      	adcs	r5, r2
 800059c:	2b00      	cmp	r3, #0
 800059e:	d006      	beq.n	80005ae <__divdi3+0xe6>
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d9ee      	bls.n	8000582 <__divdi3+0xba>
 80005a4:	3b01      	subs	r3, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f8      	bne.n	80005a0 <__divdi3+0xd8>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db3d      	blt.n	8000638 <__divdi3+0x170>
 80005bc:	002e      	movs	r6, r5
 80005be:	40de      	lsrs	r6, r3
 80005c0:	4663      	mov	r3, ip
 80005c2:	002c      	movs	r4, r5
 80005c4:	40dc      	lsrs	r4, r3
 80005c6:	465b      	mov	r3, fp
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db4b      	blt.n	8000664 <__divdi3+0x19c>
 80005cc:	0034      	movs	r4, r6
 80005ce:	465d      	mov	r5, fp
 80005d0:	40ac      	lsls	r4, r5
 80005d2:	0023      	movs	r3, r4
 80005d4:	4664      	mov	r4, ip
 80005d6:	40a6      	lsls	r6, r4
 80005d8:	0032      	movs	r2, r6
 80005da:	1a80      	subs	r0, r0, r2
 80005dc:	4199      	sbcs	r1, r3
 80005de:	e003      	b.n	80005e8 <__divdi3+0x120>
 80005e0:	42b2      	cmp	r2, r6
 80005e2:	d996      	bls.n	8000512 <__divdi3+0x4a>
 80005e4:	2000      	movs	r0, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	464b      	mov	r3, r9
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <__divdi3+0x130>
 80005ee:	0003      	movs	r3, r0
 80005f0:	000c      	movs	r4, r1
 80005f2:	2100      	movs	r1, #0
 80005f4:	4258      	negs	r0, r3
 80005f6:	41a1      	sbcs	r1, r4
 80005f8:	b003      	add	sp, #12
 80005fa:	bc3c      	pop	{r2, r3, r4, r5}
 80005fc:	4690      	mov	r8, r2
 80005fe:	4699      	mov	r9, r3
 8000600:	46a2      	mov	sl, r4
 8000602:	46ab      	mov	fp, r5
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	42b1      	cmp	r1, r6
 8000608:	d99e      	bls.n	8000548 <__divdi3+0x80>
 800060a:	2100      	movs	r1, #0
 800060c:	2000      	movs	r0, #0
 800060e:	9000      	str	r0, [sp, #0]
 8000610:	9101      	str	r1, [sp, #4]
 8000612:	4661      	mov	r1, ip
 8000614:	2900      	cmp	r1, #0
 8000616:	d1ae      	bne.n	8000576 <__divdi3+0xae>
 8000618:	9800      	ldr	r0, [sp, #0]
 800061a:	9901      	ldr	r1, [sp, #4]
 800061c:	e7e4      	b.n	80005e8 <__divdi3+0x120>
 800061e:	2320      	movs	r3, #32
 8000620:	4662      	mov	r2, ip
 8000622:	4651      	mov	r1, sl
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40d9      	lsrs	r1, r3
 8000628:	4640      	mov	r0, r8
 800062a:	9100      	str	r1, [sp, #0]
 800062c:	4661      	mov	r1, ip
 800062e:	4088      	lsls	r0, r1
 8000630:	0003      	movs	r3, r0
 8000632:	9900      	ldr	r1, [sp, #0]
 8000634:	430b      	orrs	r3, r1
 8000636:	e780      	b.n	800053a <__divdi3+0x72>
 8000638:	4662      	mov	r2, ip
 800063a:	2320      	movs	r3, #32
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	002a      	movs	r2, r5
 8000640:	409a      	lsls	r2, r3
 8000642:	0026      	movs	r6, r4
 8000644:	0013      	movs	r3, r2
 8000646:	4662      	mov	r2, ip
 8000648:	40d6      	lsrs	r6, r2
 800064a:	431e      	orrs	r6, r3
 800064c:	e7b8      	b.n	80005c0 <__divdi3+0xf8>
 800064e:	4661      	mov	r1, ip
 8000650:	2620      	movs	r6, #32
 8000652:	2701      	movs	r7, #1
 8000654:	1a76      	subs	r6, r6, r1
 8000656:	2000      	movs	r0, #0
 8000658:	2100      	movs	r1, #0
 800065a:	40f7      	lsrs	r7, r6
 800065c:	9000      	str	r0, [sp, #0]
 800065e:	9101      	str	r1, [sp, #4]
 8000660:	9701      	str	r7, [sp, #4]
 8000662:	e781      	b.n	8000568 <__divdi3+0xa0>
 8000664:	4667      	mov	r7, ip
 8000666:	2320      	movs	r3, #32
 8000668:	4662      	mov	r2, ip
 800066a:	0035      	movs	r5, r6
 800066c:	40bc      	lsls	r4, r7
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	40dd      	lsrs	r5, r3
 8000672:	0023      	movs	r3, r4
 8000674:	432b      	orrs	r3, r5
 8000676:	e7ad      	b.n	80005d4 <__divdi3+0x10c>

08000678 <__clzdi2>:
 8000678:	b510      	push	{r4, lr}
 800067a:	2900      	cmp	r1, #0
 800067c:	d103      	bne.n	8000686 <__clzdi2+0xe>
 800067e:	f000 f807 	bl	8000690 <__clzsi2>
 8000682:	3020      	adds	r0, #32
 8000684:	e002      	b.n	800068c <__clzdi2+0x14>
 8000686:	1c08      	adds	r0, r1, #0
 8000688:	f000 f802 	bl	8000690 <__clzsi2>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <__clzsi2>:
 8000690:	211c      	movs	r1, #28
 8000692:	2301      	movs	r3, #1
 8000694:	041b      	lsls	r3, r3, #16
 8000696:	4298      	cmp	r0, r3
 8000698:	d301      	bcc.n	800069e <__clzsi2+0xe>
 800069a:	0c00      	lsrs	r0, r0, #16
 800069c:	3910      	subs	r1, #16
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	4298      	cmp	r0, r3
 80006a2:	d301      	bcc.n	80006a8 <__clzsi2+0x18>
 80006a4:	0a00      	lsrs	r0, r0, #8
 80006a6:	3908      	subs	r1, #8
 80006a8:	091b      	lsrs	r3, r3, #4
 80006aa:	4298      	cmp	r0, r3
 80006ac:	d301      	bcc.n	80006b2 <__clzsi2+0x22>
 80006ae:	0900      	lsrs	r0, r0, #4
 80006b0:	3904      	subs	r1, #4
 80006b2:	a202      	add	r2, pc, #8	; (adr r2, 80006bc <__clzsi2+0x2c>)
 80006b4:	5c10      	ldrb	r0, [r2, r0]
 80006b6:	1840      	adds	r0, r0, r1
 80006b8:	4770      	bx	lr
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	02020304 	.word	0x02020304
 80006c0:	01010101 	.word	0x01010101
	...

080006cc <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	2202      	movs	r2, #2
 80006da:	4013      	ands	r3, r2
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d101      	bne.n	80006e4 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	0018      	movs	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}

080006ee <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	2204      	movs	r2, #4
 80006fc:	4013      	ands	r3, r2
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d101      	bne.n	8000706 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000702:	2301      	movs	r3, #1
 8000704:	e000      	b.n	8000708 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000706:	2300      	movs	r3, #0
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}

08000710 <LL_I2C_IsActiveFlag_NACK>:
  * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(I2C_TypeDef *I2Cx)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	2210      	movs	r2, #16
 800071e:	4013      	ands	r3, r2
 8000720:	2b10      	cmp	r3, #16
 8000722:	d101      	bne.n	8000728 <LL_I2C_IsActiveFlag_NACK+0x18>
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <LL_I2C_IsActiveFlag_NACK+0x1a>
 8000728:	2300      	movs	r3, #0
}
 800072a:	0018      	movs	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}

08000732 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	2210      	movs	r2, #16
 8000740:	431a      	orrs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	61da      	str	r2, [r3, #28]
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	69fa      	ldr	r2, [r7, #28]
 8000764:	0d51      	lsrs	r1, r2, #21
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	400a      	ands	r2, r1
 800076c:	490a      	ldr	r1, [pc, #40]	; (8000798 <LL_I2C_HandleTransfer+0x48>)
 800076e:	430a      	orrs	r2, r1
 8000770:	43d2      	mvns	r2, r2
 8000772:	401a      	ands	r2, r3
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4319      	orrs	r1, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	041b      	lsls	r3, r3, #16
 800077e:	4319      	orrs	r1, r3
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	4319      	orrs	r1, r3
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	430b      	orrs	r3, r1
 8000788:	431a      	orrs	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b004      	add	sp, #16
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	03ff7bff 	.word	0x03ff7bff

0800079c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a8:	b2db      	uxtb	r3, r3
}
 80007aa:	0018      	movs	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	000a      	movs	r2, r1
 80007bc:	1cfb      	adds	r3, r7, #3
 80007be:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80007c0:	1cfb      	adds	r3, r7, #3
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b002      	add	sp, #8
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <bqInit>:
/**
 * @brief	this will start the BQ769x0 chip and check it's present
 * @param	I2Cx - the I2C peripheral, already initialized by the user
 * @retval	(uint8_t)1 if OK, (uint8_t)0 if not
 */
uint8_t bqInit(I2C_TypeDef *I2Cx, condensed_afe_data * afeData, afe_config *afeConfig) {
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
	bqI2C = I2Cx;
 80007dc:	4b49      	ldr	r3, [pc, #292]	; (8000904 <bqInit+0x134>)
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	601a      	str	r2, [r3, #0]
	data = afeData;
 80007e2:	4b49      	ldr	r3, [pc, #292]	; (8000908 <bqInit+0x138>)
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	601a      	str	r2, [r3, #0]
	config = afeConfig;
 80007e8:	4b48      	ldr	r3, [pc, #288]	; (800090c <bqInit+0x13c>)
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]

	// check if the chip is there
	if(0==writeRegister(CC_CFG, 0x19)) {
 80007ee:	2119      	movs	r1, #25
 80007f0:	200b      	movs	r0, #11
 80007f2:	f000 fcd3 	bl	800119c <writeRegister>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d101      	bne.n	80007fe <bqInit+0x2e>
		return 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e07e      	b.n	80008fc <bqInit+0x12c>
	}
	if(0x19!=readRegister(CC_CFG)) {
 80007fe:	200b      	movs	r0, #11
 8000800:	f000 fce6 	bl	80011d0 <readRegister>
 8000804:	0003      	movs	r3, r0
 8000806:	2b19      	cmp	r3, #25
 8000808:	d001      	beq.n	800080e <bqInit+0x3e>
		return 0;
 800080a:	2300      	movs	r3, #0
 800080c:	e076      	b.n	80008fc <bqInit+0x12c>
	}

	// run the initial configuration of the BQ chip
	writeRegister(CELLBAL1, 0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2001      	movs	r0, #1
 8000812:	f000 fcc3 	bl	800119c <writeRegister>
	writeRegister(CELLBAL2, 0x00);
 8000816:	2100      	movs	r1, #0
 8000818:	2002      	movs	r0, #2
 800081a:	f000 fcbf 	bl	800119c <writeRegister>
	writeRegister(CELLBAL3, 0x00);
 800081e:	2100      	movs	r1, #0
 8000820:	2003      	movs	r0, #3
 8000822:	f000 fcbb 	bl	800119c <writeRegister>
	writeRegister(SYS_CTRL1,0b00010000);
 8000826:	2110      	movs	r1, #16
 8000828:	2004      	movs	r0, #4
 800082a:	f000 fcb7 	bl	800119c <writeRegister>
	writeRegister(SYS_CTRL2,0b01000000);
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	2005      	movs	r0, #5
 8000832:	f000 fcb3 	bl	800119c <writeRegister>

	// reset data register
	data->status_reg = 0;
 8000836:	4b34      	ldr	r3, [pc, #208]	; (8000908 <bqInit+0x138>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2226      	movs	r2, #38	; 0x26
 800083c:	2100      	movs	r1, #0
 800083e:	5499      	strb	r1, [r3, r2]
	data->balStatus = 0;
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <bqInit+0x138>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	223a      	movs	r2, #58	; 0x3a
 8000846:	2100      	movs	r1, #0
 8000848:	5499      	strb	r1, [r3, r2]
	data->balTarget = 0;
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <bqInit+0x138>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	879a      	strh	r2, [r3, #60]	; 0x3c

	// read calibration data
	adcOffset = (int32_t) readRegister(ADCOFFSET);  // convert from 2's complement
 8000852:	2051      	movs	r0, #81	; 0x51
 8000854:	f000 fcbc 	bl	80011d0 <readRegister>
 8000858:	0003      	movs	r3, r0
 800085a:	001a      	movs	r2, r3
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <bqInit+0x140>)
 800085e:	601a      	str	r2, [r3, #0]
	adcGain = (uint32_t)365+(uint32_t)((readRegister(ADCGAIN1)&(uint8_t)0b00001100)<<(uint8_t)1)
 8000860:	2050      	movs	r0, #80	; 0x50
 8000862:	f000 fcb5 	bl	80011d0 <readRegister>
 8000866:	0003      	movs	r3, r0
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	001a      	movs	r2, r3
 800086c:	2318      	movs	r3, #24
 800086e:	401a      	ands	r2, r3
 8000870:	0014      	movs	r4, r2
			+(uint32_t)((readRegister(ADCGAIN2)&(uint8_t)11100000)>>(uint8_t)5);
 8000872:	2059      	movs	r0, #89	; 0x59
 8000874:	f000 fcac 	bl	80011d0 <readRegister>
 8000878:	0003      	movs	r3, r0
 800087a:	115b      	asrs	r3, r3, #5
 800087c:	001a      	movs	r2, r3
 800087e:	2303      	movs	r3, #3
 8000880:	4013      	ands	r3, r2
 8000882:	18e3      	adds	r3, r4, r3
 8000884:	336e      	adds	r3, #110	; 0x6e
 8000886:	33ff      	adds	r3, #255	; 0xff
 8000888:	001a      	movs	r2, r3
	adcGain = (uint32_t)365+(uint32_t)((readRegister(ADCGAIN1)&(uint8_t)0b00001100)<<(uint8_t)1)
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <bqInit+0x144>)
 800088c:	601a      	str	r2, [r3, #0]

	// now apply all settings
	setCurrentProtection(config->range,
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <bqInit+0x13c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	7898      	ldrb	r0, [r3, #2]
			config->sc_delay, config->sc_voltage,
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <bqInit+0x13c>)
 8000896:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 8000898:	78d9      	ldrb	r1, [r3, #3]
			config->sc_delay, config->sc_voltage,
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <bqInit+0x13c>)
 800089c:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 800089e:	791a      	ldrb	r2, [r3, #4]
			config->oc_delay, config->oc_voltage);
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <bqInit+0x13c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80008a4:	795c      	ldrb	r4, [r3, #5]
			config->oc_delay, config->oc_voltage);
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <bqInit+0x13c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	0023      	movs	r3, r4
 80008b0:	f000 fbd8 	bl	8001064 <setCurrentProtection>
	setOvUvProtection(config->uv_delay, config->uvLimit, config->ov_delay, config->ovLimit);
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <bqInit+0x13c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	7b18      	ldrb	r0, [r3, #12]
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <bqInit+0x13c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	7b59      	ldrb	r1, [r3, #13]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <bqInit+0x13c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	7b9a      	ldrb	r2, [r3, #14]
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <bqInit+0x13c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	7bdb      	ldrb	r3, [r3, #15]
 80008cc:	f000 fc25 	bl	800111a <setOvUvProtection>

	config->cell_max_voltage = getRealOv();
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <bqInit+0x13c>)
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	f000 fb66 	bl	8000fa4 <getRealOv>
 80008d8:	0003      	movs	r3, r0
 80008da:	82a3      	strh	r3, [r4, #20]
	config->cell_min_voltage = getRealUv();
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <bqInit+0x13c>)
 80008de:	681c      	ldr	r4, [r3, #0]
 80008e0:	f000 fb90 	bl	8001004 <getRealUv>
 80008e4:	0003      	movs	r3, r0
 80008e6:	82e3      	strh	r3, [r4, #22]

	// prepare SysTick
	ticks = 0;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <bqInit+0x148>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <bqInit+0x14c>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <bqInit+0x14c>)
 80008f4:	2102      	movs	r1, #2
 80008f6:	430a      	orrs	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]

	return 1;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b005      	add	sp, #20
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	20000064 	.word	0x20000064
 8000908:	20000070 	.word	0x20000070
 800090c:	20000074 	.word	0x20000074
 8000910:	20000068 	.word	0x20000068
 8000914:	2000006c 	.word	0x2000006c
 8000918:	2000007c 	.word	0x2000007c
 800091c:	e000e010 	.word	0xe000e010

08000920 <bqAct>:

/**
 *	@brief	This function updates the data from the AFE
 *	@retval	(uint8_t)1 if the system needs to pay attention to the AFE, 0 otherwise
 */
uint8_t bqAct(void) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
	//uint8_t retVal = 0x00;
	uint8_t tempVal;
	// get AFE status and reset all flags
	tempVal = readRegister(SYS_STAT);
 8000926:	1dfc      	adds	r4, r7, #7
 8000928:	2000      	movs	r0, #0
 800092a:	f000 fc51 	bl	80011d0 <readRegister>
 800092e:	0003      	movs	r3, r0
 8000930:	7023      	strb	r3, [r4, #0]
	writeRegister(SYS_STAT,0b10111111);
 8000932:	21bf      	movs	r1, #191	; 0xbf
 8000934:	2000      	movs	r0, #0
 8000936:	f000 fc31 	bl	800119c <writeRegister>

	afeStatus = afeStatus | (0b00001111&tempVal);
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	220f      	movs	r2, #15
 8000940:	4013      	ands	r3, r2
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <bqAct+0x60>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4313      	orrs	r3, r2
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <bqAct+0x60>)
 800094e:	701a      	strb	r2, [r3, #0]
		// OV, UV , OC , SCD reaction
		bqDisableAll();
	}
#endif

	if(0b10000000 & tempVal) {
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b25b      	sxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	da07      	bge.n	800096a <bqAct+0x4a>
		// read all data registers and process them
		bqReadData(VC1_HI_BYTE,afeRawData,(CC_LO_BYTE-VC1_HI_BYTE)+1);
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <bqAct+0x64>)
 800095c:	2228      	movs	r2, #40	; 0x28
 800095e:	0019      	movs	r1, r3
 8000960:	200c      	movs	r0, #12
 8000962:	f000 fcbd 	bl	80012e0 <bqReadData>
		processDataRegisters();
 8000966:	f000 f94d 	bl	8000c04 <processDataRegisters>
	}

	if(afeStatus) {
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <bqAct+0x60>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <bqAct+0x56>
		return 1;
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <bqAct+0x58>
	} else {
		return 0;
 8000976:	2300      	movs	r3, #0
	}
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	b003      	add	sp, #12
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	20000078 	.word	0x20000078
 8000984:	20000024 	.word	0x20000024

08000988 <bqDisableAll>:

void bqDisableAll(void) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
	uint8_t tmp;
	tmp = readRegister(SYS_CTRL2);
 800098e:	1dfc      	adds	r4, r7, #7
 8000990:	2005      	movs	r0, #5
 8000992:	f000 fc1d 	bl	80011d0 <readRegister>
 8000996:	0003      	movs	r3, r0
 8000998:	7023      	strb	r3, [r4, #0]
	tmp = tmp & 0b11111100;
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	1dfa      	adds	r2, r7, #7
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	2103      	movs	r1, #3
 80009a2:	438a      	bics	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
	writeRegister(SYS_CTRL2, tmp);
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0019      	movs	r1, r3
 80009ac:	2005      	movs	r0, #5
 80009ae:	f000 fbf5 	bl	800119c <writeRegister>
	data->outStatus = 0x00;
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <bqDisableAll+0x3c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	223e      	movs	r2, #62	; 0x3e
 80009b8:	2100      	movs	r1, #0
 80009ba:	5499      	strb	r1, [r3, r2]
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b003      	add	sp, #12
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	20000070 	.word	0x20000070

080009c8 <bqEnableAll>:

void bqEnableAll(void) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
	uint8_t tmp;
	tmp = readRegister(SYS_CTRL2);
 80009ce:	1dfc      	adds	r4, r7, #7
 80009d0:	2005      	movs	r0, #5
 80009d2:	f000 fbfd 	bl	80011d0 <readRegister>
 80009d6:	0003      	movs	r3, r0
 80009d8:	7023      	strb	r3, [r4, #0]
	tmp = tmp | 0b00000011;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	1dfa      	adds	r2, r7, #7
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	2103      	movs	r1, #3
 80009e2:	430a      	orrs	r2, r1
 80009e4:	701a      	strb	r2, [r3, #0]
	writeRegister(SYS_CTRL2, tmp);
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0019      	movs	r1, r3
 80009ec:	2005      	movs	r0, #5
 80009ee:	f000 fbd5 	bl	800119c <writeRegister>
	data->outStatus = 0x01;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <bqEnableAll+0x3c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	223e      	movs	r2, #62	; 0x3e
 80009f8:	2101      	movs	r1, #1
 80009fa:	5499      	strb	r1, [r3, r2]
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b003      	add	sp, #12
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000070 	.word	0x20000070

08000a08 <bqResetStatus>:

void bqResetStatus(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	afeStatus = 0x00;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <bqResetStatus+0x10>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000078 	.word	0x20000078

08000a1c <bqBalance>:

void bqBalance(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
	if(1==data->balStatus) {
 8000a22:	4b76      	ldr	r3, [pc, #472]	; (8000bfc <bqBalance+0x1e0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	223a      	movs	r2, #58	; 0x3a
 8000a28:	5c9b      	ldrb	r3, [r3, r2]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d000      	beq.n	8000a30 <bqBalance+0x14>
 8000a2e:	e0d5      	b.n	8000bdc <bqBalance+0x1c0>
		if(0!=data->balTarget) {
 8000a30:	4b72      	ldr	r3, [pc, #456]	; (8000bfc <bqBalance+0x1e0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d100      	bne.n	8000a3c <bqBalance+0x20>
 8000a3a:	e095      	b.n	8000b68 <bqBalance+0x14c>
			// target is already set
			uint8_t selected_cell = 0xFF;
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	22ff      	movs	r2, #255	; 0xff
 8000a42:	701a      	strb	r2, [r3, #0]
			uint16_t selectedCellVoltage = 0x00;
 8000a44:	230c      	movs	r3, #12
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	2200      	movs	r2, #0
 8000a4a:	801a      	strh	r2, [r3, #0]
			// pick the highest cell and discharge it
			for(uint8_t cnt=0;cnt<15;cnt++) {
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e038      	b.n	8000ac8 <bqBalance+0xac>
				if(config->enabled_cells&(1<<cnt)) {
 8000a56:	4b6a      	ldr	r3, [pc, #424]	; (8000c00 <bqBalance+0x1e4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	230b      	movs	r3, #11
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	411a      	asrs	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	d026      	beq.n	8000abc <bqBalance+0xa0>
					if(data->cells[cnt]>data->balTarget) {
 8000a6e:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <bqBalance+0x1e0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	220b      	movs	r2, #11
 8000a74:	18ba      	adds	r2, r7, r2
 8000a76:	7812      	ldrb	r2, [r2, #0]
 8000a78:	0052      	lsls	r2, r2, #1
 8000a7a:	5ad2      	ldrh	r2, [r2, r3]
 8000a7c:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <bqBalance+0x1e0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d91a      	bls.n	8000abc <bqBalance+0xa0>
						if(data->cells[cnt] > selectedCellVoltage ) {
 8000a86:	4b5d      	ldr	r3, [pc, #372]	; (8000bfc <bqBalance+0x1e0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	220b      	movs	r2, #11
 8000a8c:	18ba      	adds	r2, r7, r2
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	0052      	lsls	r2, r2, #1
 8000a92:	5ad3      	ldrh	r3, [r2, r3]
 8000a94:	220c      	movs	r2, #12
 8000a96:	18ba      	adds	r2, r7, r2
 8000a98:	8812      	ldrh	r2, [r2, #0]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d20e      	bcs.n	8000abc <bqBalance+0xa0>
							selected_cell=cnt;
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	210b      	movs	r1, #11
 8000aa4:	187a      	adds	r2, r7, r1
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	701a      	strb	r2, [r3, #0]
							selectedCellVoltage = data->cells[cnt];
 8000aaa:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <bqBalance+0x1e0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	7819      	ldrb	r1, [r3, #0]
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	0049      	lsls	r1, r1, #1
 8000ab8:	5a8a      	ldrh	r2, [r1, r2]
 8000aba:	801a      	strh	r2, [r3, #0]
			for(uint8_t cnt=0;cnt<15;cnt++) {
 8000abc:	210b      	movs	r1, #11
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	3201      	adds	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	230b      	movs	r3, #11
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b0e      	cmp	r3, #14
 8000ad0:	d9c1      	bls.n	8000a56 <bqBalance+0x3a>
						}
					}
				}
			}
			if(0xFF==selected_cell) {
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2bff      	cmp	r3, #255	; 0xff
 8000ada:	d115      	bne.n	8000b08 <bqBalance+0xec>
				// no more cells
				writeRegister(CELLBAL1, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 fb5c 	bl	800119c <writeRegister>
				writeRegister(CELLBAL2, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f000 fb58 	bl	800119c <writeRegister>
				writeRegister(CELLBAL3, 0x00);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 fb54 	bl	800119c <writeRegister>
				data->balTarget = 0x00;
 8000af4:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <bqBalance+0x1e0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2200      	movs	r2, #0
 8000afa:	879a      	strh	r2, [r3, #60]	; 0x3c
				data->balStatus = 0x00;
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <bqBalance+0x1e0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	223a      	movs	r2, #58	; 0x3a
 8000b02:	2100      	movs	r1, #0
 8000b04:	5499      	strb	r1, [r3, r2]
	} else {
		writeRegister(CELLBAL1, 0x00);
		writeRegister(CELLBAL2, 0x00);
		writeRegister(CELLBAL3, 0x00);
	}
}
 8000b06:	e075      	b.n	8000bf4 <bqBalance+0x1d8>
				if(5>selected_cell) {	// cells 0,1,2,3,4
 8000b08:	230f      	movs	r3, #15
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d80b      	bhi.n	8000b2a <bqBalance+0x10e>
					writeRegister(CELLBAL1, (1<<selected_cell));
 8000b12:	230f      	movs	r3, #15
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	0019      	movs	r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	f000 fb3a 	bl	800119c <writeRegister>
}
 8000b28:	e064      	b.n	8000bf4 <bqBalance+0x1d8>
				} else if (10>selected_cell) { // cells 5,6,7,8,9
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b09      	cmp	r3, #9
 8000b32:	d80c      	bhi.n	8000b4e <bqBalance+0x132>
					writeRegister(CELLBAL2, (1<<(selected_cell-5)));
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	3b05      	subs	r3, #5
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	0019      	movs	r1, r3
 8000b46:	2002      	movs	r0, #2
 8000b48:	f000 fb28 	bl	800119c <writeRegister>
}
 8000b4c:	e052      	b.n	8000bf4 <bqBalance+0x1d8>
					writeRegister(CELLBAL3, (1<<(selected_cell-10)));
 8000b4e:	230f      	movs	r3, #15
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3b0a      	subs	r3, #10
 8000b56:	2201      	movs	r2, #1
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	0019      	movs	r1, r3
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 fb1b 	bl	800119c <writeRegister>
}
 8000b66:	e045      	b.n	8000bf4 <bqBalance+0x1d8>
			uint16_t minCell = 0xFFFF;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4252      	negs	r2, r2
 8000b70:	801a      	strh	r2, [r3, #0]
			for(uint8_t cnt=0;cnt<15;cnt++) {
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e023      	b.n	8000bc2 <bqBalance+0x1a6>
				if(config->enabled_cells&(1<<cnt)) {
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <bqBalance+0x1e4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	001a      	movs	r2, r3
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	411a      	asrs	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	d013      	beq.n	8000bb8 <bqBalance+0x19c>
					if(data->cells[cnt]<minCell) {
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <bqBalance+0x1e0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	1dfa      	adds	r2, r7, #7
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	5ad3      	ldrh	r3, [r2, r3]
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	18ba      	adds	r2, r7, r2
 8000ba0:	8812      	ldrh	r2, [r2, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d908      	bls.n	8000bb8 <bqBalance+0x19c>
						minCell = data->cells[cnt];
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <bqBalance+0x1e0>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	7819      	ldrb	r1, [r3, #0]
 8000bae:	2308      	movs	r3, #8
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	0049      	lsls	r1, r1, #1
 8000bb4:	5a8a      	ldrh	r2, [r1, r2]
 8000bb6:	801a      	strh	r2, [r3, #0]
			for(uint8_t cnt=0;cnt<15;cnt++) {
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	3201      	adds	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b0e      	cmp	r3, #14
 8000bc8:	d9d7      	bls.n	8000b7a <bqBalance+0x15e>
			data->balTarget = minCell+1; // 1mV over the minimum cell
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <bqBalance+0x1e0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2208      	movs	r2, #8
 8000bd0:	18ba      	adds	r2, r7, r2
 8000bd2:	8812      	ldrh	r2, [r2, #0]
 8000bd4:	3201      	adds	r2, #1
 8000bd6:	b292      	uxth	r2, r2
 8000bd8:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8000bda:	e00b      	b.n	8000bf4 <bqBalance+0x1d8>
		writeRegister(CELLBAL1, 0x00);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 fadc 	bl	800119c <writeRegister>
		writeRegister(CELLBAL2, 0x00);
 8000be4:	2100      	movs	r1, #0
 8000be6:	2002      	movs	r0, #2
 8000be8:	f000 fad8 	bl	800119c <writeRegister>
		writeRegister(CELLBAL3, 0x00);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 fad4 	bl	800119c <writeRegister>
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b004      	add	sp, #16
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000070 	.word	0x20000070
 8000c00:	20000074 	.word	0x20000074

08000c04 <processDataRegisters>:

static void processDataRegisters(void) {
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
	data->status_reg = afeStatus;
 8000c0a:	4b61      	ldr	r3, [pc, #388]	; (8000d90 <processDataRegisters+0x18c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a61      	ldr	r2, [pc, #388]	; (8000d94 <processDataRegisters+0x190>)
 8000c10:	7811      	ldrb	r1, [r2, #0]
 8000c12:	2226      	movs	r2, #38	; 0x26
 8000c14:	5499      	strb	r1, [r3, r2]

	// cell voltage
	for(uint8_t cnt=0; cnt<15;cnt++) {
 8000c16:	230f      	movs	r3, #15
 8000c18:	2208      	movs	r2, #8
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	44bc      	add	ip, r7
 8000c1e:	4463      	add	r3, ip
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e034      	b.n	8000c90 <processDataRegisters+0x8c>
		if(0==(config->enabled_cells&(1<<cnt))) {
 8000c26:	4b5c      	ldr	r3, [pc, #368]	; (8000d98 <processDataRegisters+0x194>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	230f      	movs	r3, #15
 8000c30:	2108      	movs	r1, #8
 8000c32:	468c      	mov	ip, r1
 8000c34:	44bc      	add	ip, r7
 8000c36:	4463      	add	r3, ip
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	411a      	asrs	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	d10b      	bne.n	8000c5c <processDataRegisters+0x58>
			data->cells[cnt] = 0;
 8000c44:	4b52      	ldr	r3, [pc, #328]	; (8000d90 <processDataRegisters+0x18c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	220f      	movs	r2, #15
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	468c      	mov	ip, r1
 8000c4e:	44bc      	add	ip, r7
 8000c50:	4462      	add	r2, ip
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	0052      	lsls	r2, r2, #1
 8000c56:	2100      	movs	r1, #0
 8000c58:	52d1      	strh	r1, [r2, r3]
 8000c5a:	e010      	b.n	8000c7e <processDataRegisters+0x7a>
		} else {
			data->cells[cnt] = convertCellVoltage(cnt);
 8000c5c:	4b4c      	ldr	r3, [pc, #304]	; (8000d90 <processDataRegisters+0x18c>)
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	220f      	movs	r2, #15
 8000c62:	2108      	movs	r1, #8
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	189b      	adds	r3, r3, r2
 8000c68:	781d      	ldrb	r5, [r3, #0]
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	189b      	adds	r3, r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 f897 	bl	8000da4 <convertCellVoltage>
 8000c76:	0003      	movs	r3, r0
 8000c78:	001a      	movs	r2, r3
 8000c7a:	006b      	lsls	r3, r5, #1
 8000c7c:	531a      	strh	r2, [r3, r4]
	for(uint8_t cnt=0; cnt<15;cnt++) {
 8000c7e:	210f      	movs	r1, #15
 8000c80:	2008      	movs	r0, #8
 8000c82:	183b      	adds	r3, r7, r0
 8000c84:	185b      	adds	r3, r3, r1
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	183b      	adds	r3, r7, r0
 8000c8a:	185b      	adds	r3, r3, r1
 8000c8c:	3201      	adds	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	230f      	movs	r3, #15
 8000c92:	2208      	movs	r2, #8
 8000c94:	4694      	mov	ip, r2
 8000c96:	44bc      	add	ip, r7
 8000c98:	4463      	add	r3, ip
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b0e      	cmp	r3, #14
 8000c9e:	d9c2      	bls.n	8000c26 <processDataRegisters+0x22>
		}
	}
	// total voltage
	data->total_voltage=convertPackVolage();
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <processDataRegisters+0x18c>)
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	f000 f8ca 	bl	8000e3c <convertPackVolage>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	83e3      	strh	r3, [r4, #30]

	// current
	data->system_current = convertPackCurrent();
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <processDataRegisters+0x18c>)
 8000cae:	681c      	ldr	r4, [r3, #0]
 8000cb0:	f000 f900 	bl	8000eb4 <convertPackCurrent>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	84a3      	strh	r3, [r4, #36]	; 0x24
	if((data->system_current>0)&&(data->system_current>config->chargeCurrent_mA)) {
 8000cb8:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <processDataRegisters+0x18c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2224      	movs	r2, #36	; 0x24
 8000cbe:	5e9b      	ldrsh	r3, [r3, r2]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dd13      	ble.n	8000cec <processDataRegisters+0xe8>
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <processDataRegisters+0x18c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2224      	movs	r2, #36	; 0x24
 8000cca:	5e9a      	ldrsh	r2, [r3, r2]
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <processDataRegisters+0x194>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	210a      	movs	r1, #10
 8000cd2:	5e5b      	ldrsh	r3, [r3, r1]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dd09      	ble.n	8000cec <processDataRegisters+0xe8>
		// over current charge protection;
		afeStatus |= 0b11000000;
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <processDataRegisters+0x190>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	4252      	negs	r2, r2
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <processDataRegisters+0x190>)
 8000ce6:	701a      	strb	r2, [r3, #0]
		bqDisableAll();
 8000ce8:	f7ff fe4e 	bl	8000988 <bqDisableAll>
	}
	//ts1
	data->die_temperature = convertPackDieTS1();
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <processDataRegisters+0x18c>)
 8000cee:	681c      	ldr	r4, [r3, #0]
 8000cf0:	f000 f918 	bl	8000f24 <convertPackDieTS1>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	6223      	str	r3, [r4, #32]

	// instant power
	data->inst_power = (int16_t)(((int32_t)data->total_voltage*(int32_t)data->system_current)/1000);
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <processDataRegisters+0x18c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	8bdb      	ldrh	r3, [r3, #30]
 8000cfe:	001a      	movs	r2, r3
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <processDataRegisters+0x18c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2124      	movs	r1, #36	; 0x24
 8000d06:	5e5b      	ldrsh	r3, [r3, r1]
 8000d08:	435a      	muls	r2, r3
 8000d0a:	23fa      	movs	r3, #250	; 0xfa
 8000d0c:	0099      	lsls	r1, r3, #2
 8000d0e:	0010      	movs	r0, r2
 8000d10:	f7ff fa84 	bl	800021c <__divsi3>
 8000d14:	0003      	movs	r3, r0
 8000d16:	001a      	movs	r2, r3
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <processDataRegisters+0x18c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	b212      	sxth	r2, r2
 8000d1e:	851a      	strh	r2, [r3, #40]	; 0x28

	// get SysTick data and determine current power share, add it to the energy register
	uint32_t localTicks = ticks;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <processDataRegisters+0x198>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	613b      	str	r3, [r7, #16]
	ticks = 0;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <processDataRegisters+0x198>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
#define TICKS_PER_HOUR	((int64_t)3600*1000);
	// compute Wh
	int64_t temp = (int32_t)data->total_voltage*(int32_t)data->system_current; // get instant power in uW
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <processDataRegisters+0x18c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	8bdb      	ldrh	r3, [r3, #30]
 8000d32:	001a      	movs	r2, r3
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <processDataRegisters+0x18c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2124      	movs	r1, #36	; 0x24
 8000d3a:	5e5b      	ldrsh	r3, [r3, r1]
 8000d3c:	4353      	muls	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	17db      	asrs	r3, r3, #31
 8000d42:	60fb      	str	r3, [r7, #12]
	temp = (temp*(int32_t)localTicks) / TICKS_PER_HOUR;
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	17db      	asrs	r3, r3, #31
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6838      	ldr	r0, [r7, #0]
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f7ff fb72 	bl	800043c <__aeabi_lmul>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	000c      	movs	r4, r1
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	0021      	movs	r1, r4
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <processDataRegisters+0x19c>)
 8000d62:	2300      	movs	r3, #0
 8000d64:	f7ff fb46 	bl	80003f4 <__aeabi_ldivmod>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	60fc      	str	r4, [r7, #12]
	data->total_power += temp;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <processDataRegisters+0x18c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <processDataRegisters+0x18c>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	68fc      	ldr	r4, [r7, #12]
 8000d80:	185b      	adds	r3, r3, r1
 8000d82:	4154      	adcs	r4, r2
 8000d84:	6303      	str	r3, [r0, #48]	; 0x30
 8000d86:	6344      	str	r4, [r0, #52]	; 0x34
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b006      	add	sp, #24
 8000d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d90:	20000070 	.word	0x20000070
 8000d94:	20000078 	.word	0x20000078
 8000d98:	20000074 	.word	0x20000074
 8000d9c:	2000007c 	.word	0x2000007c
 8000da0:	0036ee80 	.word	0x0036ee80

08000da4 <convertCellVoltage>:

static uint16_t convertCellVoltage(uint8_t cellIndex) {
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	0002      	movs	r2, r0
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	701a      	strb	r2, [r3, #0]
	uint8_t high;
	uint8_t low;
	high = afeRawData[cellIndex*2];
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	005a      	lsls	r2, r3, #1
 8000db6:	200f      	movs	r0, #15
 8000db8:	183b      	adds	r3, r7, r0
 8000dba:	491d      	ldr	r1, [pc, #116]	; (8000e30 <convertCellVoltage+0x8c>)
 8000dbc:	5c8a      	ldrb	r2, [r1, r2]
 8000dbe:	701a      	strb	r2, [r3, #0]
	low = afeRawData[(cellIndex*2)+1];
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	240e      	movs	r4, #14
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	4918      	ldr	r1, [pc, #96]	; (8000e30 <convertCellVoltage+0x8c>)
 8000dce:	5c8a      	ldrb	r2, [r1, r2]
 8000dd0:	701a      	strb	r2, [r3, #0]
	uint16_t rawAdcValue = ((uint16_t)(high<<8) | (uint16_t)low) & 0x3FFF;
 8000dd2:	183b      	adds	r3, r7, r0
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	210c      	movs	r1, #12
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	0492      	lsls	r2, r2, #18
 8000dec:	0c92      	lsrs	r2, r2, #18
 8000dee:	801a      	strh	r2, [r3, #0]
	uint16_t outData = (uint16_t)((((uint32_t)adcGain * (uint32_t)rawAdcValue) + (uint32_t)(adcOffset*1000))/1000);
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <convertCellVoltage+0x90>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4353      	muls	r3, r2
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <convertCellVoltage+0x94>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	0013      	movs	r3, r2
 8000e02:	015b      	lsls	r3, r3, #5
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	189b      	adds	r3, r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	18ca      	adds	r2, r1, r3
 8000e0e:	23fa      	movs	r3, #250	; 0xfa
 8000e10:	0099      	lsls	r1, r3, #2
 8000e12:	0010      	movs	r0, r2
 8000e14:	f7ff f978 	bl	8000108 <__udivsi3>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	210a      	movs	r1, #10
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	801a      	strh	r2, [r3, #0]
	return outData;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	881b      	ldrh	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000024 	.word	0x20000024
 8000e34:	2000006c 	.word	0x2000006c
 8000e38:	20000068 	.word	0x20000068

08000e3c <convertPackVolage>:

static uint16_t convertPackVolage(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	// V (BAT) = 4 x GAIN x ADC(cell) + (#Cells x OFFSET)
	// GAIN is stored in units of μV/LSB, while OFFSET is stored in mV units.
	uint8_t high;
	uint8_t low;
	high = afeRawData[BAT_HI_BYTE-VC1_HI_BYTE];
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <convertPackVolage+0x6c>)
 8000e46:	7f92      	ldrb	r2, [r2, #30]
 8000e48:	701a      	strb	r2, [r3, #0]
	low = afeRawData[BAT_LO_BYTE-VC1_HI_BYTE];
 8000e4a:	1dbb      	adds	r3, r7, #6
 8000e4c:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <convertPackVolage+0x6c>)
 8000e4e:	7fd2      	ldrb	r2, [r2, #31]
 8000e50:	701a      	strb	r2, [r3, #0]
	uint16_t rawAdcValue = (uint16_t)((uint16_t)high<<(uint8_t)8) | (uint16_t)low;
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b299      	uxth	r1, r3
 8000e5c:	1dbb      	adds	r3, r7, #6
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	430a      	orrs	r2, r1
 8000e66:	801a      	strh	r2, [r3, #0]
	uint16_t outData = (uint16_t)(((uint32_t)4*(uint32_t)adcGain*(uint32_t)rawAdcValue + ((uint32_t)4*adcOffset*1000))/(uint32_t)1000);
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	881a      	ldrh	r2, [r3, #0]
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <convertPackVolage+0x70>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4353      	muls	r3, r2
 8000e72:	0019      	movs	r1, r3
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <convertPackVolage+0x74>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	189b      	adds	r3, r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	18cb      	adds	r3, r1, r3
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	23fa      	movs	r3, #250	; 0xfa
 8000e8c:	0099      	lsls	r1, r3, #2
 8000e8e:	0010      	movs	r0, r2
 8000e90:	f7ff f93a 	bl	8000108 <__udivsi3>
 8000e94:	0003      	movs	r3, r0
 8000e96:	001a      	movs	r2, r3
 8000e98:	1cbb      	adds	r3, r7, #2
 8000e9a:	801a      	strh	r2, [r3, #0]
	return outData;
 8000e9c:	1cbb      	adds	r3, r7, #2
 8000e9e:	881b      	ldrh	r3, [r3, #0]
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000024 	.word	0x20000024
 8000eac:	2000006c 	.word	0x2000006c
 8000eb0:	20000068 	.word	0x20000068

08000eb4 <convertPackCurrent>:

static int16_t convertPackCurrent(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
	uint8_t high;
	uint8_t low;
	high = afeRawData[CC_HI_BYTE-VC1_HI_BYTE];
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <convertPackCurrent+0x68>)
 8000ebe:	2126      	movs	r1, #38	; 0x26
 8000ec0:	5c52      	ldrb	r2, [r2, r1]
 8000ec2:	701a      	strb	r2, [r3, #0]
	low = afeRawData[CC_LO_BYTE-VC1_HI_BYTE];
 8000ec4:	1dbb      	adds	r3, r7, #6
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <convertPackCurrent+0x68>)
 8000ec8:	2127      	movs	r1, #39	; 0x27
 8000eca:	5c52      	ldrb	r2, [r2, r1]
 8000ecc:	701a      	strb	r2, [r3, #0]
	int16_t rawAdcValue = (uint16_t)(high<<8) | (uint16_t)low;
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	801a      	strh	r2, [r3, #0]
	int16_t outData = (int16_t)((((int32_t)rawAdcValue*(int32_t)844))/((int32_t)100*(int32_t)config->shuntValue));
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	5e9b      	ldrsh	r3, [r3, r2]
 8000eec:	22d3      	movs	r2, #211	; 0xd3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	435a      	muls	r2, r3
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <convertPackCurrent+0x6c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	891b      	ldrh	r3, [r3, #8]
 8000ef8:	0019      	movs	r1, r3
 8000efa:	2364      	movs	r3, #100	; 0x64
 8000efc:	434b      	muls	r3, r1
 8000efe:	0019      	movs	r1, r3
 8000f00:	0010      	movs	r0, r2
 8000f02:	f7ff f98b 	bl	800021c <__divsi3>
 8000f06:	0003      	movs	r3, r0
 8000f08:	001a      	movs	r2, r3
 8000f0a:	1cbb      	adds	r3, r7, #2
 8000f0c:	801a      	strh	r2, [r3, #0]
	return outData;
 8000f0e:	1cbb      	adds	r3, r7, #2
 8000f10:	2200      	movs	r2, #0
 8000f12:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000024 	.word	0x20000024
 8000f20:	20000074 	.word	0x20000074

08000f24 <convertPackDieTS1>:

static int32_t convertPackDieTS1(void) {
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
	uint8_t high;
	uint8_t low;
	high = afeRawData[TS1_HI_BYTE-VC1_HI_BYTE];
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	183b      	adds	r3, r7, r0
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <convertPackDieTS1+0x74>)
 8000f30:	2120      	movs	r1, #32
 8000f32:	5c52      	ldrb	r2, [r2, r1]
 8000f34:	701a      	strb	r2, [r3, #0]
	low = afeRawData[TS1_LO_BYTE-VC1_HI_BYTE];
 8000f36:	240e      	movs	r4, #14
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <convertPackDieTS1+0x74>)
 8000f3c:	2121      	movs	r1, #33	; 0x21
 8000f3e:	5c52      	ldrb	r2, [r2, r1]
 8000f40:	701a      	strb	r2, [r3, #0]
	uint16_t rawAdcValue = ((uint16_t)(high<<8) | (uint16_t)low) & 0x3FFF;
 8000f42:	183b      	adds	r3, r7, r0
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	210c      	movs	r1, #12
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	0492      	lsls	r2, r2, #18
 8000f5c:	0c92      	lsrs	r2, r2, #18
 8000f5e:	801a      	strh	r2, [r3, #0]
	int32_t vtsx = rawAdcValue * 382; //uV
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	881a      	ldrh	r2, [r3, #0]
 8000f64:	0013      	movs	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	189b      	adds	r3, r3, r2
 8000f6a:	019b      	lsls	r3, r3, #6
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
	int32_t temp = (int32_t)((int32_t)25000 - ((int32_t)vtsx-(int32_t)1200000) /(int32_t) 4);
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <convertPackDieTS1+0x78>)
 8000f76:	4694      	mov	ip, r2
 8000f78:	4463      	add	r3, ip
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	da00      	bge.n	8000f80 <convertPackDieTS1+0x5c>
 8000f7e:	3303      	adds	r3, #3
 8000f80:	109b      	asrs	r3, r3, #2
 8000f82:	425b      	negs	r3, r3
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <convertPackDieTS1+0x7c>)
 8000f86:	4694      	mov	ip, r2
 8000f88:	4463      	add	r3, ip
 8000f8a:	607b      	str	r3, [r7, #4]
	return temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b005      	add	sp, #20
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	20000024 	.word	0x20000024
 8000f9c:	ffedb080 	.word	0xffedb080
 8000fa0:	000061a8 	.word	0x000061a8

08000fa4 <getRealOv>:

static uint16_t getRealOv(void) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t raw = readRegister(OV_TRIP);
 8000faa:	1dfc      	adds	r4, r7, #7
 8000fac:	2009      	movs	r0, #9
 8000fae:	f000 f90f 	bl	80011d0 <readRegister>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	7023      	strb	r3, [r4, #0]
	uint16_t val =(uint16_t)((((uint32_t)(raw<<4)|(uint32_t)(1<<13))*(uint32_t)adcGain+(uint32_t)(adcOffset*1000))/(uint32_t)1000);
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <getRealOv+0x58>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4353      	muls	r3, r2
 8000fca:	0019      	movs	r1, r3
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <getRealOv+0x5c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	189b      	adds	r3, r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	18ca      	adds	r2, r1, r3
 8000fde:	23fa      	movs	r3, #250	; 0xfa
 8000fe0:	0099      	lsls	r1, r3, #2
 8000fe2:	0010      	movs	r0, r2
 8000fe4:	f7ff f890 	bl	8000108 <__udivsi3>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	001a      	movs	r2, r3
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	801a      	strh	r2, [r3, #0]
	return val;
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	881b      	ldrh	r3, [r3, #0]
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	2000006c 	.word	0x2000006c
 8001000:	20000068 	.word	0x20000068

08001004 <getRealUv>:

static uint16_t getRealUv(void) {
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
	uint8_t raw = readRegister(UV_TRIP);
 800100a:	1dfc      	adds	r4, r7, #7
 800100c:	200a      	movs	r0, #10
 800100e:	f000 f8df 	bl	80011d0 <readRegister>
 8001012:	0003      	movs	r3, r0
 8001014:	7023      	strb	r3, [r4, #0]
	uint16_t val =(uint16_t)((((uint32_t)(raw<<4)|(uint32_t)(1<<12))*(uint32_t)adcGain+(uint32_t)(adcOffset*1000))/(uint32_t)1000);
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	001a      	movs	r2, r3
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	015b      	lsls	r3, r3, #5
 8001022:	431a      	orrs	r2, r3
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <getRealUv+0x58>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4353      	muls	r3, r2
 800102a:	0019      	movs	r1, r3
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <getRealUv+0x5c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	0013      	movs	r3, r2
 8001032:	015b      	lsls	r3, r3, #5
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	189b      	adds	r3, r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	18ca      	adds	r2, r1, r3
 800103e:	23fa      	movs	r3, #250	; 0xfa
 8001040:	0099      	lsls	r1, r3, #2
 8001042:	0010      	movs	r0, r2
 8001044:	f7ff f860 	bl	8000108 <__udivsi3>
 8001048:	0003      	movs	r3, r0
 800104a:	001a      	movs	r2, r3
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	801a      	strh	r2, [r3, #0]
	return val;
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	881b      	ldrh	r3, [r3, #0]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b003      	add	sp, #12
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	2000006c 	.word	0x2000006c
 8001060:	20000068 	.word	0x20000068

08001064 <setCurrentProtection>:


static void setCurrentProtection(threshold range,
        short_circuit_delay_us sc_delay, short_circuit_discharge_mv sc_voltage,
        over_current_delay_ms oc_delay, over_current_discharge_mv oc_voltage ) {
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	0005      	movs	r5, r0
 800106c:	000c      	movs	r4, r1
 800106e:	0010      	movs	r0, r2
 8001070:	0019      	movs	r1, r3
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	1c2a      	adds	r2, r5, #0
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	1dbb      	adds	r3, r7, #6
 800107a:	1c22      	adds	r2, r4, #0
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	1d7b      	adds	r3, r7, #5
 8001080:	1c02      	adds	r2, r0, #0
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	1c0a      	adds	r2, r1, #0
 8001088:	701a      	strb	r2, [r3, #0]
	uint8_t reg = readRegister(PROTECT1) & 0b01100000;
 800108a:	2006      	movs	r0, #6
 800108c:	f000 f8a0 	bl	80011d0 <readRegister>
 8001090:	0003      	movs	r3, r0
 8001092:	0019      	movs	r1, r3
 8001094:	240f      	movs	r4, #15
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2260      	movs	r2, #96	; 0x60
 800109a:	400a      	ands	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
	reg |= range;
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	1939      	adds	r1, r7, r4
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	7809      	ldrb	r1, [r1, #0]
 80010a6:	7812      	ldrb	r2, [r2, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
	reg |= sc_delay;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	1939      	adds	r1, r7, r4
 80010b0:	1dba      	adds	r2, r7, #6
 80010b2:	7809      	ldrb	r1, [r1, #0]
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
	reg |= sc_voltage;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	1939      	adds	r1, r7, r4
 80010be:	1d7a      	adds	r2, r7, #5
 80010c0:	7809      	ldrb	r1, [r1, #0]
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
	writeRegister(PROTECT1, reg);
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	0019      	movs	r1, r3
 80010ce:	2006      	movs	r0, #6
 80010d0:	f000 f864 	bl	800119c <writeRegister>

	reg = readRegister(PROTECT2) & 0b10000000;
 80010d4:	2007      	movs	r0, #7
 80010d6:	f000 f87b 	bl	80011d0 <readRegister>
 80010da:	0003      	movs	r3, r0
 80010dc:	0019      	movs	r1, r3
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	227f      	movs	r2, #127	; 0x7f
 80010e2:	4391      	bics	r1, r2
 80010e4:	000a      	movs	r2, r1
 80010e6:	701a      	strb	r2, [r3, #0]
	reg |= oc_delay;
 80010e8:	193b      	adds	r3, r7, r4
 80010ea:	1939      	adds	r1, r7, r4
 80010ec:	1d3a      	adds	r2, r7, #4
 80010ee:	7809      	ldrb	r1, [r1, #0]
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
	reg |= oc_voltage;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	193a      	adds	r2, r7, r4
 80010fa:	2120      	movs	r1, #32
 80010fc:	1878      	adds	r0, r7, r1
 80010fe:	7811      	ldrb	r1, [r2, #0]
 8001100:	7802      	ldrb	r2, [r0, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
	writeRegister(PROTECT2, reg);
 8001106:	193b      	adds	r3, r7, r4
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	0019      	movs	r1, r3
 800110c:	2007      	movs	r0, #7
 800110e:	f000 f845 	bl	800119c <writeRegister>
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bdb0      	pop	{r4, r5, r7, pc}

0800111a <setOvUvProtection>:

static void setOvUvProtection(under_voltage_delay_s uv_delay, uint8_t uvLimit, over_voltage_delay_s  ov_delay, uint8_t ovLimit) {
 800111a:	b5b0      	push	{r4, r5, r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	0005      	movs	r5, r0
 8001122:	000c      	movs	r4, r1
 8001124:	0010      	movs	r0, r2
 8001126:	0019      	movs	r1, r3
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	1c2a      	adds	r2, r5, #0
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	1c22      	adds	r2, r4, #0
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	1d7b      	adds	r3, r7, #5
 8001136:	1c02      	adds	r2, r0, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	1c0a      	adds	r2, r1, #0
 800113e:	701a      	strb	r2, [r3, #0]
	uint8_t reg = readRegister(PROTECT3) & 0b00001111;
 8001140:	2008      	movs	r0, #8
 8001142:	f000 f845 	bl	80011d0 <readRegister>
 8001146:	0003      	movs	r3, r0
 8001148:	0019      	movs	r1, r3
 800114a:	200f      	movs	r0, #15
 800114c:	183b      	adds	r3, r7, r0
 800114e:	220f      	movs	r2, #15
 8001150:	400a      	ands	r2, r1
 8001152:	701a      	strb	r2, [r3, #0]
	reg |= uv_delay;
 8001154:	183b      	adds	r3, r7, r0
 8001156:	1839      	adds	r1, r7, r0
 8001158:	1dfa      	adds	r2, r7, #7
 800115a:	7809      	ldrb	r1, [r1, #0]
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
	reg |= ov_delay;
 8001162:	183b      	adds	r3, r7, r0
 8001164:	1839      	adds	r1, r7, r0
 8001166:	1d7a      	adds	r2, r7, #5
 8001168:	7809      	ldrb	r1, [r1, #0]
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	701a      	strb	r2, [r3, #0]
	writeRegister(PROTECT3, reg);
 8001170:	183b      	adds	r3, r7, r0
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	0019      	movs	r1, r3
 8001176:	2008      	movs	r0, #8
 8001178:	f000 f810 	bl	800119c <writeRegister>
	writeRegister(UV_TRIP, uvLimit);
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	0019      	movs	r1, r3
 8001182:	200a      	movs	r0, #10
 8001184:	f000 f80a 	bl	800119c <writeRegister>
	writeRegister(OV_TRIP, ovLimit);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	0019      	movs	r1, r3
 800118e:	2009      	movs	r0, #9
 8001190:	f000 f804 	bl	800119c <writeRegister>
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b004      	add	sp, #16
 800119a:	bdb0      	pop	{r4, r5, r7, pc}

0800119c <writeRegister>:

static uint8_t writeRegister(uint8_t reg, uint8_t data) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	0002      	movs	r2, r0
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	1dbb      	adds	r3, r7, #6
 80011aa:	1c0a      	adds	r2, r1, #0
 80011ac:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];
	buf[0]=data;
 80011ae:	210c      	movs	r1, #12
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	1dba      	adds	r2, r7, #6
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	701a      	strb	r2, [r3, #0]
	return bqSendData(reg,buf,1);
 80011b8:	1879      	adds	r1, r7, r1
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2201      	movs	r2, #1
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 f81d 	bl	8001200 <bqSendData>
 80011c6:	0003      	movs	r3, r0
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b004      	add	sp, #16
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <readRegister>:

static uint8_t readRegister(uint8_t reg) {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1]={0};
 80011dc:	240c      	movs	r4, #12
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	bqReadData(reg,buf,1);
 80011e4:	1939      	adds	r1, r7, r4
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2201      	movs	r2, #1
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 f877 	bl	80012e0 <bqReadData>
	return buf[0];
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	781b      	ldrb	r3, [r3, #0]
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b005      	add	sp, #20
 80011fc:	bd90      	pop	{r4, r7, pc}
	...

08001200 <bqSendData>:

static uint8_t bqSendData(uint8_t addr, uint8_t *buffer, uint8_t count) {
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af02      	add	r7, sp, #8
 8001206:	6039      	str	r1, [r7, #0]
 8001208:	0011      	movs	r1, r2
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	1c02      	adds	r2, r0, #0
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	1dbb      	adds	r3, r7, #6
 8001212:	1c0a      	adds	r2, r1, #0
 8001214:	701a      	strb	r2, [r3, #0]
	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, (count+1)
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <bqSendData+0xd8>)
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	1dbb      	adds	r3, r7, #6
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	001a      	movs	r2, r3
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <bqSendData+0xdc>)
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	049b      	lsls	r3, r3, #18
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	0013      	movs	r3, r2
 800122e:	2200      	movs	r2, #0
 8001230:	2130      	movs	r1, #48	; 0x30
 8001232:	f7ff fa8d 	bl	8000750 <LL_I2C_HandleTransfer>
			, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_TXIS(bqI2C)));
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <bqSendData+0xd8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff fa67 	bl	8000710 <LL_I2C_IsActiveFlag_NACK>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d106      	bne.n	8001254 <bqSendData+0x54>
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <bqSendData+0xd8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff fa3e 	bl	80006cc <LL_I2C_IsActiveFlag_TXIS>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d0f1      	beq.n	8001238 <bqSendData+0x38>
	if(1==LL_I2C_IsActiveFlag_TXIS(bqI2C)) {
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <bqSendData+0xd8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fa37 	bl	80006cc <LL_I2C_IsActiveFlag_TXIS>
 800125e:	0003      	movs	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d12c      	bne.n	80012be <bqSendData+0xbe>
		LL_I2C_TransmitData8(bqI2C, addr);
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <bqSendData+0xd8>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	0019      	movs	r1, r3
 800126e:	0010      	movs	r0, r2
 8001270:	f7ff fa9f 	bl	80007b2 <LL_I2C_TransmitData8>
		for(uint8_t cnt=0;cnt<count;cnt++) {
 8001274:	230f      	movs	r3, #15
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e017      	b.n	80012ae <bqSendData+0xae>
			while(0==LL_I2C_IsActiveFlag_TXIS(bqI2C));
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <bqSendData+0xd8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fa21 	bl	80006cc <LL_I2C_IsActiveFlag_TXIS>
 800128a:	1e03      	subs	r3, r0, #0
 800128c:	d0f8      	beq.n	8001280 <bqSendData+0x80>
			LL_I2C_TransmitData8(bqI2C, buffer[cnt]);
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <bqSendData+0xd8>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	240f      	movs	r4, #15
 8001294:	193b      	adds	r3, r7, r4
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	18d3      	adds	r3, r2, r3
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0019      	movs	r1, r3
 80012a0:	f7ff fa87 	bl	80007b2 <LL_I2C_TransmitData8>
		for(uint8_t cnt=0;cnt<count;cnt++) {
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	3201      	adds	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	230f      	movs	r3, #15
 80012b0:	18fa      	adds	r2, r7, r3
 80012b2:	1dbb      	adds	r3, r7, #6
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3e0      	bcc.n	800127e <bqSendData+0x7e>
 80012bc:	e006      	b.n	80012cc <bqSendData+0xcc>
		}
	} else {
		LL_I2C_ClearFlag_NACK(bqI2C);
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <bqSendData+0xd8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7ff fa35 	bl	8000732 <LL_I2C_ClearFlag_NACK>
		return 0x00;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e000      	b.n	80012ce <bqSendData+0xce>
	}
	return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b005      	add	sp, #20
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	20000064 	.word	0x20000064
 80012dc:	80002000 	.word	0x80002000

080012e0 <bqReadData>:

static uint8_t bqReadData(uint8_t addr, uint8_t *buffer, uint8_t count) {
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	6039      	str	r1, [r7, #0]
 80012e8:	0011      	movs	r1, r2
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	1c02      	adds	r2, r0, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	1dbb      	adds	r3, r7, #6
 80012f2:	1c0a      	adds	r2, r1, #0
 80012f4:	701a      	strb	r2, [r3, #0]
	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE );
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <bqReadData+0x114>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <bqReadData+0x118>)
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	2300      	movs	r3, #0
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	2200      	movs	r2, #0
 8001306:	2130      	movs	r1, #48	; 0x30
 8001308:	f7ff fa22 	bl	8000750 <LL_I2C_HandleTransfer>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_TXIS(bqI2C)));
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <bqReadData+0x114>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff f9fc 	bl	8000710 <LL_I2C_IsActiveFlag_NACK>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d106      	bne.n	800132a <bqReadData+0x4a>
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <bqReadData+0x114>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff f9d3 	bl	80006cc <LL_I2C_IsActiveFlag_TXIS>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d0f1      	beq.n	800130e <bqReadData+0x2e>
	if(1==LL_I2C_IsActiveFlag_TXIS(bqI2C)) {
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <bqReadData+0x114>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff f9cc 	bl	80006cc <LL_I2C_IsActiveFlag_TXIS>
 8001334:	0003      	movs	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d116      	bne.n	8001368 <bqReadData+0x88>
		LL_I2C_TransmitData8(bqI2C, addr);
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <bqReadData+0x114>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0019      	movs	r1, r3
 8001344:	0010      	movs	r0, r2
 8001346:	f7ff fa34 	bl	80007b2 <LL_I2C_TransmitData8>
	} else {
		return 0;
	}

	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, count, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ );
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <bqReadData+0x114>)
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <bqReadData+0x11c>)
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	049b      	lsls	r3, r3, #18
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	0013      	movs	r3, r2
 800135e:	2200      	movs	r2, #0
 8001360:	2130      	movs	r1, #48	; 0x30
 8001362:	f7ff f9f5 	bl	8000750 <LL_I2C_HandleTransfer>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_RXNE(bqI2C)));
 8001366:	e001      	b.n	800136c <bqReadData+0x8c>
		return 0;
 8001368:	2300      	movs	r3, #0
 800136a:	e03e      	b.n	80013ea <bqReadData+0x10a>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_RXNE(bqI2C)));
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <bqReadData+0x114>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff f9cd 	bl	8000710 <LL_I2C_IsActiveFlag_NACK>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d106      	bne.n	8001388 <bqReadData+0xa8>
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <bqReadData+0x114>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff f9b5 	bl	80006ee <LL_I2C_IsActiveFlag_RXNE>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d0f1      	beq.n	800136c <bqReadData+0x8c>
	if(1==LL_I2C_IsActiveFlag_RXNE(bqI2C)) {
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <bqReadData+0x114>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff f9ae 	bl	80006ee <LL_I2C_IsActiveFlag_RXNE>
 8001392:	0003      	movs	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d125      	bne.n	80013e4 <bqReadData+0x104>
		for(uint8_t cnt=0; cnt<count;cnt++) {
 8001398:	230f      	movs	r3, #15
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e018      	b.n	80013d4 <bqReadData+0xf4>
			while(0==LL_I2C_IsActiveFlag_RXNE(bqI2C));
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <bqReadData+0x114>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff f9a0 	bl	80006ee <LL_I2C_IsActiveFlag_RXNE>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d0f8      	beq.n	80013a4 <bqReadData+0xc4>
			buffer[cnt]=LL_I2C_ReceiveData8(bqI2C);
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <bqReadData+0x114>)
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	250f      	movs	r5, #15
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	18d4      	adds	r4, r2, r3
 80013c0:	0008      	movs	r0, r1
 80013c2:	f7ff f9eb 	bl	800079c <LL_I2C_ReceiveData8>
 80013c6:	0003      	movs	r3, r0
 80013c8:	7023      	strb	r3, [r4, #0]
		for(uint8_t cnt=0; cnt<count;cnt++) {
 80013ca:	197b      	adds	r3, r7, r5
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	197b      	adds	r3, r7, r5
 80013d0:	3201      	adds	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	230f      	movs	r3, #15
 80013d6:	18fa      	adds	r2, r7, r3
 80013d8:	1dbb      	adds	r3, r7, #6
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d3df      	bcc.n	80013a2 <bqReadData+0xc2>
 80013e2:	e001      	b.n	80013e8 <bqReadData+0x108>
		}
	} else {
		return 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e000      	b.n	80013ea <bqReadData+0x10a>
	}
	return 1;
 80013e8:	2301      	movs	r3, #1
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bdb0      	pop	{r4, r5, r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	20000064 	.word	0x20000064
 80013f8:	80002000 	.word	0x80002000
 80013fc:	80002400 	.word	0x80002400

08001400 <bqHandler>:

void bqHandler(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	ticks++;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <bqHandler+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	4b02      	ldr	r3, [pc, #8]	; (8001414 <bqHandler+0x14>)
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000007c 	.word	0x2000007c

08001418 <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <LL_GetUID_Word0+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	1ff80050 	.word	0x1ff80050

0800142c <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 0x04U))));
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <LL_GetUID_Word1+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	1ff80054 	.word	0x1ff80054

08001440 <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 0x14U))));
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <LL_GetUID_Word2+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	1ff80064 	.word	0x1ff80064

08001454 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	2220      	movs	r2, #32
 8001462:	4013      	ands	r3, r2
 8001464:	2b20      	cmp	r3, #32
 8001466:	d101      	bne.n	800146c <LL_USART_IsActiveFlag_RXNE+0x18>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <LL_USART_IsActiveFlag_RXNE+0x1a>
 800146c:	2300      	movs	r3, #0
}
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}

08001476 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	4013      	ands	r3, r2
 8001486:	2b40      	cmp	r3, #64	; 0x40
 8001488:	d101      	bne.n	800148e <LL_USART_IsActiveFlag_TC+0x18>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <LL_USART_IsActiveFlag_TC+0x1a>
 800148e:	2300      	movs	r3, #0
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}

08001498 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	d101      	bne.n	80014b0 <LL_USART_IsActiveFlag_TXE+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_USART_IsActiveFlag_TXE+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b002      	add	sp, #8
 80014b8:	bd80      	pop	{r7, pc}

080014ba <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	b2db      	uxtb	r3, r3
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	000a      	movs	r2, r1
 80014da:	1cfb      	adds	r3, r7, #3
 80014dc:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 80014de:	1cfb      	adds	r3, r7, #3
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <commInit>:
static void sendBuffer(uint8_t * buffer, uint8_t size);
static void sendText(uint8_t * buffer);

#define mmio32(x)   (*(volatile unsigned long *)(x))

void commInit(USART_TypeDef *USARTx, condensed_afe_data * afeData, afe_config *afeConfig) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	port = USARTx;
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <commInit+0x3c>)
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]
	data = afeData;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <commInit+0x40>)
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	601a      	str	r2, [r3, #0]
	config = afeConfig;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <commInit+0x44>)
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	601a      	str	r2, [r3, #0]
	xsprintf((char*)commBuffer,"+++\r\n");
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <commInit+0x48>)
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <commInit+0x4c>)
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f001 f92d 	bl	8002774 <xsprintf>
	sendText(commBuffer);
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <commInit+0x4c>)
 800151c:	0018      	movs	r0, r3
 800151e:	f000 f9e3 	bl	80018e8 <sendText>
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	20000088 	.word	0x20000088
 8001530:	20000080 	.word	0x20000080
 8001534:	20000084 	.word	0x20000084
 8001538:	08003544 	.word	0x08003544
 800153c:	2000008c 	.word	0x2000008c

08001540 <commAct>:

void commAct(void) {
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af02      	add	r7, sp, #8
	uint8_t inCh;
	if(LL_USART_IsActiveFlag_RXNE(port)) {
 8001546:	4bd5      	ldr	r3, [pc, #852]	; (800189c <commAct+0x35c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff ff82 	bl	8001454 <LL_USART_IsActiveFlag_RXNE>
 8001550:	1e03      	subs	r3, r0, #0
 8001552:	d100      	bne.n	8001556 <commAct+0x16>
 8001554:	e19a      	b.n	800188c <commAct+0x34c>
			inCh = LL_USART_ReceiveData8(port);
 8001556:	4bd1      	ldr	r3, [pc, #836]	; (800189c <commAct+0x35c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	1cfc      	adds	r4, r7, #3
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff ffac 	bl	80014ba <LL_USART_ReceiveData8>
 8001562:	0003      	movs	r3, r0
 8001564:	7023      	strb	r3, [r4, #0]
		switch(inCh) {
 8001566:	1cfb      	adds	r3, r7, #3
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	3b62      	subs	r3, #98	; 0x62
 800156c:	2b11      	cmp	r3, #17
 800156e:	d900      	bls.n	8001572 <commAct+0x32>
 8001570:	e147      	b.n	8001802 <commAct+0x2c2>
 8001572:	009a      	lsls	r2, r3, #2
 8001574:	4bca      	ldr	r3, [pc, #808]	; (80018a0 <commAct+0x360>)
 8001576:	18d3      	adds	r3, r2, r3
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	469f      	mov	pc, r3
		case 'i': // info
			xsprintf((char*)commBuffer,"\r\n+\r\n");
 800157c:	4ac9      	ldr	r2, [pc, #804]	; (80018a4 <commAct+0x364>)
 800157e:	4bca      	ldr	r3, [pc, #808]	; (80018a8 <commAct+0x368>)
 8001580:	0011      	movs	r1, r2
 8001582:	0018      	movs	r0, r3
 8001584:	f001 f8f6 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 8001588:	4bc7      	ldr	r3, [pc, #796]	; (80018a8 <commAct+0x368>)
 800158a:	0018      	movs	r0, r3
 800158c:	f000 f9ac 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%04X%04X%04X\r\n",
 8001590:	f7ff ff56 	bl	8001440 <LL_GetUID_Word2>
 8001594:	0004      	movs	r4, r0
 8001596:	f7ff ff49 	bl	800142c <LL_GetUID_Word1>
 800159a:	0005      	movs	r5, r0
 800159c:	f7ff ff3c 	bl	8001418 <LL_GetUID_Word0>
 80015a0:	0003      	movs	r3, r0
 80015a2:	49c2      	ldr	r1, [pc, #776]	; (80018ac <commAct+0x36c>)
 80015a4:	48c0      	ldr	r0, [pc, #768]	; (80018a8 <commAct+0x368>)
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	002b      	movs	r3, r5
 80015aa:	0022      	movs	r2, r4
 80015ac:	f001 f8e2 	bl	8002774 <xsprintf>
					LL_GetUID_Word2(),LL_GetUID_Word1(),LL_GetUID_Word0());
			sendText(commBuffer);
 80015b0:	4bbd      	ldr	r3, [pc, #756]	; (80018a8 <commAct+0x368>)
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 f998 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->pack_max_voltage);
 80015b8:	4bbd      	ldr	r3, [pc, #756]	; (80018b0 <commAct+0x370>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	8a1b      	ldrh	r3, [r3, #16]
 80015be:	001a      	movs	r2, r3
 80015c0:	49bc      	ldr	r1, [pc, #752]	; (80018b4 <commAct+0x374>)
 80015c2:	4bb9      	ldr	r3, [pc, #740]	; (80018a8 <commAct+0x368>)
 80015c4:	0018      	movs	r0, r3
 80015c6:	f001 f8d5 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80015ca:	4bb7      	ldr	r3, [pc, #732]	; (80018a8 <commAct+0x368>)
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f98b 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->cell_bal_voltage);
 80015d2:	4bb7      	ldr	r3, [pc, #732]	; (80018b0 <commAct+0x370>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	8b1b      	ldrh	r3, [r3, #24]
 80015d8:	001a      	movs	r2, r3
 80015da:	49b6      	ldr	r1, [pc, #728]	; (80018b4 <commAct+0x374>)
 80015dc:	4bb2      	ldr	r3, [pc, #712]	; (80018a8 <commAct+0x368>)
 80015de:	0018      	movs	r0, r3
 80015e0:	f001 f8c8 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80015e4:	4bb0      	ldr	r3, [pc, #704]	; (80018a8 <commAct+0x368>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 f97e 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->chargeCurrent_mA);
 80015ec:	4bb0      	ldr	r3, [pc, #704]	; (80018b0 <commAct+0x370>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	220a      	movs	r2, #10
 80015f2:	5e9b      	ldrsh	r3, [r3, r2]
 80015f4:	001a      	movs	r2, r3
 80015f6:	49af      	ldr	r1, [pc, #700]	; (80018b4 <commAct+0x374>)
 80015f8:	4bab      	ldr	r3, [pc, #684]	; (80018a8 <commAct+0x368>)
 80015fa:	0018      	movs	r0, r3
 80015fc:	f001 f8ba 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 8001600:	4ba9      	ldr	r3, [pc, #676]	; (80018a8 <commAct+0x368>)
 8001602:	0018      	movs	r0, r3
 8001604:	f000 f970 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->cell_max_voltage);
 8001608:	4ba9      	ldr	r3, [pc, #676]	; (80018b0 <commAct+0x370>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	8a9b      	ldrh	r3, [r3, #20]
 800160e:	001a      	movs	r2, r3
 8001610:	49a8      	ldr	r1, [pc, #672]	; (80018b4 <commAct+0x374>)
 8001612:	4ba5      	ldr	r3, [pc, #660]	; (80018a8 <commAct+0x368>)
 8001614:	0018      	movs	r0, r3
 8001616:	f001 f8ad 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 800161a:	4ba3      	ldr	r3, [pc, #652]	; (80018a8 <commAct+0x368>)
 800161c:	0018      	movs	r0, r3
 800161e:	f000 f963 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%u\r\n",config->cell_min_voltage);
 8001622:	4ba3      	ldr	r3, [pc, #652]	; (80018b0 <commAct+0x370>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	8adb      	ldrh	r3, [r3, #22]
 8001628:	001a      	movs	r2, r3
 800162a:	49a2      	ldr	r1, [pc, #648]	; (80018b4 <commAct+0x374>)
 800162c:	4b9e      	ldr	r3, [pc, #632]	; (80018a8 <commAct+0x368>)
 800162e:	0018      	movs	r0, r3
 8001630:	f001 f8a0 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 8001634:	4b9c      	ldr	r3, [pc, #624]	; (80018a8 <commAct+0x368>)
 8001636:	0018      	movs	r0, r3
 8001638:	f000 f956 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"*\r\n");
 800163c:	4a9e      	ldr	r2, [pc, #632]	; (80018b8 <commAct+0x378>)
 800163e:	4b9a      	ldr	r3, [pc, #616]	; (80018a8 <commAct+0x368>)
 8001640:	0011      	movs	r1, r2
 8001642:	0018      	movs	r0, r3
 8001644:	f001 f896 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 8001648:	4b97      	ldr	r3, [pc, #604]	; (80018a8 <commAct+0x368>)
 800164a:	0018      	movs	r0, r3
 800164c:	f000 f94c 	bl	80018e8 <sendText>
			break;
 8001650:	e11f      	b.n	8001892 <commAct+0x352>
		case 's': // status
			xsprintf((char*)commBuffer,"\r\n+\r\n");
 8001652:	4a94      	ldr	r2, [pc, #592]	; (80018a4 <commAct+0x364>)
 8001654:	4b94      	ldr	r3, [pc, #592]	; (80018a8 <commAct+0x368>)
 8001656:	0011      	movs	r1, r2
 8001658:	0018      	movs	r0, r3
 800165a:	f001 f88b 	bl	8002774 <xsprintf>
			for(int cnt=0;cnt<15;cnt++) {
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	e01a      	b.n	800169a <commAct+0x15a>
				if(config->enabled_cells&(1<<cnt)) {
 8001664:	4b92      	ldr	r3, [pc, #584]	; (80018b0 <commAct+0x370>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	001a      	movs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	411a      	asrs	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	2201      	movs	r2, #1
 8001674:	4013      	ands	r3, r2
 8001676:	d00d      	beq.n	8001694 <commAct+0x154>
					xsprintf((char*)commBuffer,"%u:%u\r\n",cnt,data->cells[cnt]);
 8001678:	4b90      	ldr	r3, [pc, #576]	; (80018bc <commAct+0x37c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	0052      	lsls	r2, r2, #1
 8001680:	5ad3      	ldrh	r3, [r2, r3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	498e      	ldr	r1, [pc, #568]	; (80018c0 <commAct+0x380>)
 8001686:	4888      	ldr	r0, [pc, #544]	; (80018a8 <commAct+0x368>)
 8001688:	f001 f874 	bl	8002774 <xsprintf>
					sendText(commBuffer);
 800168c:	4b86      	ldr	r3, [pc, #536]	; (80018a8 <commAct+0x368>)
 800168e:	0018      	movs	r0, r3
 8001690:	f000 f92a 	bl	80018e8 <sendText>
			for(int cnt=0;cnt<15;cnt++) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3301      	adds	r3, #1
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0e      	cmp	r3, #14
 800169e:	dde1      	ble.n	8001664 <commAct+0x124>
				}

			}
			xsprintf((char*)commBuffer,"%u\r\n",data->total_voltage);
 80016a0:	4b86      	ldr	r3, [pc, #536]	; (80018bc <commAct+0x37c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	8bdb      	ldrh	r3, [r3, #30]
 80016a6:	001a      	movs	r2, r3
 80016a8:	4982      	ldr	r1, [pc, #520]	; (80018b4 <commAct+0x374>)
 80016aa:	4b7f      	ldr	r3, [pc, #508]	; (80018a8 <commAct+0x368>)
 80016ac:	0018      	movs	r0, r3
 80016ae:	f001 f861 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80016b2:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <commAct+0x368>)
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 f917 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%d\r\n",data->system_current);
 80016ba:	4b80      	ldr	r3, [pc, #512]	; (80018bc <commAct+0x37c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2224      	movs	r2, #36	; 0x24
 80016c0:	5e9b      	ldrsh	r3, [r3, r2]
 80016c2:	001a      	movs	r2, r3
 80016c4:	497f      	ldr	r1, [pc, #508]	; (80018c4 <commAct+0x384>)
 80016c6:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <commAct+0x368>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f001 f853 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80016ce:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <commAct+0x368>)
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 f909 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%d\r\n",data->inst_power);
 80016d6:	4b79      	ldr	r3, [pc, #484]	; (80018bc <commAct+0x37c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2228      	movs	r2, #40	; 0x28
 80016dc:	5e9b      	ldrsh	r3, [r3, r2]
 80016de:	001a      	movs	r2, r3
 80016e0:	4978      	ldr	r1, [pc, #480]	; (80018c4 <commAct+0x384>)
 80016e2:	4b71      	ldr	r3, [pc, #452]	; (80018a8 <commAct+0x368>)
 80016e4:	0018      	movs	r0, r3
 80016e6:	f001 f845 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <commAct+0x368>)
 80016ec:	0018      	movs	r0, r3
 80016ee:	f000 f8fb 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%d\r\n",data->total_power);
 80016f2:	4b72      	ldr	r3, [pc, #456]	; (80018bc <commAct+0x37c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4972      	ldr	r1, [pc, #456]	; (80018c4 <commAct+0x384>)
 80016fc:	486a      	ldr	r0, [pc, #424]	; (80018a8 <commAct+0x368>)
 80016fe:	001a      	movs	r2, r3
 8001700:	0023      	movs	r3, r4
 8001702:	f001 f837 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 8001706:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <commAct+0x368>)
 8001708:	0018      	movs	r0, r3
 800170a:	f000 f8ed 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%d\r\n",data->die_temperature);
 800170e:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <commAct+0x37c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a1a      	ldr	r2, [r3, #32]
 8001714:	496b      	ldr	r1, [pc, #428]	; (80018c4 <commAct+0x384>)
 8001716:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <commAct+0x368>)
 8001718:	0018      	movs	r0, r3
 800171a:	f001 f82b 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 800171e:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <commAct+0x368>)
 8001720:	0018      	movs	r0, r3
 8001722:	f000 f8e1 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%02X\r\n",data->status_reg);
 8001726:	4b65      	ldr	r3, [pc, #404]	; (80018bc <commAct+0x37c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2226      	movs	r2, #38	; 0x26
 800172c:	5c9b      	ldrb	r3, [r3, r2]
 800172e:	001a      	movs	r2, r3
 8001730:	4965      	ldr	r1, [pc, #404]	; (80018c8 <commAct+0x388>)
 8001732:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <commAct+0x368>)
 8001734:	0018      	movs	r0, r3
 8001736:	f001 f81d 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 800173a:	4b5b      	ldr	r3, [pc, #364]	; (80018a8 <commAct+0x368>)
 800173c:	0018      	movs	r0, r3
 800173e:	f000 f8d3 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%d\r\n",data->outStatus);
 8001742:	4b5e      	ldr	r3, [pc, #376]	; (80018bc <commAct+0x37c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	223e      	movs	r2, #62	; 0x3e
 8001748:	5c9b      	ldrb	r3, [r3, r2]
 800174a:	001a      	movs	r2, r3
 800174c:	495d      	ldr	r1, [pc, #372]	; (80018c4 <commAct+0x384>)
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <commAct+0x368>)
 8001750:	0018      	movs	r0, r3
 8001752:	f001 f80f 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 8001756:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <commAct+0x368>)
 8001758:	0018      	movs	r0, r3
 800175a:	f000 f8c5 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"%d %d\r\n",data->balStatus, data->balTarget);
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <commAct+0x37c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	223a      	movs	r2, #58	; 0x3a
 8001764:	5c9b      	ldrb	r3, [r3, r2]
 8001766:	001a      	movs	r2, r3
 8001768:	4b54      	ldr	r3, [pc, #336]	; (80018bc <commAct+0x37c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800176e:	4957      	ldr	r1, [pc, #348]	; (80018cc <commAct+0x38c>)
 8001770:	484d      	ldr	r0, [pc, #308]	; (80018a8 <commAct+0x368>)
 8001772:	f000 ffff 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 8001776:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <commAct+0x368>)
 8001778:	0018      	movs	r0, r3
 800177a:	f000 f8b5 	bl	80018e8 <sendText>
			xsprintf((char*)commBuffer,"*\r\n");
 800177e:	4a4e      	ldr	r2, [pc, #312]	; (80018b8 <commAct+0x378>)
 8001780:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <commAct+0x368>)
 8001782:	0011      	movs	r1, r2
 8001784:	0018      	movs	r0, r3
 8001786:	f000 fff5 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <commAct+0x368>)
 800178c:	0018      	movs	r0, r3
 800178e:	f000 f8ab 	bl	80018e8 <sendText>
			break;
 8001792:	e07e      	b.n	8001892 <commAct+0x352>
		case 'e' : // enable
			bqEnableAll();
 8001794:	f7ff f918 	bl	80009c8 <bqEnableAll>
			xsprintf((char*)commBuffer,"*\r\n");
 8001798:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <commAct+0x378>)
 800179a:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <commAct+0x368>)
 800179c:	0011      	movs	r1, r2
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 ffe8 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80017a4:	4b40      	ldr	r3, [pc, #256]	; (80018a8 <commAct+0x368>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 f89e 	bl	80018e8 <sendText>
			break;
 80017ac:	e071      	b.n	8001892 <commAct+0x352>
		case 'd' : // disable
			bqDisableAll();
 80017ae:	f7ff f8eb 	bl	8000988 <bqDisableAll>
			xsprintf((char*)commBuffer,"*\r\n");
 80017b2:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <commAct+0x378>)
 80017b4:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <commAct+0x368>)
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f000 ffdb 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <commAct+0x368>)
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 f891 	bl	80018e8 <sendText>
			break;
 80017c6:	e064      	b.n	8001892 <commAct+0x352>
		case 'r' : // reset
			bqResetStatus();
 80017c8:	f7ff f91e 	bl	8000a08 <bqResetStatus>
			xsprintf((char*)commBuffer,"*\r\n");
 80017cc:	4a3a      	ldr	r2, [pc, #232]	; (80018b8 <commAct+0x378>)
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <commAct+0x368>)
 80017d0:	0011      	movs	r1, r2
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 ffce 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80017d8:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <commAct+0x368>)
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 f884 	bl	80018e8 <sendText>
			break;
 80017e0:	e057      	b.n	8001892 <commAct+0x352>
		case 'b' : // balance start
			data->balStatus = 1;
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <commAct+0x37c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	223a      	movs	r2, #58	; 0x3a
 80017e8:	2101      	movs	r1, #1
 80017ea:	5499      	strb	r1, [r3, r2]
			xsprintf((char*)commBuffer,"*\r\n");
 80017ec:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <commAct+0x378>)
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <commAct+0x368>)
 80017f0:	0011      	movs	r1, r2
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 ffbe 	bl	8002774 <xsprintf>
			sendText(commBuffer);
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <commAct+0x368>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 f874 	bl	80018e8 <sendText>
			break;
 8001800:	e047      	b.n	8001892 <commAct+0x352>
		default:
			if((inCh>='a') && (inCh <= 'z')) {
 8001802:	1cfb      	adds	r3, r7, #3
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b60      	cmp	r3, #96	; 0x60
 8001808:	d942      	bls.n	8001890 <commAct+0x350>
 800180a:	1cfb      	adds	r3, r7, #3
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b7a      	cmp	r3, #122	; 0x7a
 8001810:	d83e      	bhi.n	8001890 <commAct+0x350>
				xsprintf((char*)commBuffer,"i - system info\r\n");
 8001812:	4a2f      	ldr	r2, [pc, #188]	; (80018d0 <commAct+0x390>)
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <commAct+0x368>)
 8001816:	0011      	movs	r1, r2
 8001818:	0018      	movs	r0, r3
 800181a:	f000 ffab 	bl	8002774 <xsprintf>
				sendText(commBuffer);
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <commAct+0x368>)
 8001820:	0018      	movs	r0, r3
 8001822:	f000 f861 	bl	80018e8 <sendText>
				xsprintf((char*)commBuffer,"s - battery status\r\n");
 8001826:	4a2b      	ldr	r2, [pc, #172]	; (80018d4 <commAct+0x394>)
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <commAct+0x368>)
 800182a:	0011      	movs	r1, r2
 800182c:	0018      	movs	r0, r3
 800182e:	f000 ffa1 	bl	8002774 <xsprintf>
				sendText(commBuffer);
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <commAct+0x368>)
 8001834:	0018      	movs	r0, r3
 8001836:	f000 f857 	bl	80018e8 <sendText>
				xsprintf((char*)commBuffer,"e - battery enable\r\n");
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <commAct+0x398>)
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <commAct+0x368>)
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f000 ff97 	bl	8002774 <xsprintf>
				sendText(commBuffer);
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <commAct+0x368>)
 8001848:	0018      	movs	r0, r3
 800184a:	f000 f84d 	bl	80018e8 <sendText>
				xsprintf((char*)commBuffer,"d - battery disable\r\n");
 800184e:	4a23      	ldr	r2, [pc, #140]	; (80018dc <commAct+0x39c>)
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <commAct+0x368>)
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f000 ff8d 	bl	8002774 <xsprintf>
				sendText(commBuffer);
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <commAct+0x368>)
 800185c:	0018      	movs	r0, r3
 800185e:	f000 f843 	bl	80018e8 <sendText>
				xsprintf((char*)commBuffer,"r - error reset\r\n");
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <commAct+0x3a0>)
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <commAct+0x368>)
 8001866:	0011      	movs	r1, r2
 8001868:	0018      	movs	r0, r3
 800186a:	f000 ff83 	bl	8002774 <xsprintf>
				sendText(commBuffer);
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <commAct+0x368>)
 8001870:	0018      	movs	r0, r3
 8001872:	f000 f839 	bl	80018e8 <sendText>
				xsprintf((char*)commBuffer,"b - balance start\r\n");
 8001876:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <commAct+0x3a4>)
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <commAct+0x368>)
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f000 ff79 	bl	8002774 <xsprintf>
				sendText(commBuffer);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <commAct+0x368>)
 8001884:	0018      	movs	r0, r3
 8001886:	f000 f82f 	bl	80018e8 <sendText>
			}
			break;
 800188a:	e001      	b.n	8001890 <commAct+0x350>
		}
	}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	e000      	b.n	8001892 <commAct+0x352>
			break;
 8001890:	46c0      	nop			; (mov r8, r8)
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20000088 	.word	0x20000088
 80018a0:	080036f8 	.word	0x080036f8
 80018a4:	0800354c 	.word	0x0800354c
 80018a8:	2000008c 	.word	0x2000008c
 80018ac:	08003554 	.word	0x08003554
 80018b0:	20000084 	.word	0x20000084
 80018b4:	08003564 	.word	0x08003564
 80018b8:	0800356c 	.word	0x0800356c
 80018bc:	20000080 	.word	0x20000080
 80018c0:	08003570 	.word	0x08003570
 80018c4:	08003578 	.word	0x08003578
 80018c8:	08003580 	.word	0x08003580
 80018cc:	08003588 	.word	0x08003588
 80018d0:	08003590 	.word	0x08003590
 80018d4:	080035a4 	.word	0x080035a4
 80018d8:	080035bc 	.word	0x080035bc
 80018dc:	080035d4 	.word	0x080035d4
 80018e0:	080035ec 	.word	0x080035ec
 80018e4:	08003600 	.word	0x08003600

080018e8 <sendText>:

static void sendText(uint8_t * buffer) {
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	uint8_t cnt=0;
 80018f0:	230f      	movs	r3, #15
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
	while(0!=buffer[cnt]) {
 80018f8:	e017      	b.n	800192a <sendText+0x42>
		while(0==LL_USART_IsActiveFlag_TXE(port));
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <sendText+0x6c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff fdc9 	bl	8001498 <LL_USART_IsActiveFlag_TXE>
 8001906:	1e03      	subs	r3, r0, #0
 8001908:	d0f8      	beq.n	80018fc <sendText+0x14>
		LL_USART_TransmitData8(port, buffer[cnt]);
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <sendText+0x6c>)
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	240f      	movs	r4, #15
 8001910:	193b      	adds	r3, r7, r4
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	18d3      	adds	r3, r2, r3
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	0019      	movs	r1, r3
 800191c:	f7ff fdd8 	bl	80014d0 <LL_USART_TransmitData8>
		cnt++;
 8001920:	193b      	adds	r3, r7, r4
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	193b      	adds	r3, r7, r4
 8001926:	3201      	adds	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
	while(0!=buffer[cnt]) {
 800192a:	230f      	movs	r3, #15
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	18d3      	adds	r3, r2, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1df      	bne.n	80018fa <sendText+0x12>
	}
	while(0==LL_USART_IsActiveFlag_TC(port));
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <sendText+0x6c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff fd98 	bl	8001476 <LL_USART_IsActiveFlag_TC>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d0f8      	beq.n	800193c <sendText+0x54>
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b005      	add	sp, #20
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	20000088 	.word	0x20000088

08001958 <LL_I2C_EnableClockStretching>:
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <LL_I2C_EnableClockStretching+0x1c>)
 8001966:	401a      	ands	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}
 8001974:	fffdffff 	.word	0xfffdffff

08001978 <LL_I2C_DisableGeneralCall>:
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a03      	ldr	r2, [pc, #12]	; (8001994 <LL_I2C_DisableGeneralCall+0x1c>)
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}
 8001994:	fff7ffff 	.word	0xfff7ffff

08001998 <LL_I2C_SetOwnAddress2>:
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <LL_I2C_SetOwnAddress2+0x28>)
 80019aa:	401a      	ands	r2, r3
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	431a      	orrs	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	60da      	str	r2, [r3, #12]
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b004      	add	sp, #16
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	fffff801 	.word	0xfffff801

080019c4 <LL_I2C_DisableOwnAddress2>:
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a03      	ldr	r2, [pc, #12]	; (80019e0 <LL_I2C_DisableOwnAddress2+0x1c>)
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	ffff7fff 	.word	0xffff7fff

080019e4 <LL_I2C_EnableAutoEndMode>:
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0492      	lsls	r2, r2, #18
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b002      	add	sp, #8
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <LL_RCC_MSI_Enable+0x18>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <LL_RCC_MSI_Enable+0x18>)
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	0049      	lsls	r1, r1, #1
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000

08001a20 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <LL_RCC_MSI_IsReady+0x24>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d101      	bne.n	8001a3a <LL_RCC_MSI_IsReady+0x1a>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <LL_RCC_MSI_IsReady+0x1c>
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	40021000 	.word	0x40021000

08001a48 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <LL_RCC_MSI_SetRange+0x24>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <LL_RCC_MSI_SetRange+0x28>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <LL_RCC_MSI_SetRange+0x24>)
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b002      	add	sp, #8
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	ffff1fff 	.word	0xffff1fff

08001a74 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	0a19      	lsrs	r1, r3, #8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	061a      	lsls	r2, r3, #24
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40021000 	.word	0x40021000

08001a9c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <LL_RCC_SetSysClkSource+0x24>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	4393      	bics	r3, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <LL_RCC_SetSysClkSource+0x24>)
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]
}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b002      	add	sp, #8
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <LL_RCC_GetSysClkSource+0x14>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	220c      	movs	r2, #12
 8001ace:	4013      	ands	r3, r2
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40021000 	.word	0x40021000

08001adc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <LL_RCC_SetAHBPrescaler+0x24>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	22f0      	movs	r2, #240	; 0xf0
 8001aea:	4393      	bics	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <LL_RCC_SetAHBPrescaler+0x24>)
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]
}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b002      	add	sp, #8
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	40021000 	.word	0x40021000

08001b04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	fffff8ff 	.word	0xfffff8ff

08001b30 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <LL_RCC_SetAPB2Prescaler+0x28>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	40021000 	.word	0x40021000
 8001b58:	ffffc7ff 	.word	0xffffc7ff

08001b5c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	0c12      	lsrs	r2, r2, #16
 8001b6c:	43d2      	mvns	r2, r2
 8001b6e:	401a      	ands	r2, r3
 8001b70:	0011      	movs	r1, r2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	0c1a      	lsrs	r2, r3, #16
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40021000 	.word	0x40021000

08001b8c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <LL_RCC_SetI2CClockSource+0x34>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	0911      	lsrs	r1, r2, #4
 8001b9c:	22ff      	movs	r2, #255	; 0xff
 8001b9e:	0312      	lsls	r2, r2, #12
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	43d2      	mvns	r2, r2
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	011a      	lsls	r2, r3, #4
 8001bac:	23ff      	movs	r3, #255	; 0xff
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <LL_RCC_SetI2CClockSource+0x34>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <LL_APB1_GRP1_EnableClock+0x28>)
 8001bce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <LL_APB1_GRP1_EnableClock+0x28>)
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <LL_APB1_GRP1_EnableClock+0x28>)
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4013      	ands	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b004      	add	sp, #16
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <LL_APB2_GRP1_EnableClock+0x28>)
 8001bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <LL_APB2_GRP1_EnableClock+0x28>)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <LL_APB2_GRP1_EnableClock+0x28>)
 8001c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b004      	add	sp, #16
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b004      	add	sp, #16
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <LL_FLASH_SetLatency+0x24>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <LL_FLASH_SetLatency+0x24>)
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	40022000 	.word	0x40022000

08001c70 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <LL_FLASH_GetLatency+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40022000 	.word	0x40022000

08001c88 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	ffffe7ff 	.word	0xffffe7ff

08001cb4 <LL_USART_Enable>:
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <LL_USART_DisableOverrunDetect>:
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	0152      	lsls	r2, r2, #5
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <LL_USART_ConfigAsyncMode>:
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <LL_USART_ConfigAsyncMode+0x2c>)
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	222a      	movs	r2, #42	; 0x2a
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	609a      	str	r2, [r3, #8]
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	ffffb7ff 	.word	0xffffb7ff

08001d20 <LL_USART_DisableDMADeactOnRxErr>:
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a03      	ldr	r2, [pc, #12]	; (8001d3c <LL_USART_DisableDMADeactOnRxErr+0x1c>)
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	ffffdfff 	.word	0xffffdfff

08001d40 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4013      	ands	r3, r2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	425a      	negs	r2, r3
 8001d58:	4153      	adcs	r3, r2
 8001d5a:	b2db      	uxtb	r3, r3
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	619a      	str	r2, [r3, #24]
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff ff29 	bl	8001bf0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	055b      	lsls	r3, r3, #21
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff ff0e 	bl	8001bc4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da8:	f000 f8aa 	bl	8001f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dac:	f000 f9fa 	bl	80021a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001db0:	f000 f8f0 	bl	8001f94 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001db4:	f000 f976 	bl	80020a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  afeConfig.enabled_cells=0b00010111;
 8001db8:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <main+0x14c>)
 8001dba:	2217      	movs	r2, #23
 8001dbc:	801a      	strh	r2, [r3, #0]
  // current limit settings
  afeConfig.range = threshold_upper;
 8001dbe:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <main+0x14c>)
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	709a      	strb	r2, [r3, #2]
  afeConfig.sc_delay = scd_400_us;
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <main+0x14c>)
 8001dc6:	2218      	movs	r2, #24
 8001dc8:	70da      	strb	r2, [r3, #3]
  afeConfig.sc_voltage=scd_44_22_mv;
 8001dca:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <main+0x14c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	711a      	strb	r2, [r3, #4]
  afeConfig.oc_delay=ocd_8_ms;
 8001dd0:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <main+0x14c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	715a      	strb	r2, [r3, #5]
  afeConfig.oc_voltage=ocd_17_8_mv;
 8001dd6:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <main+0x14c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	719a      	strb	r2, [r3, #6]
  afeConfig.shuntValue=5; // 5 mOhms
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <main+0x14c>)
 8001dde:	2205      	movs	r2, #5
 8001de0:	811a      	strh	r2, [r3, #8]
  afeConfig.chargeCurrent_mA = 1500;
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <main+0x14c>)
 8001de4:	4a3f      	ldr	r2, [pc, #252]	; (8001ee4 <main+0x150>)
 8001de6:	815a      	strh	r2, [r3, #10]

  // voltage limit settings
  afeConfig.uv_delay=uvd_4_s;
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <main+0x14c>)
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	731a      	strb	r2, [r3, #12]
  afeConfig.uvLimit=0xFF;
 8001dee:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <main+0x14c>)
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	735a      	strb	r2, [r3, #13]
  afeConfig.ov_delay=ovd_2_s;
 8001df4:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <main+0x14c>)
 8001df6:	2210      	movs	r2, #16
 8001df8:	739a      	strb	r2, [r3, #14]
  afeConfig.ovLimit=0xAA;
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <main+0x14c>)
 8001dfc:	22aa      	movs	r2, #170	; 0xaa
 8001dfe:	73da      	strb	r2, [r3, #15]

  // generic pack configuration
  afeConfig.pack_max_voltage = 16400;
 8001e00:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <main+0x14c>)
 8001e02:	4a39      	ldr	r2, [pc, #228]	; (8001ee8 <main+0x154>)
 8001e04:	821a      	strh	r2, [r3, #16]
  afeConfig.cell_bal_voltage = 4100;
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <main+0x14c>)
 8001e08:	4a38      	ldr	r2, [pc, #224]	; (8001eec <main+0x158>)
 8001e0a:	831a      	strh	r2, [r3, #24]

  if(0==bqInit(I2C1, &afeData, &afeConfig)) {
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <main+0x14c>)
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <main+0x15c>)
 8001e10:	4838      	ldr	r0, [pc, #224]	; (8001ef4 <main+0x160>)
 8001e12:	0019      	movs	r1, r3
 8001e14:	f7fe fcdc 	bl	80007d0 <bqInit>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d101      	bne.n	8001e20 <main+0x8c>
	  // ERROR
	  asm volatile ("bkpt 0");
 8001e1c:	be00      	bkpt	0x0000
 8001e1e:	e001      	b.n	8001e24 <main+0x90>
  } else {
	  bqEnableAll();
 8001e20:	f7fe fdd2 	bl	80009c8 <bqEnableAll>
  }

  commInit(USART2, &afeData, &afeConfig);
 8001e24:	4a2e      	ldr	r2, [pc, #184]	; (8001ee0 <main+0x14c>)
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <main+0x15c>)
 8001e28:	4833      	ldr	r0, [pc, #204]	; (8001ef8 <main+0x164>)
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	f7ff fb60 	bl	80014f0 <commInit>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // handle AFE
	  if(LL_GPIO_IsInputPinSet(SIGNAL_GPIO_Port,SIGNAL_Pin)) {
 8001e30:	4b32      	ldr	r3, [pc, #200]	; (8001efc <main+0x168>)
 8001e32:	2102      	movs	r1, #2
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff ff83 	bl	8001d40 <LL_GPIO_IsInputPinSet>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d0f8      	beq.n	8001e30 <main+0x9c>
		  LL_GPIO_SetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001e3e:	23a0      	movs	r3, #160	; 0xa0
 8001e40:	05db      	lsls	r3, r3, #23
 8001e42:	2120      	movs	r1, #32
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff ff8d 	bl	8001d64 <LL_GPIO_SetOutputPin>
		  // AFE event signaled,
		  bqAct();
 8001e4a:	f7fe fd69 	bl	8000920 <bqAct>
		  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001e4e:	23a0      	movs	r3, #160	; 0xa0
 8001e50:	05db      	lsls	r3, r3, #23
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff ff91 	bl	8001d7c <LL_GPIO_ResetOutputPin>
		  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001e5a:	23a0      	movs	r3, #160	; 0xa0
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	2110      	movs	r1, #16
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff ff8b 	bl	8001d7c <LL_GPIO_ResetOutputPin>
		  if(0b00001100&afeData.status_reg) { // voltage problem
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <main+0x15c>)
 8001e68:	2226      	movs	r2, #38	; 0x26
 8001e6a:	5c9b      	ldrb	r3, [r3, r2]
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	4013      	ands	r3, r2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <main+0xf0>
			  LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001e76:	23a0      	movs	r3, #160	; 0xa0
 8001e78:	05db      	lsls	r3, r3, #23
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff ff71 	bl	8001d64 <LL_GPIO_SetOutputPin>
 8001e82:	e022      	b.n	8001eca <main+0x136>
		  } else if(0b00000011&afeData.status_reg) { // discharge current problem
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <main+0x15c>)
 8001e86:	2226      	movs	r2, #38	; 0x26
 8001e88:	5c9b      	ldrb	r3, [r3, r2]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <main+0x10e>
			  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001e94:	23a0      	movs	r3, #160	; 0xa0
 8001e96:	05db      	lsls	r3, r3, #23
 8001e98:	2110      	movs	r1, #16
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff ff62 	bl	8001d64 <LL_GPIO_SetOutputPin>
 8001ea0:	e013      	b.n	8001eca <main+0x136>
		  } else if (0b11000000&afeData.status_reg) { // charge current problem
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <main+0x15c>)
 8001ea4:	2226      	movs	r2, #38	; 0x26
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	223f      	movs	r2, #63	; 0x3f
 8001eaa:	4393      	bics	r3, r2
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <main+0x136>
			  LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001eb2:	23a0      	movs	r3, #160	; 0xa0
 8001eb4:	05db      	lsls	r3, r3, #23
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7ff ff53 	bl	8001d64 <LL_GPIO_SetOutputPin>
			  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001ebe:	23a0      	movs	r3, #160	; 0xa0
 8001ec0:	05db      	lsls	r3, r3, #23
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff4d 	bl	8001d64 <LL_GPIO_SetOutputPin>
		  }
		  // handle the balancing system
		  bqBalance();
 8001eca:	f7fe fda7 	bl	8000a1c <bqBalance>

		  // handle the communication system
		  commAct();
 8001ece:	f7ff fb37 	bl	8001540 <commAct>

		  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001ed2:	23a0      	movs	r3, #160	; 0xa0
 8001ed4:	05db      	lsls	r3, r3, #23
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <LL_GPIO_ResetOutputPin>
	  if(LL_GPIO_IsInputPinSet(SIGNAL_GPIO_Port,SIGNAL_Pin)) {
 8001ede:	e7a7      	b.n	8001e30 <main+0x9c>
 8001ee0:	2000010c 	.word	0x2000010c
 8001ee4:	000005dc 	.word	0x000005dc
 8001ee8:	00004010 	.word	0x00004010
 8001eec:	00001004 	.word	0x00001004
 8001ef0:	20000128 	.word	0x20000128
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	40004400 	.word	0x40004400
 8001efc:	50000400 	.word	0x50000400

08001f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fe9f 	bl	8001c48 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001f0a:	f7ff feb1 	bl	8001c70 <LL_FLASH_GetLatency>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0x16>
  {
  Error_Handler();  
 8001f12:	f000 fa15 	bl	8002340 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7ff feb4 	bl	8001c88 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001f20:	f7ff fd70 	bl	8001a04 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	f7ff fd7b 	bl	8001a20 <LL_RCC_MSI_IsReady>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d1fa      	bne.n	8001f26 <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_5);
 8001f30:	23a0      	movs	r3, #160	; 0xa0
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff fd87 	bl	8001a48 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fd9a 	bl	8001a74 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fdcb 	bl	8001adc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff fddc 	bl	8001b04 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fdef 	bl	8001b30 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff fda2 	bl	8001a9c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	f7ff fdb3 	bl	8001ac4 <LL_RCC_GetSysClkSource>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d1fb      	bne.n	8001f5a <SystemClock_Config+0x5a>
  {
  
  }

  LL_Init1msTick(2097000);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <SystemClock_Config+0x8c>)
 8001f64:	0018      	movs	r0, r3
 8001f66:	f001 fa97 	bl	8003498 <LL_Init1msTick>

  LL_SetSystemCoreClock(2097000);
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <SystemClock_Config+0x8c>)
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f001 faa3 	bl	80034b8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_SYSCLK);
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <SystemClock_Config+0x90>)
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff fdf1 	bl	8001b5c <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff fe04 	bl	8001b8c <LL_RCC_SetI2CClockSource>
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	001fff68 	.word	0x001fff68
 8001f90:	000c0004 	.word	0x000c0004

08001f94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b08f      	sub	sp, #60	; 0x3c
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001f9a:	241c      	movs	r4, #28
 8001f9c:	193b      	adds	r3, r7, r4
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	231c      	movs	r3, #28
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	f001 fab9 	bl	800351c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	0018      	movs	r0, r3
 8001fae:	2318      	movs	r3, #24
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f001 fab2 	bl	800351c <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7ff fe2f 	bl	8001c1c <LL_IOP_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2202      	movs	r2, #2
 8001fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2203      	movs	r2, #3
 8001fd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2201      	movs	r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	1d3a      	adds	r2, r7, #4
 8001fe6:	23a0      	movs	r3, #160	; 0xa0
 8001fe8:	05db      	lsls	r3, r3, #23
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 fccb 	bl	8002988 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	00d2      	lsls	r2, r2, #3
 8001ff8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2203      	movs	r2, #3
 8002004:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2201      	movs	r2, #1
 800200a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	2201      	movs	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2201      	movs	r2, #1
 8002016:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	1d3a      	adds	r2, r7, #4
 800201a:	23a0      	movs	r3, #160	; 0xa0
 800201c:	05db      	lsls	r3, r3, #23
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f000 fcb1 	bl	8002988 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	039b      	lsls	r3, r3, #14
 800202a:	0018      	movs	r0, r3
 800202c:	f7ff fdca 	bl	8001bc4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_I2C1_Init+0x10c>)
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff fcd6 	bl	80019e4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_I2C1_Init+0x10c>)
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff fcc2 	bl	80019c4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <MX_I2C1_Init+0x10c>)
 8002042:	0018      	movs	r0, r3
 8002044:	f7ff fc98 	bl	8001978 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <MX_I2C1_Init+0x10c>)
 800204a:	0018      	movs	r0, r3
 800204c:	f7ff fc84 	bl	8001958 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002050:	193b      	adds	r3, r7, r4
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x00000508;
 8002056:	193b      	adds	r3, r7, r4
 8002058:	22a1      	movs	r2, #161	; 0xa1
 800205a:	00d2      	lsls	r2, r2, #3
 800205c:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800205e:	0021      	movs	r1, r4
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 1;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2201      	movs	r2, #1
 800206a:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 800206c:	187b      	adds	r3, r7, r1
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002078:	187b      	adds	r3, r7, r1
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800207e:	187b      	adds	r3, r7, r1
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <MX_I2C1_Init+0x10c>)
 8002082:	0019      	movs	r1, r3
 8002084:	0010      	movs	r0, r2
 8002086:	f000 fe23 	bl	8002cd0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <MX_I2C1_Init+0x10c>)
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff fc81 	bl	8001998 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b00f      	add	sp, #60	; 0x3c
 800209c:	bd90      	pop	{r4, r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	40005400 	.word	0x40005400

080020a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08f      	sub	sp, #60	; 0x3c
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80020aa:	241c      	movs	r4, #28
 80020ac:	193b      	adds	r3, r7, r4
 80020ae:	0018      	movs	r0, r3
 80020b0:	231c      	movs	r3, #28
 80020b2:	001a      	movs	r2, r3
 80020b4:	2100      	movs	r1, #0
 80020b6:	f001 fa31 	bl	800351c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	0018      	movs	r0, r3
 80020be:	2318      	movs	r3, #24
 80020c0:	001a      	movs	r2, r3
 80020c2:	2100      	movs	r1, #0
 80020c4:	f001 fa2a 	bl	800351c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff fd79 	bl	8001bc4 <LL_APB1_GRP1_EnableClock>
  
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7ff fda2 	bl	8001c1c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2204      	movs	r2, #4
 80020dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2202      	movs	r2, #2
 80020e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2203      	movs	r2, #3
 80020e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2204      	movs	r2, #4
 80020fa:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	1d3a      	adds	r2, r7, #4
 80020fe:	23a0      	movs	r3, #160	; 0xa0
 8002100:	05db      	lsls	r3, r3, #23
 8002102:	0011      	movs	r1, r2
 8002104:	0018      	movs	r0, r3
 8002106:	f000 fc3f 	bl	8002988 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2208      	movs	r2, #8
 800210e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2202      	movs	r2, #2
 8002114:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2203      	movs	r2, #3
 800211a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2204      	movs	r2, #4
 800212c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	1d3a      	adds	r2, r7, #4
 8002130:	23a0      	movs	r3, #160	; 0xa0
 8002132:	05db      	lsls	r3, r3, #23
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f000 fc26 	bl	8002988 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2296      	movs	r2, #150	; 0x96
 8002140:	0192      	lsls	r2, r2, #6
 8002142:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002144:	0021      	movs	r1, r4
 8002146:	187b      	adds	r3, r7, r1
 8002148:	2200      	movs	r2, #0
 800214a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800214c:	187b      	adds	r3, r7, r1
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002152:	187b      	adds	r3, r7, r1
 8002154:	2200      	movs	r2, #0
 8002156:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002158:	187b      	adds	r3, r7, r1
 800215a:	220c      	movs	r2, #12
 800215c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800215e:	187b      	adds	r3, r7, r1
 8002160:	2200      	movs	r2, #0
 8002162:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002164:	187b      	adds	r3, r7, r1
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 800216a:	187b      	adds	r3, r7, r1
 800216c:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <MX_USART2_UART_Init+0xfc>)
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f001 f869 	bl	8003248 <LL_USART_Init>
  LL_USART_DisableOverrunDetect(USART2);
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <MX_USART2_UART_Init+0xfc>)
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff fda9 	bl	8001cd0 <LL_USART_DisableOverrunDetect>
  LL_USART_DisableDMADeactOnRxErr(USART2);
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_USART2_UART_Init+0xfc>)
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff fdcd 	bl	8001d20 <LL_USART_DisableDMADeactOnRxErr>
  LL_USART_ConfigAsyncMode(USART2);
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_USART2_UART_Init+0xfc>)
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff fdb1 	bl	8001cf0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <MX_USART2_UART_Init+0xfc>)
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff fd8f 	bl	8001cb4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b00f      	add	sp, #60	; 0x3c
 800219c:	bd90      	pop	{r4, r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40004400 	.word	0x40004400

080021a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021aa:	003b      	movs	r3, r7
 80021ac:	0018      	movs	r0, r3
 80021ae:	2318      	movs	r3, #24
 80021b0:	001a      	movs	r2, r3
 80021b2:	2100      	movs	r1, #0
 80021b4:	f001 f9b2 	bl	800351c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80021b8:	2004      	movs	r0, #4
 80021ba:	f7ff fd2f 	bl	8001c1c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80021be:	2001      	movs	r0, #1
 80021c0:	f7ff fd2c 	bl	8001c1c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80021c4:	2002      	movs	r0, #2
 80021c6:	f7ff fd29 	bl	8001c1c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 80021ca:	23a0      	movs	r3, #160	; 0xa0
 80021cc:	05db      	lsls	r3, r3, #23
 80021ce:	2110      	movs	r1, #16
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff fdd3 	bl	8001d7c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 80021d6:	23a0      	movs	r3, #160	; 0xa0
 80021d8:	05db      	lsls	r3, r3, #23
 80021da:	2120      	movs	r1, #32
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff fdcd 	bl	8001d7c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80021e2:	23a0      	movs	r3, #160	; 0xa0
 80021e4:	05db      	lsls	r3, r3, #23
 80021e6:	2140      	movs	r1, #64	; 0x40
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff fdc7 	bl	8001d7c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80021ee:	003b      	movs	r3, r7
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	01d2      	lsls	r2, r2, #7
 80021f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80021f6:	003b      	movs	r3, r7
 80021f8:	2203      	movs	r2, #3
 80021fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021fc:	003b      	movs	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	003b      	movs	r3, r7
 8002204:	4a4c      	ldr	r2, [pc, #304]	; (8002338 <MX_GPIO_Init+0x194>)
 8002206:	0019      	movs	r1, r3
 8002208:	0010      	movs	r0, r2
 800220a:	f000 fbbd 	bl	8002988 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800220e:	003b      	movs	r3, r7
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	0212      	lsls	r2, r2, #8
 8002214:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002216:	003b      	movs	r3, r7
 8002218:	2203      	movs	r2, #3
 800221a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800221c:	003b      	movs	r3, r7
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	003b      	movs	r3, r7
 8002224:	4a44      	ldr	r2, [pc, #272]	; (8002338 <MX_GPIO_Init+0x194>)
 8002226:	0019      	movs	r1, r3
 8002228:	0010      	movs	r0, r2
 800222a:	f000 fbad 	bl	8002988 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800222e:	003b      	movs	r3, r7
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002234:	003b      	movs	r3, r7
 8002236:	2203      	movs	r2, #3
 8002238:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800223a:	003b      	movs	r3, r7
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	003a      	movs	r2, r7
 8002242:	23a0      	movs	r3, #160	; 0xa0
 8002244:	05db      	lsls	r3, r3, #23
 8002246:	0011      	movs	r1, r2
 8002248:	0018      	movs	r0, r3
 800224a:	f000 fb9d 	bl	8002988 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800224e:	003b      	movs	r3, r7
 8002250:	2202      	movs	r2, #2
 8002252:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002254:	003b      	movs	r3, r7
 8002256:	2203      	movs	r2, #3
 8002258:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800225a:	003b      	movs	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	003a      	movs	r2, r7
 8002262:	23a0      	movs	r3, #160	; 0xa0
 8002264:	05db      	lsls	r3, r3, #23
 8002266:	0011      	movs	r1, r2
 8002268:	0018      	movs	r0, r3
 800226a:	f000 fb8d 	bl	8002988 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 800226e:	003b      	movs	r3, r7
 8002270:	2210      	movs	r2, #16
 8002272:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002274:	003b      	movs	r3, r7
 8002276:	2201      	movs	r2, #1
 8002278:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800227a:	003b      	movs	r3, r7
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002280:	003b      	movs	r3, r7
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002286:	003b      	movs	r3, r7
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800228c:	003a      	movs	r2, r7
 800228e:	23a0      	movs	r3, #160	; 0xa0
 8002290:	05db      	lsls	r3, r3, #23
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f000 fb77 	bl	8002988 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 800229a:	003b      	movs	r3, r7
 800229c:	2220      	movs	r2, #32
 800229e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80022a0:	003b      	movs	r3, r7
 80022a2:	2201      	movs	r2, #1
 80022a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80022a6:	003b      	movs	r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022ac:	003b      	movs	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022b2:	003b      	movs	r3, r7
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80022b8:	003a      	movs	r2, r7
 80022ba:	23a0      	movs	r3, #160	; 0xa0
 80022bc:	05db      	lsls	r3, r3, #23
 80022be:	0011      	movs	r1, r2
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 fb61 	bl	8002988 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 80022c6:	003b      	movs	r3, r7
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80022cc:	003b      	movs	r3, r7
 80022ce:	2201      	movs	r2, #1
 80022d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80022d2:	003b      	movs	r3, r7
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022d8:	003b      	movs	r3, r7
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022de:	003b      	movs	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80022e4:	003a      	movs	r2, r7
 80022e6:	23a0      	movs	r3, #160	; 0xa0
 80022e8:	05db      	lsls	r3, r3, #23
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 fb4b 	bl	8002988 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80022f2:	003b      	movs	r3, r7
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80022f8:	003b      	movs	r3, r7
 80022fa:	2203      	movs	r2, #3
 80022fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022fe:	003b      	movs	r3, r7
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002304:	003a      	movs	r2, r7
 8002306:	23a0      	movs	r3, #160	; 0xa0
 8002308:	05db      	lsls	r3, r3, #23
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f000 fb3b 	bl	8002988 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8002312:	003b      	movs	r3, r7
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002318:	003b      	movs	r3, r7
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800231e:	003b      	movs	r3, r7
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8002324:	003b      	movs	r3, r7
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <MX_GPIO_Init+0x198>)
 8002328:	0019      	movs	r1, r3
 800232a:	0010      	movs	r0, r2
 800232c:	f000 fb2c 	bl	8002988 <LL_GPIO_Init>

}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b006      	add	sp, #24
 8002336:	bd80      	pop	{r7, pc}
 8002338:	50000800 	.word	0x50000800
 800233c:	50000400 	.word	0x50000400

08002340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	asm volatile("bkpt 1");
 8002344:	be01      	bkpt	0x0001
  /* USER CODE END Error_Handler_Debug */
}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b002      	add	sp, #8
 800235c:	bd80      	pop	{r7, pc}

0800235e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <HardFault_Handler+0x4>

0800236e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	bqHandler();
 8002386:	f7ff f83b 	bl	8001400 <bqHandler>
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <SystemInit+0x64>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <SystemInit+0x64>)
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	0049      	lsls	r1, r1, #1
 800239e:	430a      	orrs	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <SystemInit+0x64>)
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <SystemInit+0x64>)
 80023a8:	4913      	ldr	r1, [pc, #76]	; (80023f8 <SystemInit+0x68>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <SystemInit+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <SystemInit+0x64>)
 80023b4:	4911      	ldr	r1, [pc, #68]	; (80023fc <SystemInit+0x6c>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <SystemInit+0x64>)
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <SystemInit+0x64>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	438a      	bics	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <SystemInit+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <SystemInit+0x64>)
 80023cc:	490c      	ldr	r1, [pc, #48]	; (8002400 <SystemInit+0x70>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <SystemInit+0x64>)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <SystemInit+0x64>)
 80023d8:	490a      	ldr	r1, [pc, #40]	; (8002404 <SystemInit+0x74>)
 80023da:	400a      	ands	r2, r1
 80023dc:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <SystemInit+0x64>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <SystemInit+0x78>)
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	0512      	lsls	r2, r2, #20
 80023ea:	609a      	str	r2, [r3, #8]
#endif
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40021000 	.word	0x40021000
 80023f8:	88ff400c 	.word	0x88ff400c
 80023fc:	fef6fff6 	.word	0xfef6fff6
 8002400:	fffbffff 	.word	0xfffbffff
 8002404:	ff02ffff 	.word	0xff02ffff
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	0002      	movs	r2, r0
 8002414:	1dfb      	adds	r3, r7, #7
 8002416:	701a      	strb	r2, [r3, #0]
	if (outptr) {
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <xputc+0x2c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <xputc+0x26>
		*outptr++ = (unsigned char)c;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <xputc+0x2c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c59      	adds	r1, r3, #1
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <xputc+0x2c>)
 8002428:	6011      	str	r1, [r2, #0]
 800242a:	1dfa      	adds	r2, r7, #7
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	701a      	strb	r2, [r3, #0]
		return;
 8002430:	46c0      	nop			; (mov r8, r8)
	}
}
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000168 	.word	0x20000168

0800243c <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	while (*str)
 8002444:	e006      	b.n	8002454 <xputs+0x18>
		xputc(*str++);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	f7ff ffdc 	bl	800240c <xputc>
	while (*str)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f4      	bne.n	8002446 <xputs+0xa>
}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b002      	add	sp, #8
 8002462:	bd80      	pop	{r7, pc}

08002464 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b08f      	sub	sp, #60	; 0x3c
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	211f      	movs	r1, #31
 8002476:	187a      	adds	r2, r7, r1
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 800247c:	187b      	adds	r3, r7, r1
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d100      	bne.n	8002486 <xvprintf+0x22>
 8002484:	e16c      	b.n	8002760 <xvprintf+0x2fc>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8002486:	231f      	movs	r3, #31
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b25      	cmp	r3, #37	; 0x25
 800248e:	d006      	beq.n	800249e <xvprintf+0x3a>
			xputc(c); continue;
 8002490:	231f      	movs	r3, #31
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	0018      	movs	r0, r3
 8002498:	f7ff ffb8 	bl	800240c <xputc>
 800249c:	e15f      	b.n	800275e <xvprintf+0x2fa>
		}
		f = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	211f      	movs	r1, #31
 80024aa:	187a      	adds	r2, r7, r1
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b30      	cmp	r3, #48	; 0x30
 80024b6:	d109      	bne.n	80024cc <xvprintf+0x68>
			f = 1; c = *fmt++;
 80024b8:	2301      	movs	r3, #1
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	221f      	movs	r2, #31
 80024c4:	18ba      	adds	r2, r7, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	7013      	strb	r3, [r2, #0]
 80024ca:	e00d      	b.n	80024e8 <xvprintf+0x84>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80024cc:	231f      	movs	r3, #31
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b2d      	cmp	r3, #45	; 0x2d
 80024d4:	d108      	bne.n	80024e8 <xvprintf+0x84>
				f = 2; c = *fmt++;
 80024d6:	2302      	movs	r3, #2
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	221f      	movs	r2, #31
 80024e2:	18ba      	adds	r2, r7, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ec:	e011      	b.n	8002512 <xvprintf+0xae>
			w = w * 10 + c - '0';
 80024ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f0:	0013      	movs	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	001a      	movs	r2, r3
 80024fa:	211f      	movs	r1, #31
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	18d3      	adds	r3, r2, r3
 8002502:	3b30      	subs	r3, #48	; 0x30
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	187a      	adds	r2, r7, r1
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	7013      	strb	r3, [r2, #0]
 8002512:	231f      	movs	r3, #31
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b2f      	cmp	r3, #47	; 0x2f
 800251a:	d904      	bls.n	8002526 <xvprintf+0xc2>
 800251c:	231f      	movs	r3, #31
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b39      	cmp	r3, #57	; 0x39
 8002524:	d9e3      	bls.n	80024ee <xvprintf+0x8a>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8002526:	231f      	movs	r3, #31
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b6c      	cmp	r3, #108	; 0x6c
 800252e:	d004      	beq.n	800253a <xvprintf+0xd6>
 8002530:	231f      	movs	r3, #31
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b4c      	cmp	r3, #76	; 0x4c
 8002538:	d10a      	bne.n	8002550 <xvprintf+0xec>
			f |= 4; c = *fmt++;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2204      	movs	r2, #4
 800253e:	4313      	orrs	r3, r2
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	221f      	movs	r2, #31
 800254a:	18ba      	adds	r2, r7, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 8002550:	231f      	movs	r3, #31
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d100      	bne.n	800255c <xvprintf+0xf8>
 800255a:	e103      	b.n	8002764 <xvprintf+0x300>
		d = c;
 800255c:	211e      	movs	r1, #30
 800255e:	187b      	adds	r3, r7, r1
 8002560:	221f      	movs	r2, #31
 8002562:	18ba      	adds	r2, r7, r2
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b60      	cmp	r3, #96	; 0x60
 800256e:	d905      	bls.n	800257c <xvprintf+0x118>
 8002570:	221e      	movs	r2, #30
 8002572:	18bb      	adds	r3, r7, r2
 8002574:	18ba      	adds	r2, r7, r2
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	3a20      	subs	r2, #32
 800257a:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 800257c:	231e      	movs	r3, #30
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3b42      	subs	r3, #66	; 0x42
 8002584:	2b16      	cmp	r3, #22
 8002586:	d847      	bhi.n	8002618 <xvprintf+0x1b4>
 8002588:	009a      	lsls	r2, r3, #2
 800258a:	4b79      	ldr	r3, [pc, #484]	; (8002770 <xvprintf+0x30c>)
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	1d1a      	adds	r2, r3, #4
 8002596:	603a      	str	r2, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a0:	e002      	b.n	80025a8 <xvprintf+0x144>
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	3301      	adds	r3, #1
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	18d3      	adds	r3, r2, r3
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f6      	bne.n	80025a2 <xvprintf+0x13e>
			while (!(f & 2) && j++ < w) xputc(' ');
 80025b4:	e002      	b.n	80025bc <xvprintf+0x158>
 80025b6:	2020      	movs	r0, #32
 80025b8:	f7ff ff28 	bl	800240c <xputc>
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	d105      	bne.n	80025d0 <xvprintf+0x16c>
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d8f2      	bhi.n	80025b6 <xvprintf+0x152>
			xputs(p);
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7ff ff32 	bl	800243c <xputs>
			while (j++ < w) xputc(' ');
 80025d8:	e002      	b.n	80025e0 <xvprintf+0x17c>
 80025da:	2020      	movs	r0, #32
 80025dc:	f7ff ff16 	bl	800240c <xputc>
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f6      	bhi.n	80025da <xvprintf+0x176>
			continue;
 80025ec:	e0b7      	b.n	800275e <xvprintf+0x2fa>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	1d1a      	adds	r2, r3, #4
 80025f2:	603a      	str	r2, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff ff07 	bl	800240c <xputc>
 80025fe:	e0ae      	b.n	800275e <xvprintf+0x2fa>
		case 'B' :					/* Binary */
			r = 2; break;
 8002600:	2302      	movs	r3, #2
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
 8002604:	e00f      	b.n	8002626 <xvprintf+0x1c2>
		case 'O' :					/* Octal */
			r = 8; break;
 8002606:	2308      	movs	r3, #8
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
 800260a:	e00c      	b.n	8002626 <xvprintf+0x1c2>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800260c:	230a      	movs	r3, #10
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
 8002610:	e009      	b.n	8002626 <xvprintf+0x1c2>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8002612:	2310      	movs	r3, #16
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
 8002616:	e006      	b.n	8002626 <xvprintf+0x1c2>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8002618:	231f      	movs	r3, #31
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	0018      	movs	r0, r3
 8002620:	f7ff fef4 	bl	800240c <xputc>
 8002624:	e09b      	b.n	800275e <xvprintf+0x2fa>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	2204      	movs	r2, #4
 800262a:	4013      	ands	r3, r2
 800262c:	d004      	beq.n	8002638 <xvprintf+0x1d4>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	1d1a      	adds	r2, r3, #4
 8002632:	603a      	str	r2, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	e00d      	b.n	8002654 <xvprintf+0x1f0>
 8002638:	231e      	movs	r3, #30
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b44      	cmp	r3, #68	; 0x44
 8002640:	d104      	bne.n	800264c <xvprintf+0x1e8>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	1d1a      	adds	r2, r3, #4
 8002646:	603a      	str	r2, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e003      	b.n	8002654 <xvprintf+0x1f0>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	1d1a      	adds	r2, r3, #4
 8002650:	603a      	str	r2, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 8002656:	231e      	movs	r3, #30
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b44      	cmp	r3, #68	; 0x44
 800265e:	d109      	bne.n	8002674 <xvprintf+0x210>
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	da06      	bge.n	8002674 <xvprintf+0x210>
			v = 0 - v;
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	425b      	negs	r3, r3
 800266a:	623b      	str	r3, [r7, #32]
			f |= 8;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	2208      	movs	r2, #8
 8002670:	4313      	orrs	r3, r2
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800267c:	0018      	movs	r0, r3
 800267e:	f7fd fdc9 	bl	8000214 <__aeabi_uidivmod>
 8002682:	000b      	movs	r3, r1
 8002684:	001a      	movs	r2, r3
 8002686:	241e      	movs	r4, #30
 8002688:	193b      	adds	r3, r7, r4
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800268e:	6a38      	ldr	r0, [r7, #32]
 8002690:	f7fd fd3a 	bl	8000108 <__udivsi3>
 8002694:	0003      	movs	r3, r0
 8002696:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8002698:	193b      	adds	r3, r7, r4
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b09      	cmp	r3, #9
 800269e:	d90d      	bls.n	80026bc <xvprintf+0x258>
 80026a0:	231f      	movs	r3, #31
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b78      	cmp	r3, #120	; 0x78
 80026a8:	d101      	bne.n	80026ae <xvprintf+0x24a>
 80026aa:	2327      	movs	r3, #39	; 0x27
 80026ac:	e000      	b.n	80026b0 <xvprintf+0x24c>
 80026ae:	2307      	movs	r3, #7
 80026b0:	211e      	movs	r1, #30
 80026b2:	187a      	adds	r2, r7, r1
 80026b4:	1879      	adds	r1, r7, r1
 80026b6:	7809      	ldrb	r1, [r1, #0]
 80026b8:	185b      	adds	r3, r3, r1
 80026ba:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	633a      	str	r2, [r7, #48]	; 0x30
 80026c2:	221e      	movs	r2, #30
 80026c4:	18ba      	adds	r2, r7, r2
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	3230      	adds	r2, #48	; 0x30
 80026ca:	b2d1      	uxtb	r1, r2
 80026cc:	2208      	movs	r2, #8
 80026ce:	18ba      	adds	r2, r7, r2
 80026d0:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <xvprintf+0x27a>
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d9cc      	bls.n	8002678 <xvprintf+0x214>
		if (f & 8) s[i++] = '-';
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	2208      	movs	r2, #8
 80026e2:	4013      	ands	r3, r2
 80026e4:	d006      	beq.n	80026f4 <xvprintf+0x290>
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	633a      	str	r2, [r7, #48]	; 0x30
 80026ec:	2208      	movs	r2, #8
 80026ee:	18ba      	adds	r2, r7, r2
 80026f0:	212d      	movs	r1, #45	; 0x2d
 80026f2:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	2201      	movs	r2, #1
 80026fc:	4013      	ands	r3, r2
 80026fe:	d001      	beq.n	8002704 <xvprintf+0x2a0>
 8002700:	2230      	movs	r2, #48	; 0x30
 8002702:	e000      	b.n	8002706 <xvprintf+0x2a2>
 8002704:	2220      	movs	r2, #32
 8002706:	231e      	movs	r3, #30
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 800270c:	e005      	b.n	800271a <xvprintf+0x2b6>
 800270e:	231e      	movs	r3, #30
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	0018      	movs	r0, r3
 8002716:	f7ff fe79 	bl	800240c <xputc>
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d105      	bne.n	800272e <xvprintf+0x2ca>
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800272a:	429a      	cmp	r2, r3
 800272c:	d8ef      	bhi.n	800270e <xvprintf+0x2aa>
		do xputc(s[--i]); while(i);
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	3b01      	subs	r3, #1
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
 8002734:	2308      	movs	r3, #8
 8002736:	18fa      	adds	r2, r7, r3
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	18d3      	adds	r3, r2, r3
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	0018      	movs	r0, r3
 8002740:	f7ff fe64 	bl	800240c <xputc>
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f1      	bne.n	800272e <xvprintf+0x2ca>
		while (j++ < w) xputc(' ');
 800274a:	e002      	b.n	8002752 <xvprintf+0x2ee>
 800274c:	2020      	movs	r0, #32
 800274e:	f7ff fe5d 	bl	800240c <xputc>
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800275a:	429a      	cmp	r2, r3
 800275c:	d8f6      	bhi.n	800274c <xvprintf+0x2e8>
		c = *fmt++;					/* Get a char */
 800275e:	e686      	b.n	800246e <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	e000      	b.n	8002766 <xvprintf+0x302>
		if (!c) break;				/* End of format? */
 8002764:	46c0      	nop			; (mov r8, r8)
	}
}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b00f      	add	sp, #60	; 0x3c
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	08003764 	.word	0x08003764

08002774 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8002774:	b40e      	push	{r1, r2, r3}
 8002776:	b580      	push	{r7, lr}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <xsprintf+0x40>)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	601a      	str	r2, [r3, #0]

	va_start(arp, fmt);
 8002784:	2320      	movs	r3, #32
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	60fb      	str	r3, [r7, #12]
	xvprintf(fmt, arp);
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff fe67 	bl	8002464 <xvprintf>
	va_end(arp);

	*outptr = 0;		/* Terminate output string with a \0 */
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <xsprintf+0x40>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
	outptr = 0;			/* Switch destination for device */
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <xsprintf+0x40>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b005      	add	sp, #20
 80027aa:	bc80      	pop	{r7}
 80027ac:	bc08      	pop	{r3}
 80027ae:	b003      	add	sp, #12
 80027b0:	4718      	bx	r3
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	20000168 	.word	0x20000168

080027b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80027ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80027bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027be:	e003      	b.n	80027c8 <LoopCopyDataInit>

080027c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80027c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027c6:	3104      	adds	r1, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80027c8:	480b      	ldr	r0, [pc, #44]	; (80027f8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <LoopForever+0xe>)
  adds  r2, r0, r1
 80027cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027d0:	d3f6      	bcc.n	80027c0 <CopyDataInit>
  ldr  r2, =_sbss
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <LoopForever+0x12>)
  b  LoopFillZerobss
 80027d4:	e002      	b.n	80027dc <LoopFillZerobss>

080027d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80027d6:	2300      	movs	r3, #0
  str  r3, [r2]
 80027d8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027da:	3204      	adds	r2, #4

080027dc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <LoopForever+0x16>)
  cmp  r2, r3
 80027de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027e0:	d3f9      	bcc.n	80027d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027e2:	f7ff fdd5 	bl	8002390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027e6:	f000 fe75 	bl	80034d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ea:	f7ff fad3 	bl	8001d94 <main>

080027ee <LoopForever>:

LoopForever:
    b LoopForever
 80027ee:	e7fe      	b.n	80027ee <LoopForever>
   ldr   r0, =_estack
 80027f0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80027f4:	080037d0 	.word	0x080037d0
  ldr  r0, =_sdata
 80027f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027fc:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002800:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8002804:	2000016c 	.word	0x2000016c

08002808 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC1_COMP_IRQHandler>

0800280a <LL_GPIO_SetPinMode>:
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6819      	ldr	r1, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	435a      	muls	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	189b      	adds	r3, r3, r2
 8002826:	43db      	mvns	r3, r3
 8002828:	400b      	ands	r3, r1
 800282a:	001a      	movs	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	434b      	muls	r3, r1
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	434b      	muls	r3, r1
 8002836:	431a      	orrs	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bd80      	pop	{r7, pc}

08002844 <LL_GPIO_SetPinOutputType>:
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	43d2      	mvns	r2, r2
 8002858:	401a      	ands	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	434b      	muls	r3, r1
 8002860:	431a      	orrs	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	605a      	str	r2, [r3, #4]
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}

0800286e <LL_GPIO_SetPinSpeed>:
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	435a      	muls	r2, r3
 8002884:	0013      	movs	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	189b      	adds	r3, r3, r2
 800288a:	43db      	mvns	r3, r3
 800288c:	400b      	ands	r3, r1
 800288e:	001a      	movs	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	434b      	muls	r3, r1
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	434b      	muls	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b004      	add	sp, #16
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <LL_GPIO_SetPinPull>:
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68d9      	ldr	r1, [r3, #12]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	435a      	muls	r2, r3
 80028be:	0013      	movs	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	189b      	adds	r3, r3, r2
 80028c4:	43db      	mvns	r3, r3
 80028c6:	400b      	ands	r3, r1
 80028c8:	001a      	movs	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	434b      	muls	r3, r1
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	434b      	muls	r3, r1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	60da      	str	r2, [r3, #12]
}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b004      	add	sp, #16
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <LL_GPIO_SetAFPin_0_7>:
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a19      	ldr	r1, [r3, #32]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	4353      	muls	r3, r2
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	4353      	muls	r3, r2
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	435a      	muls	r2, r3
 8002900:	0013      	movs	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	43db      	mvns	r3, r3
 8002908:	400b      	ands	r3, r1
 800290a:	001a      	movs	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	434b      	muls	r3, r1
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	434b      	muls	r3, r1
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	434b      	muls	r3, r1
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	434b      	muls	r3, r1
 800291e:	431a      	orrs	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	621a      	str	r2, [r3, #32]
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b004      	add	sp, #16
 800292a:	bd80      	pop	{r7, pc}

0800292c <LL_GPIO_SetAFPin_8_15>:
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	0a12      	lsrs	r2, r2, #8
 8002944:	4353      	muls	r3, r2
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	0a12      	lsrs	r2, r2, #8
 800294a:	4353      	muls	r3, r2
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	0a12      	lsrs	r2, r2, #8
 8002950:	435a      	muls	r2, r3
 8002952:	0013      	movs	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	43db      	mvns	r3, r3
 800295a:	400b      	ands	r3, r1
 800295c:	001a      	movs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	0a09      	lsrs	r1, r1, #8
 8002966:	434b      	muls	r3, r1
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	0a09      	lsrs	r1, r1, #8
 800296c:	434b      	muls	r3, r1
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	0a09      	lsrs	r1, r1, #8
 8002972:	434b      	muls	r3, r1
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	434b      	muls	r3, r1
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	b004      	add	sp, #16
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	23a0      	movs	r3, #160	; 0xa0
 800299e:	05db      	lsls	r3, r3, #23
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d010      	beq.n	80029c6 <LL_GPIO_Init+0x3e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a76      	ldr	r2, [pc, #472]	; (8002b80 <LL_GPIO_Init+0x1f8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00c      	beq.n	80029c6 <LL_GPIO_Init+0x3e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a75      	ldr	r2, [pc, #468]	; (8002b84 <LL_GPIO_Init+0x1fc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d008      	beq.n	80029c6 <LL_GPIO_Init+0x3e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a74      	ldr	r2, [pc, #464]	; (8002b88 <LL_GPIO_Init+0x200>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <LL_GPIO_Init+0x3e>
 80029bc:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <LL_GPIO_Init+0x204>)
 80029be:	21a3      	movs	r1, #163	; 0xa3
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff fcc3 	bl	800234c <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d004      	beq.n	80029d8 <LL_GPIO_Init+0x50>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6f      	ldr	r2, [pc, #444]	; (8002b90 <LL_GPIO_Init+0x208>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d904      	bls.n	80029e2 <LL_GPIO_Init+0x5a>
 80029d8:	4b6c      	ldr	r3, [pc, #432]	; (8002b8c <LL_GPIO_Init+0x204>)
 80029da:	21a4      	movs	r1, #164	; 0xa4
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff fcb5 	bl	800234c <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <LL_GPIO_Init+0x84>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00c      	beq.n	8002a0c <LL_GPIO_Init+0x84>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d008      	beq.n	8002a0c <LL_GPIO_Init+0x84>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d004      	beq.n	8002a0c <LL_GPIO_Init+0x84>
 8002a02:	4b62      	ldr	r3, [pc, #392]	; (8002b8c <LL_GPIO_Init+0x204>)
 8002a04:	21a5      	movs	r1, #165	; 0xa5
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7ff fca0 	bl	800234c <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <LL_GPIO_Init+0x8e>
 8002a14:	e08b      	b.n	8002b2e <LL_GPIO_Init+0x1a6>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d100      	bne.n	8002a20 <LL_GPIO_Init+0x98>
 8002a1e:	e086      	b.n	8002b2e <LL_GPIO_Init+0x1a6>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d100      	bne.n	8002a2a <LL_GPIO_Init+0xa2>
 8002a28:	e081      	b.n	8002b2e <LL_GPIO_Init+0x1a6>
 8002a2a:	4b58      	ldr	r3, [pc, #352]	; (8002b8c <LL_GPIO_Init+0x204>)
 8002a2c:	21a6      	movs	r1, #166	; 0xa6
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff fc8c 	bl	800234c <assert_failed>
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002a34:	e07b      	b.n	8002b2e <LL_GPIO_Init+0x1a6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4091      	lsls	r1, r2
 8002a40:	000a      	movs	r2, r1
 8002a42:	4013      	ands	r3, r2
 8002a44:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d100      	bne.n	8002a4e <LL_GPIO_Init+0xc6>
 8002a4c:	e06c      	b.n	8002b28 <LL_GPIO_Init+0x1a0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f7ff fed7 	bl	800280a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d003      	beq.n	8002a6c <LL_GPIO_Init+0xe4>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d11b      	bne.n	8002aa4 <LL_GPIO_Init+0x11c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <LL_GPIO_Init+0x10e>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d00c      	beq.n	8002a96 <LL_GPIO_Init+0x10e>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d008      	beq.n	8002a96 <LL_GPIO_Init+0x10e>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d004      	beq.n	8002a96 <LL_GPIO_Init+0x10e>
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <LL_GPIO_Init+0x204>)
 8002a8e:	21ba      	movs	r1, #186	; 0xba
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff fc5b 	bl	800234c <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff fee5 	bl	800286e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff fefb 	bl	80028a8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d136      	bne.n	8002b28 <LL_GPIO_Init+0x1a0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <LL_GPIO_Init+0x17c>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d01c      	beq.n	8002b04 <LL_GPIO_Init+0x17c>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d018      	beq.n	8002b04 <LL_GPIO_Init+0x17c>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d014      	beq.n	8002b04 <LL_GPIO_Init+0x17c>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d010      	beq.n	8002b04 <LL_GPIO_Init+0x17c>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d00c      	beq.n	8002b04 <LL_GPIO_Init+0x17c>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d008      	beq.n	8002b04 <LL_GPIO_Init+0x17c>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b07      	cmp	r3, #7
 8002af8:	d004      	beq.n	8002b04 <LL_GPIO_Init+0x17c>
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <LL_GPIO_Init+0x204>)
 8002afc:	21c6      	movs	r1, #198	; 0xc6
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff fc24 	bl	800234c <assert_failed>

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2bff      	cmp	r3, #255	; 0xff
 8002b08:	d807      	bhi.n	8002b1a <LL_GPIO_Init+0x192>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7ff fee5 	bl	80028e2 <LL_GPIO_SetAFPin_0_7>
 8002b18:	e006      	b.n	8002b28 <LL_GPIO_Init+0x1a0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7ff ff02 	bl	800292c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	40da      	lsrs	r2, r3
 8002b36:	1e13      	subs	r3, r2, #0
 8002b38:	d000      	beq.n	8002b3c <LL_GPIO_Init+0x1b4>
 8002b3a:	e77c      	b.n	8002a36 <LL_GPIO_Init+0xae>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d003      	beq.n	8002b4c <LL_GPIO_Init+0x1c4>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d114      	bne.n	8002b76 <LL_GPIO_Init+0x1ee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <LL_GPIO_Init+0x1de>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d004      	beq.n	8002b66 <LL_GPIO_Init+0x1de>
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <LL_GPIO_Init+0x204>)
 8002b5e:	21d9      	movs	r1, #217	; 0xd9
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff fbf3 	bl	800234c <assert_failed>

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7ff fe67 	bl	8002844 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b004      	add	sp, #16
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	50000400 	.word	0x50000400
 8002b84:	50000800 	.word	0x50000800
 8002b88:	50001c00 	.word	0x50001c00
 8002b8c:	08003614 	.word	0x08003614
 8002b90:	0000ffff 	.word	0x0000ffff

08002b94 <LL_I2C_Enable>:
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <LL_I2C_Disable>:
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4393      	bics	r3, r2
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b002      	add	sp, #8
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <LL_I2C_ConfigFilters>:
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a06      	ldr	r2, [pc, #24]	; (8002bfc <LL_I2C_ConfigFilters+0x2c>)
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0219      	lsls	r1, r3, #8
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	430b      	orrs	r3, r1
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	601a      	str	r2, [r3, #0]
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	ffffe0ff 	.word	0xffffe0ff

08002c00 <LL_I2C_SetOwnAddress1>:
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	0adb      	lsrs	r3, r3, #11
 8002c12:	02da      	lsls	r2, r3, #11
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	609a      	str	r2, [r3, #8]
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <LL_I2C_EnableOwnAddress1>:
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	0212      	lsls	r2, r2, #8
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <LL_I2C_DisableOwnAddress1>:
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <LL_I2C_DisableOwnAddress1+0x1c>)
 8002c56:	401a      	ands	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	ffff7fff 	.word	0xffff7fff

08002c68 <LL_I2C_SetTiming>:
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	611a      	str	r2, [r3, #16]
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <LL_I2C_SetMode>:
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <LL_I2C_SetMode+0x24>)
 8002c90:	401a      	ands	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	ffcfffff 	.word	0xffcfffff

08002ca8 <LL_I2C_AcknowledgeNextData>:
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <LL_I2C_AcknowledgeNextData+0x24>)
 8002cb8:	401a      	ands	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	605a      	str	r2, [r3, #4]
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b002      	add	sp, #8
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	ffff7fff 	.word	0xffff7fff

08002cd0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <LL_I2C_Init+0x14c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <LL_I2C_Init+0x1c>
 8002ce2:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <LL_I2C_Init+0x150>)
 8002ce4:	218e      	movs	r1, #142	; 0x8e
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7ff fb30 	bl	800234c <assert_failed>

  /* Check the I2C parameters from I2C_InitStruct */
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d014      	beq.n	8002d1e <LL_I2C_Init+0x4e>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	035b      	lsls	r3, r3, #13
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d00e      	beq.n	8002d1e <LL_I2C_Init+0x4e>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <LL_I2C_Init+0x4e>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	039b      	lsls	r3, r3, #14
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d004      	beq.n	8002d1e <LL_I2C_Init+0x4e>
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <LL_I2C_Init+0x150>)
 8002d16:	2191      	movs	r1, #145	; 0x91
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7ff fb17 	bl	800234c <assert_failed>
  assert_param(IS_LL_I2C_ANALOG_FILTER(I2C_InitStruct->AnalogFilter));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <LL_I2C_Init+0x6c>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	015b      	lsls	r3, r3, #5
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d004      	beq.n	8002d3c <LL_I2C_Init+0x6c>
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <LL_I2C_Init+0x150>)
 8002d34:	2192      	movs	r1, #146	; 0x92
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7ff fb08 	bl	800234c <assert_failed>
  assert_param(IS_LL_I2C_DIGITAL_FILTER(I2C_InitStruct->DigitalFilter));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d904      	bls.n	8002d4e <LL_I2C_Init+0x7e>
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <LL_I2C_Init+0x150>)
 8002d46:	2193      	movs	r1, #147	; 0x93
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff faff 	bl	800234c <assert_failed>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <LL_I2C_Init+0x154>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d904      	bls.n	8002d62 <LL_I2C_Init+0x92>
 8002d58:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <LL_I2C_Init+0x150>)
 8002d5a:	2194      	movs	r1, #148	; 0x94
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7ff faf5 	bl	800234c <assert_failed>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <LL_I2C_Init+0xb0>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d004      	beq.n	8002d80 <LL_I2C_Init+0xb0>
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <LL_I2C_Init+0x150>)
 8002d78:	2195      	movs	r1, #149	; 0x95
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7ff fae6 	bl	800234c <assert_failed>
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <LL_I2C_Init+0xce>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d004      	beq.n	8002d9e <LL_I2C_Init+0xce>
 8002d94:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <LL_I2C_Init+0x150>)
 8002d96:	2196      	movs	r1, #150	; 0x96
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7ff fad7 	bl	800234c <assert_failed>

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff ff05 	bl	8002bb0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6899      	ldr	r1, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7ff ff0d 	bl	8002bd0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7ff ff52 	bl	8002c68 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7ff fee4 	bl	8002b94 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff ff3a 	bl	8002c48 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6919      	ldr	r1, [r3, #16]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7ff ff0e 	bl	8002c00 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <LL_I2C_Init+0x124>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7ff ff1a 	bl	8002c28 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	0011      	movs	r1, r2
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff ff3f 	bl	8002c80 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff ff4c 	bl	8002ca8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b002      	add	sp, #8
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	40005400 	.word	0x40005400
 8002e20:	0800364c 	.word	0x0800364c
 8002e24:	000003ff 	.word	0x000003ff

08002e28 <LL_RCC_HSI_IsReady>:
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <LL_RCC_HSI_IsReady+0x1c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2204      	movs	r2, #4
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d101      	bne.n	8002e3c <LL_RCC_HSI_IsReady+0x14>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <LL_RCC_HSI_IsReady+0x16>
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000

08002e48 <LL_RCC_LSE_IsReady>:
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <LL_RCC_LSE_IsReady+0x24>)
 8002e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	401a      	ands	r2, r3
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d101      	bne.n	8002e62 <LL_RCC_LSE_IsReady+0x1a>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <LL_RCC_LSE_IsReady+0x1c>
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	40021000 	.word	0x40021000

08002e70 <LL_RCC_MSI_GetRange>:
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <LL_RCC_MSI_GetRange+0x14>)
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	23e0      	movs	r3, #224	; 0xe0
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	4013      	ands	r3, r2
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000

08002e88 <LL_RCC_GetSysClkSource>:
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <LL_RCC_GetSysClkSource+0x14>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	220c      	movs	r2, #12
 8002e92:	4013      	ands	r3, r2
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <LL_RCC_GetAHBPrescaler>:
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <LL_RCC_GetAHBPrescaler+0x14>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	22f0      	movs	r2, #240	; 0xf0
 8002eaa:	4013      	ands	r3, r2
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <LL_RCC_GetAPB1Prescaler>:
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <LL_RCC_GetAPB1Prescaler+0x14>)
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	23e0      	movs	r3, #224	; 0xe0
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4013      	ands	r3, r2
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <LL_RCC_GetUSARTClockSource+0x20>)
 8002eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	4313      	orrs	r3, r2
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b002      	add	sp, #8
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <LL_RCC_PLL_GetMainSource+0x14>)
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	025b      	lsls	r3, r3, #9
 8002f00:	4013      	ands	r3, r2
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000

08002f0c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	23f0      	movs	r3, #240	; 0xf0
 8002f16:	039b      	lsls	r3, r3, #14
 8002f18:	4013      	ands	r3, r2
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <LL_RCC_PLL_GetDivider+0x14>)
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	23c0      	movs	r3, #192	; 0xc0
 8002f2e:	041b      	lsls	r3, r3, #16
 8002f30:	4013      	ands	r3, r2
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000

08002f3c <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d101      	bne.n	8002f50 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000

08002f5c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d004      	beq.n	8002f78 <LL_RCC_GetUSARTClockFreq+0x1c>
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <LL_RCC_GetUSARTClockFreq+0xa4>)
 8002f70:	21fc      	movs	r1, #252	; 0xfc
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff f9ea 	bl	800234c <assert_failed>
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d135      	bne.n	8002fea <LL_RCC_GetUSARTClockFreq+0x8e>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff ffa5 	bl	8002ed0 <LL_RCC_GetUSARTClockSource>
 8002f86:	0003      	movs	r3, r0
 8002f88:	4a1e      	ldr	r2, [pc, #120]	; (8003004 <LL_RCC_GetUSARTClockFreq+0xa8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00a      	beq.n	8002fa4 <LL_RCC_GetUSARTClockFreq+0x48>
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <LL_RCC_GetUSARTClockFreq+0xac>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d015      	beq.n	8002fc0 <LL_RCC_GetUSARTClockFreq+0x64>
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <LL_RCC_GetUSARTClockFreq+0xb0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d11a      	bne.n	8002fd0 <LL_RCC_GetUSARTClockFreq+0x74>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002f9a:	f000 f83d 	bl	8003018 <RCC_GetSystemClockFreq>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	60fb      	str	r3, [r7, #12]
        break;
 8002fa2:	e027      	b.n	8002ff4 <LL_RCC_GetUSARTClockFreq+0x98>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002fa4:	f7ff ff40 	bl	8002e28 <LL_RCC_HSI_IsReady>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d020      	beq.n	8002fee <LL_RCC_GetUSARTClockFreq+0x92>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002fac:	f7ff ffc6 	bl	8002f3c <LL_RCC_IsActiveFlag_HSIDIV>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d002      	beq.n	8002fba <LL_RCC_GetUSARTClockFreq+0x5e>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <LL_RCC_GetUSARTClockFreq+0xb4>)
 8002fb6:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8002fb8:	e019      	b.n	8002fee <LL_RCC_GetUSARTClockFreq+0x92>
            usart_frequency = HSI_VALUE;
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <LL_RCC_GetUSARTClockFreq+0xb8>)
 8002fbc:	60fb      	str	r3, [r7, #12]
        break;
 8002fbe:	e016      	b.n	8002fee <LL_RCC_GetUSARTClockFreq+0x92>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002fc0:	f7ff ff42 	bl	8002e48 <LL_RCC_LSE_IsReady>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d014      	beq.n	8002ff2 <LL_RCC_GetUSARTClockFreq+0x96>
        {
          usart_frequency = LSE_VALUE;
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002fce:	e010      	b.n	8002ff2 <LL_RCC_GetUSARTClockFreq+0x96>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002fd0:	f000 f822 	bl	8003018 <RCC_GetSystemClockFreq>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f862 	bl	80030a0 <RCC_GetHCLKClockFreq>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 f874 	bl	80030cc <RCC_GetPCLK1ClockFreq>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	60fb      	str	r3, [r7, #12]
        break;
 8002fe8:	e004      	b.n	8002ff4 <LL_RCC_GetUSARTClockFreq+0x98>
    }
  }
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	e002      	b.n	8002ff4 <LL_RCC_GetUSARTClockFreq+0x98>
        break;
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	e000      	b.n	8002ff4 <LL_RCC_GetUSARTClockFreq+0x98>
        break;
 8002ff2:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b004      	add	sp, #16
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	08003684 	.word	0x08003684
 8003004:	000c0008 	.word	0x000c0008
 8003008:	000c000c 	.word	0x000c000c
 800300c:	000c0004 	.word	0x000c0004
 8003010:	003d0900 	.word	0x003d0900
 8003014:	00f42400 	.word	0x00f42400

08003018 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800301e:	f7ff ff33 	bl	8002e88 <LL_RCC_GetSysClkSource>
 8003022:	0003      	movs	r3, r0
 8003024:	2b04      	cmp	r3, #4
 8003026:	d013      	beq.n	8003050 <RCC_GetSystemClockFreq+0x38>
 8003028:	d802      	bhi.n	8003030 <RCC_GetSystemClockFreq+0x18>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <RCC_GetSystemClockFreq+0x22>
 800302e:	e021      	b.n	8003074 <RCC_GetSystemClockFreq+0x5c>
 8003030:	2b08      	cmp	r3, #8
 8003032:	d017      	beq.n	8003064 <RCC_GetSystemClockFreq+0x4c>
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d018      	beq.n	800306a <RCC_GetSystemClockFreq+0x52>
 8003038:	e01c      	b.n	8003074 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800303a:	f7ff ff19 	bl	8002e70 <LL_RCC_MSI_GetRange>
 800303e:	0003      	movs	r3, r0
 8003040:	0b5b      	lsrs	r3, r3, #13
 8003042:	3301      	adds	r3, #1
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	0212      	lsls	r2, r2, #8
 8003048:	409a      	lsls	r2, r3
 800304a:	0013      	movs	r3, r2
 800304c:	607b      	str	r3, [r7, #4]
      break;
 800304e:	e01c      	b.n	800308a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8003050:	f7ff ff74 	bl	8002f3c <LL_RCC_IsActiveFlag_HSIDIV>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d002      	beq.n	800305e <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <RCC_GetSystemClockFreq+0x7c>)
 800305a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 800305c:	e015      	b.n	800308a <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <RCC_GetSystemClockFreq+0x80>)
 8003060:	607b      	str	r3, [r7, #4]
      break;
 8003062:	e012      	b.n	800308a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <RCC_GetSystemClockFreq+0x84>)
 8003066:	607b      	str	r3, [r7, #4]
      break;
 8003068:	e00f      	b.n	800308a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800306a:	f000 f843 	bl	80030f4 <RCC_PLL_GetFreqDomain_SYS>
 800306e:	0003      	movs	r3, r0
 8003070:	607b      	str	r3, [r7, #4]
      break;
 8003072:	e00a      	b.n	800308a <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003074:	f7ff fefc 	bl	8002e70 <LL_RCC_MSI_GetRange>
 8003078:	0003      	movs	r3, r0
 800307a:	0b5b      	lsrs	r3, r3, #13
 800307c:	3301      	adds	r3, #1
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	0212      	lsls	r2, r2, #8
 8003082:	409a      	lsls	r2, r3
 8003084:	0013      	movs	r3, r2
 8003086:	607b      	str	r3, [r7, #4]
      break;
 8003088:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800308a:	687b      	ldr	r3, [r7, #4]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}
 8003094:	003d0900 	.word	0x003d0900
 8003098:	00f42400 	.word	0x00f42400
 800309c:	007a1200 	.word	0x007a1200

080030a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80030a8:	f7ff fefa 	bl	8002ea0 <LL_RCC_GetAHBPrescaler>
 80030ac:	0003      	movs	r3, r0
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	220f      	movs	r2, #15
 80030b2:	4013      	ands	r3, r2
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <RCC_GetHCLKClockFreq+0x28>)
 80030b6:	5cd3      	ldrb	r3, [r2, r3]
 80030b8:	001a      	movs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	40d3      	lsrs	r3, r2
}
 80030be:	0018      	movs	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b002      	add	sp, #8
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	08003740 	.word	0x08003740

080030cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80030d4:	f7ff fef0 	bl	8002eb8 <LL_RCC_GetAPB1Prescaler>
 80030d8:	0003      	movs	r3, r0
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	001a      	movs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	40d3      	lsrs	r3, r2
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	08003750 	.word	0x08003750

080030f4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80030fa:	f7ff fefb 	bl	8002ef4 <LL_RCC_PLL_GetMainSource>
 80030fe:	0003      	movs	r3, r0
 8003100:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8003108:	f7ff ff18 	bl	8002f3c <LL_RCC_IsActiveFlag_HSIDIV>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d002      	beq.n	8003116 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003112:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8003114:	e005      	b.n	8003122 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8003118:	607b      	str	r3, [r7, #4]
      break;
 800311a:	e002      	b.n	8003122 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800311e:	607b      	str	r3, [r7, #4]
      break;
 8003120:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8003122:	f7ff fef3 	bl	8002f0c <LL_RCC_PLL_GetMultiplicator>
 8003126:	0003      	movs	r3, r0
 8003128:	0c9b      	lsrs	r3, r3, #18
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	001a      	movs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4353      	muls	r3, r2
 8003134:	001c      	movs	r4, r3
 8003136:	f7ff fef5 	bl	8002f24 <LL_RCC_PLL_GetDivider>
 800313a:	0003      	movs	r3, r0
 800313c:	0d9b      	lsrs	r3, r3, #22
 800313e:	3301      	adds	r3, #1
 8003140:	0019      	movs	r1, r3
 8003142:	0020      	movs	r0, r4
 8003144:	f7fc ffe0 	bl	8000108 <__udivsi3>
 8003148:	0003      	movs	r3, r0
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b003      	add	sp, #12
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	003d0900 	.word	0x003d0900
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200
 8003160:	08003758 	.word	0x08003758

08003164 <LL_USART_IsEnabled>:
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2201      	movs	r2, #1
 8003172:	4013      	ands	r3, r2
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <LL_USART_IsEnabled+0x18>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <LL_USART_IsEnabled+0x1a>
 800317c:	2300      	movs	r3, #0
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b002      	add	sp, #8
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <LL_USART_SetStopBitsLength>:
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <LL_USART_SetStopBitsLength+0x24>)
 8003198:	401a      	ands	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	605a      	str	r2, [r3, #4]
}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b002      	add	sp, #8
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	ffffcfff 	.word	0xffffcfff

080031b0 <LL_USART_SetHWFlowCtrl>:
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <LL_USART_SetHWFlowCtrl+0x24>)
 80031c0:	401a      	ands	r2, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	609a      	str	r2, [r3, #8]
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	fffffcff 	.word	0xfffffcff

080031d8 <LL_USART_SetBaudRate>:
{
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d117      	bne.n	8003220 <LL_USART_SetBaudRate+0x48>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	005a      	lsls	r2, r3, #1
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	18d3      	adds	r3, r2, r3
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7fc ff83 	bl	8000108 <__udivsi3>
 8003202:	0003      	movs	r3, r0
 8003204:	b29b      	uxth	r3, r3
 8003206:	001d      	movs	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <LL_USART_SetBaudRate+0x6c>)
 800320a:	402b      	ands	r3, r5
 800320c:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800320e:	086b      	lsrs	r3, r5, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	001a      	movs	r2, r3
 8003214:	2307      	movs	r3, #7
 8003216:	4013      	ands	r3, r2
 8003218:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	60dc      	str	r4, [r3, #12]
}
 800321e:	e00c      	b.n	800323a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	085a      	lsrs	r2, r3, #1
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	18d3      	adds	r3, r2, r3
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	0018      	movs	r0, r3
 800322c:	f7fc ff6c 	bl	8000108 <__udivsi3>
 8003230:	0003      	movs	r3, r0
 8003232:	b29b      	uxth	r3, r3
 8003234:	001a      	movs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	60da      	str	r2, [r3, #12]
}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b004      	add	sp, #16
 8003240:	bdb0      	pop	{r4, r5, r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	0000fff0 	.word	0x0000fff0

08003248 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003252:	230f      	movs	r3, #15
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
#if defined(USART4) || defined(USART5)
  LL_RCC_ClocksTypeDef RCC_Clocks;
#endif

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a7b      	ldr	r2, [pc, #492]	; (8003450 <LL_USART_Init+0x208>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <LL_USART_Init+0x28>
 8003266:	4b7b      	ldr	r3, [pc, #492]	; (8003454 <LL_USART_Init+0x20c>)
 8003268:	21ce      	movs	r1, #206	; 0xce
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff f86e 	bl	800234c <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a78      	ldr	r2, [pc, #480]	; (8003458 <LL_USART_Init+0x210>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d904      	bls.n	8003284 <LL_USART_Init+0x3c>
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <LL_USART_Init+0x20c>)
 800327c:	21cf      	movs	r1, #207	; 0xcf
 800327e:	0018      	movs	r0, r3
 8003280:	f7ff f864 	bl	800234c <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	055b      	lsls	r3, r3, #21
 800328c:	429a      	cmp	r2, r3
 800328e:	d00e      	beq.n	80032ae <LL_USART_Init+0x66>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <LL_USART_Init+0x66>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d004      	beq.n	80032ae <LL_USART_Init+0x66>
 80032a4:	4b6b      	ldr	r3, [pc, #428]	; (8003454 <LL_USART_Init+0x20c>)
 80032a6:	21d0      	movs	r1, #208	; 0xd0
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff f84f 	bl	800234c <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	015b      	lsls	r3, r3, #5
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d014      	beq.n	80032e4 <LL_USART_Init+0x9c>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d010      	beq.n	80032e4 <LL_USART_Init+0x9c>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	23c0      	movs	r3, #192	; 0xc0
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d00a      	beq.n	80032e4 <LL_USART_Init+0x9c>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	019b      	lsls	r3, r3, #6
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d004      	beq.n	80032e4 <LL_USART_Init+0x9c>
 80032da:	4b5e      	ldr	r3, [pc, #376]	; (8003454 <LL_USART_Init+0x20c>)
 80032dc:	21d1      	movs	r1, #209	; 0xd1
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff f834 	bl	800234c <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <LL_USART_Init+0xc6>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d00a      	beq.n	800330e <LL_USART_Init+0xc6>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	23c0      	movs	r3, #192	; 0xc0
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	429a      	cmp	r2, r3
 8003302:	d004      	beq.n	800330e <LL_USART_Init+0xc6>
 8003304:	4b53      	ldr	r3, [pc, #332]	; (8003454 <LL_USART_Init+0x20c>)
 8003306:	21d2      	movs	r1, #210	; 0xd2
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff f81f 	bl	800234c <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d010      	beq.n	8003338 <LL_USART_Init+0xf0>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b04      	cmp	r3, #4
 800331c:	d00c      	beq.n	8003338 <LL_USART_Init+0xf0>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d008      	beq.n	8003338 <LL_USART_Init+0xf0>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d004      	beq.n	8003338 <LL_USART_Init+0xf0>
 800332e:	4b49      	ldr	r3, [pc, #292]	; (8003454 <LL_USART_Init+0x20c>)
 8003330:	21d3      	movs	r1, #211	; 0xd3
 8003332:	0018      	movs	r0, r3
 8003334:	f7ff f80a 	bl	800234c <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d016      	beq.n	800336e <LL_USART_Init+0x126>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	429a      	cmp	r2, r3
 800334a:	d010      	beq.n	800336e <LL_USART_Init+0x126>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	429a      	cmp	r2, r3
 8003356:	d00a      	beq.n	800336e <LL_USART_Init+0x126>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	23c0      	movs	r3, #192	; 0xc0
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d004      	beq.n	800336e <LL_USART_Init+0x126>
 8003364:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <LL_USART_Init+0x20c>)
 8003366:	21d4      	movs	r1, #212	; 0xd4
 8003368:	0018      	movs	r0, r3
 800336a:	f7fe ffef 	bl	800234c <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <LL_USART_Init+0x144>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	429a      	cmp	r2, r3
 8003380:	d004      	beq.n	800338c <LL_USART_Init+0x144>
 8003382:	4b34      	ldr	r3, [pc, #208]	; (8003454 <LL_USART_Init+0x20c>)
 8003384:	21d5      	movs	r1, #213	; 0xd5
 8003386:	0018      	movs	r0, r3
 8003388:	f7fe ffe0 	bl	800234c <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	0018      	movs	r0, r3
 8003390:	f7ff fee8 	bl	8003164 <LL_USART_IsEnabled>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d153      	bne.n	8003440 <LL_USART_Init+0x1f8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2f      	ldr	r2, [pc, #188]	; (800345c <LL_USART_Init+0x214>)
 800339e:	401a      	ands	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4319      	orrs	r1, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	4319      	orrs	r1, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	430b      	orrs	r3, r1
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7ff fedf 	bl	8003188 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0011      	movs	r1, r2
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff feec 	bl	80031b0 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <LL_USART_Init+0x208>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d104      	bne.n	80033ea <LL_USART_Init+0x1a2>
#endif
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80033e0:	200c      	movs	r0, #12
 80033e2:	f7ff fdbb 	bl	8002f5c <LL_RCC_GetUSARTClockFreq>
 80033e6:	0003      	movs	r3, r0
 80033e8:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d027      	beq.n	8003440 <LL_USART_Init+0x1f8>
        && (USART_InitStruct->BaudRate != 0U))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d023      	beq.n	8003440 <LL_USART_Init+0x1f8>
    {
      status = SUCCESS;
 80033f8:	230f      	movs	r3, #15
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fee4 	bl	80031d8 <LL_USART_SetBaudRate>
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b0f      	cmp	r3, #15
 8003416:	d807      	bhi.n	8003428 <LL_USART_Init+0x1e0>
 8003418:	232a      	movs	r3, #42	; 0x2a
 800341a:	33ff      	adds	r3, #255	; 0xff
 800341c:	001a      	movs	r2, r3
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <LL_USART_Init+0x20c>)
 8003420:	0011      	movs	r1, r2
 8003422:	0018      	movs	r0, r3
 8003424:	f7fe ff92 	bl	800234c <assert_failed>

      /* Check BRR is lower than or equal to 0xFFFF */
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <LL_USART_Init+0x218>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d906      	bls.n	8003440 <LL_USART_Init+0x1f8>
 8003432:	2396      	movs	r3, #150	; 0x96
 8003434:	005a      	lsls	r2, r3, #1
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <LL_USART_Init+0x20c>)
 8003438:	0011      	movs	r1, r2
 800343a:	0018      	movs	r0, r3
 800343c:	f7fe ff86 	bl	800234c <assert_failed>
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003440:	230f      	movs	r3, #15
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	781b      	ldrb	r3, [r3, #0]
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	40004400 	.word	0x40004400
 8003454:	080036bc 	.word	0x080036bc
 8003458:	003d0900 	.word	0x003d0900
 800345c:	efff69f3 	.word	0xefff69f3
 8003460:	0000ffff 	.word	0x0000ffff

08003464 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800346e:	6839      	ldr	r1, [r7, #0]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fc fe49 	bl	8000108 <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	001a      	movs	r2, r3
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <LL_InitTick+0x30>)
 800347c:	3a01      	subs	r2, #1
 800347e:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <LL_InitTick+0x30>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b03      	ldr	r3, [pc, #12]	; (8003494 <LL_InitTick+0x30>)
 8003488:	2205      	movs	r2, #5
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}
 8003494:	e000e010 	.word	0xe000e010

08003498 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80034a0:	23fa      	movs	r3, #250	; 0xfa
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff ffdb 	bl	8003464 <LL_InitTick>
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <LL_SetSystemCoreClock+0x18>)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	20000000 	.word	0x20000000

080034d4 <__libc_init_array>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	2600      	movs	r6, #0
 80034d8:	4d0c      	ldr	r5, [pc, #48]	; (800350c <__libc_init_array+0x38>)
 80034da:	4c0d      	ldr	r4, [pc, #52]	; (8003510 <__libc_init_array+0x3c>)
 80034dc:	1b64      	subs	r4, r4, r5
 80034de:	10a4      	asrs	r4, r4, #2
 80034e0:	42a6      	cmp	r6, r4
 80034e2:	d109      	bne.n	80034f8 <__libc_init_array+0x24>
 80034e4:	2600      	movs	r6, #0
 80034e6:	f000 f821 	bl	800352c <_init>
 80034ea:	4d0a      	ldr	r5, [pc, #40]	; (8003514 <__libc_init_array+0x40>)
 80034ec:	4c0a      	ldr	r4, [pc, #40]	; (8003518 <__libc_init_array+0x44>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	42a6      	cmp	r6, r4
 80034f4:	d105      	bne.n	8003502 <__libc_init_array+0x2e>
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	00b3      	lsls	r3, r6, #2
 80034fa:	58eb      	ldr	r3, [r5, r3]
 80034fc:	4798      	blx	r3
 80034fe:	3601      	adds	r6, #1
 8003500:	e7ee      	b.n	80034e0 <__libc_init_array+0xc>
 8003502:	00b3      	lsls	r3, r6, #2
 8003504:	58eb      	ldr	r3, [r5, r3]
 8003506:	4798      	blx	r3
 8003508:	3601      	adds	r6, #1
 800350a:	e7f2      	b.n	80034f2 <__libc_init_array+0x1e>
 800350c:	080037c8 	.word	0x080037c8
 8003510:	080037c8 	.word	0x080037c8
 8003514:	080037c8 	.word	0x080037c8
 8003518:	080037cc 	.word	0x080037cc

0800351c <memset>:
 800351c:	0003      	movs	r3, r0
 800351e:	1812      	adds	r2, r2, r0
 8003520:	4293      	cmp	r3, r2
 8003522:	d100      	bne.n	8003526 <memset+0xa>
 8003524:	4770      	bx	lr
 8003526:	7019      	strb	r1, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	e7f9      	b.n	8003520 <memset+0x4>

0800352c <_init>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr

08003538 <_fini>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr
