
cubeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae8  08002ae8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002ae8  08002ae8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ae8  08002ae8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000004  08002af4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002af4  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004291  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f11  00000000  00000000  000242bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000628  00000000  00000000  000251d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000590  00000000  00000000  000257f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b8cf  00000000  00000000  00025d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003f71  00000000  00000000  00031657  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003b64f  00000000  00000000  000355c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00070c17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001524  00000000  00000000  00070c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002948 	.word	0x08002948

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002948 	.word	0x08002948

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	2202      	movs	r2, #2
 8000402:	4013      	ands	r3, r2
 8000404:	2b02      	cmp	r3, #2
 8000406:	d101      	bne.n	800040c <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000408:	2301      	movs	r3, #1
 800040a:	e000      	b.n	800040e <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800040c:	2300      	movs	r3, #0
}
 800040e:	0018      	movs	r0, r3
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}

08000416 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	2204      	movs	r2, #4
 8000424:	4013      	ands	r3, r2
 8000426:	2b04      	cmp	r3, #4
 8000428:	d101      	bne.n	800042e <LL_I2C_IsActiveFlag_RXNE+0x18>
 800042a:	2301      	movs	r3, #1
 800042c:	e000      	b.n	8000430 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800042e:	2300      	movs	r3, #0
}
 8000430:	0018      	movs	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	b002      	add	sp, #8
 8000436:	bd80      	pop	{r7, pc}

08000438 <LL_I2C_IsActiveFlag_NACK>:
  * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(I2C_TypeDef *I2Cx)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	2210      	movs	r2, #16
 8000446:	4013      	ands	r3, r2
 8000448:	2b10      	cmp	r3, #16
 800044a:	d101      	bne.n	8000450 <LL_I2C_IsActiveFlag_NACK+0x18>
 800044c:	2301      	movs	r3, #1
 800044e:	e000      	b.n	8000452 <LL_I2C_IsActiveFlag_NACK+0x1a>
 8000450:	2300      	movs	r3, #0
}
 8000452:	0018      	movs	r0, r3
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}

0800045a <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	2210      	movs	r2, #16
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	61da      	str	r2, [r3, #28]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	69fa      	ldr	r2, [r7, #28]
 800048c:	0d51      	lsrs	r1, r2, #21
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	00d2      	lsls	r2, r2, #3
 8000492:	400a      	ands	r2, r1
 8000494:	490a      	ldr	r1, [pc, #40]	; (80004c0 <LL_I2C_HandleTransfer+0x48>)
 8000496:	430a      	orrs	r2, r1
 8000498:	43d2      	mvns	r2, r2
 800049a:	401a      	ands	r2, r3
 800049c:	68b9      	ldr	r1, [r7, #8]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4319      	orrs	r1, r3
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	041b      	lsls	r3, r3, #16
 80004a6:	4319      	orrs	r1, r3
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	4319      	orrs	r1, r3
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	430b      	orrs	r3, r1
 80004b0:	431a      	orrs	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	03ff7bff 	.word	0x03ff7bff

080004c4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	0018      	movs	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}

080004da <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	000a      	movs	r2, r1
 80004e4:	1cfb      	adds	r3, r7, #3
 80004e6:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <bqInit>:
/**
 * @brief	this will start the BQ769x0 chip and check it's present
 * @param	I2Cx - the I2C peripheral, already initialized by the user
 * @retval	(uint8_t)1 if OK, (uint8_t)0 if not
 */
uint8_t bqInit(I2C_TypeDef *I2Cx, condensed_afe_data * afeData, afe_config *afeConfig) {
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	bqI2C = I2Cx;
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <bqInit+0x104>)
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	601a      	str	r2, [r3, #0]
	data = afeData;
 800050a:	4b3d      	ldr	r3, [pc, #244]	; (8000600 <bqInit+0x108>)
 800050c:	68ba      	ldr	r2, [r7, #8]
 800050e:	601a      	str	r2, [r3, #0]
	config = afeConfig;
 8000510:	4b3c      	ldr	r3, [pc, #240]	; (8000604 <bqInit+0x10c>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

	// check if the chip is there
	if(0==writeRegister(CC_CFG, 0x19)) {
 8000516:	2119      	movs	r1, #25
 8000518:	200b      	movs	r0, #11
 800051a:	f000 fd0b 	bl	8000f34 <writeRegister>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d101      	bne.n	8000526 <bqInit+0x2e>
		return 0;
 8000522:	2300      	movs	r3, #0
 8000524:	e065      	b.n	80005f2 <bqInit+0xfa>
	}
	if(0x19!=readRegister(CC_CFG)) {
 8000526:	200b      	movs	r0, #11
 8000528:	f000 fd1e 	bl	8000f68 <readRegister>
 800052c:	0003      	movs	r3, r0
 800052e:	2b19      	cmp	r3, #25
 8000530:	d001      	beq.n	8000536 <bqInit+0x3e>
		return 0;
 8000532:	2300      	movs	r3, #0
 8000534:	e05d      	b.n	80005f2 <bqInit+0xfa>
	}

	// run the initial configuration of the BQ chip
	writeRegister(CELLBAL1, 0x00);
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fcfb 	bl	8000f34 <writeRegister>
	writeRegister(CELLBAL2, 0x00);
 800053e:	2100      	movs	r1, #0
 8000540:	2002      	movs	r0, #2
 8000542:	f000 fcf7 	bl	8000f34 <writeRegister>
	writeRegister(CELLBAL3, 0x00);
 8000546:	2100      	movs	r1, #0
 8000548:	2003      	movs	r0, #3
 800054a:	f000 fcf3 	bl	8000f34 <writeRegister>
	writeRegister(SYS_CTRL1,0b00010000);
 800054e:	2110      	movs	r1, #16
 8000550:	2004      	movs	r0, #4
 8000552:	f000 fcef 	bl	8000f34 <writeRegister>
	writeRegister(SYS_CTRL2,0b01000000);
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	2005      	movs	r0, #5
 800055a:	f000 fceb 	bl	8000f34 <writeRegister>

	// read calibration data
	adcOffset = (signed int) readRegister(ADCOFFSET);  // convert from 2's complement
 800055e:	2051      	movs	r0, #81	; 0x51
 8000560:	f000 fd02 	bl	8000f68 <readRegister>
 8000564:	0003      	movs	r3, r0
 8000566:	001a      	movs	r2, r3
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <bqInit+0x110>)
 800056a:	601a      	str	r2, [r3, #0]
	adcGain = 365 + (((readRegister(ADCGAIN1) & 0b00001100) << 1) |
 800056c:	2050      	movs	r0, #80	; 0x50
 800056e:	f000 fcfb 	bl	8000f68 <readRegister>
 8000572:	0003      	movs	r3, r0
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2218      	movs	r2, #24
 8000578:	4013      	ands	r3, r2
 800057a:	001c      	movs	r4, r3
	  ((readRegister(ADCGAIN2) & 0b11100000) >> 5)); // uV/LSB
 800057c:	2059      	movs	r0, #89	; 0x59
 800057e:	f000 fcf3 	bl	8000f68 <readRegister>
 8000582:	0003      	movs	r3, r0
 8000584:	115b      	asrs	r3, r3, #5
 8000586:	2207      	movs	r2, #7
 8000588:	4013      	ands	r3, r2
	adcGain = 365 + (((readRegister(ADCGAIN1) & 0b00001100) << 1) |
 800058a:	4323      	orrs	r3, r4
 800058c:	336e      	adds	r3, #110	; 0x6e
 800058e:	33ff      	adds	r3, #255	; 0xff
 8000590:	001a      	movs	r2, r3
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <bqInit+0x114>)
 8000594:	601a      	str	r2, [r3, #0]

	// now apply all settings
	setCurrentProtection(config->range,
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <bqInit+0x10c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	7898      	ldrb	r0, [r3, #2]
			config->sc_delay, config->sc_voltage,
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <bqInit+0x10c>)
 800059e:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80005a0:	78d9      	ldrb	r1, [r3, #3]
			config->sc_delay, config->sc_voltage,
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <bqInit+0x10c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80005a6:	791a      	ldrb	r2, [r3, #4]
			config->oc_delay, config->oc_voltage);
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <bqInit+0x10c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80005ac:	795c      	ldrb	r4, [r3, #5]
			config->oc_delay, config->oc_voltage);
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <bqInit+0x10c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
	setCurrentProtection(config->range,
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	0023      	movs	r3, r4
 80005b8:	f000 fac2 	bl	8000b40 <setCurrentProtection>
	setOvUvProtection(config->uv_delay, config->uvLimit, config->ov_delay, config->ovLimit);
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <bqInit+0x10c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	7b18      	ldrb	r0, [r3, #12]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <bqInit+0x10c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	7b59      	ldrb	r1, [r3, #13]
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <bqInit+0x10c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	7b9a      	ldrb	r2, [r3, #14]
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <bqInit+0x10c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	7bdb      	ldrb	r3, [r3, #15]
 80005d4:	f000 fc2e 	bl	8000e34 <setOvUvProtection>

	data->ov_limit_actual = getRealOv();
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <bqInit+0x108>)
 80005da:	681c      	ldr	r4, [r3, #0]
 80005dc:	f000 fa50 	bl	8000a80 <getRealOv>
 80005e0:	0003      	movs	r3, r0
 80005e2:	8623      	strh	r3, [r4, #48]	; 0x30
	data->uv_limit_actual = getRealUv();
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <bqInit+0x108>)
 80005e6:	681c      	ldr	r4, [r3, #0]
 80005e8:	f000 fa7a 	bl	8000ae0 <getRealUv>
 80005ec:	0003      	movs	r3, r0
 80005ee:	85e3      	strh	r3, [r4, #46]	; 0x2e
	return 1;
 80005f0:	2301      	movs	r3, #1
}
 80005f2:	0018      	movs	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b005      	add	sp, #20
 80005f8:	bd90      	pop	{r4, r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000060 	.word	0x20000060
 8000600:	2000006c 	.word	0x2000006c
 8000604:	20000070 	.word	0x20000070
 8000608:	20000064 	.word	0x20000064
 800060c:	20000068 	.word	0x20000068

08000610 <bqAct>:

/**
 *	@brief	This function updates the data from the AFE
 *	@retval	(uint8_t)1 if the system needs to pay attention to the AFE, 0 otherwise
 */
uint8_t bqAct(void) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
	uint8_t retVal = 0x00;
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	uint8_t tempVal;
	// get AFE status and reset all flags
	tempVal = readRegister(SYS_STAT);
 800061c:	1dbc      	adds	r4, r7, #6
 800061e:	2000      	movs	r0, #0
 8000620:	f000 fca2 	bl	8000f68 <readRegister>
 8000624:	0003      	movs	r3, r0
 8000626:	7023      	strb	r3, [r4, #0]
	writeRegister(SYS_STAT,0b10111111);
 8000628:	21bf      	movs	r1, #191	; 0xbf
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fc82 	bl	8000f34 <writeRegister>

	afeStatus = afeStatus | (0b00001111&tempVal);
 8000630:	1dbb      	adds	r3, r7, #6
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	220f      	movs	r2, #15
 8000636:	4013      	ands	r3, r2
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <bqAct+0x78>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4313      	orrs	r3, r2
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <bqAct+0x78>)
 8000644:	701a      	strb	r2, [r3, #0]

	// fast act loop
	if(0b00001111 & tempVal) {
 8000646:	1dbb      	adds	r3, r7, #6
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	220f      	movs	r2, #15
 800064c:	4013      	ands	r3, r2
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <bqAct+0x48>
		// OV, UV , OC , SCD reaction
		bqDisableAll();
 8000654:	f000 f81c 	bl	8000690 <bqDisableAll>
	}

	if(0b10000000 & tempVal) {
 8000658:	1dbb      	adds	r3, r7, #6
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b25b      	sxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	da07      	bge.n	8000672 <bqAct+0x62>
		// read all data registers and process them
		bqReadData(VC1_HI_BYTE,afeRawData,(CC_LO_BYTE-VC1_HI_BYTE)+1);
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <bqAct+0x7c>)
 8000664:	2228      	movs	r2, #40	; 0x28
 8000666:	0019      	movs	r1, r3
 8000668:	200c      	movs	r0, #12
 800066a:	f000 fd05 	bl	8001078 <bqReadData>
		processDataRegisters();
 800066e:	f000 f853 	bl	8000718 <processDataRegisters>
	}

	if(afeStatus) {
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <bqAct+0x78>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <bqAct+0x6e>
		return 1;
 800067a:	2301      	movs	r3, #1
 800067c:	e000      	b.n	8000680 <bqAct+0x70>
	} else {
		return 0;
 800067e:	2300      	movs	r3, #0
	}
}
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	b003      	add	sp, #12
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	20000074 	.word	0x20000074
 800068c:	20000020 	.word	0x20000020

08000690 <bqDisableAll>:

void bqDisableAll(void) {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
	uint8_t tmp;
	tmp = readRegister(SYS_CTRL2);
 8000696:	1dfc      	adds	r4, r7, #7
 8000698:	2005      	movs	r0, #5
 800069a:	f000 fc65 	bl	8000f68 <readRegister>
 800069e:	0003      	movs	r3, r0
 80006a0:	7023      	strb	r3, [r4, #0]
	tmp = tmp & 0b11111100;
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	1dfa      	adds	r2, r7, #7
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	2103      	movs	r1, #3
 80006aa:	438a      	bics	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
	writeRegister(SYS_CTRL2, tmp);
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	0019      	movs	r1, r3
 80006b4:	2005      	movs	r0, #5
 80006b6:	f000 fc3d 	bl	8000f34 <writeRegister>
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b003      	add	sp, #12
 80006c0:	bd90      	pop	{r4, r7, pc}

080006c2 <bqEnableAll>:

void bqEnableAll(void) {
 80006c2:	b590      	push	{r4, r7, lr}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
	uint8_t tmp;
	tmp = readRegister(SYS_CTRL2);
 80006c8:	1dfc      	adds	r4, r7, #7
 80006ca:	2005      	movs	r0, #5
 80006cc:	f000 fc4c 	bl	8000f68 <readRegister>
 80006d0:	0003      	movs	r3, r0
 80006d2:	7023      	strb	r3, [r4, #0]
	tmp = tmp | 0b00000011;
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	1dfa      	adds	r2, r7, #7
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	2103      	movs	r1, #3
 80006dc:	430a      	orrs	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]
	writeRegister(SYS_CTRL2, tmp);
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	0019      	movs	r1, r3
 80006e6:	2005      	movs	r0, #5
 80006e8:	f000 fc24 	bl	8000f34 <writeRegister>
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b003      	add	sp, #12
 80006f2:	bd90      	pop	{r4, r7, pc}

080006f4 <bqBalance>:

void bqBalance(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	writeRegister(CELLBAL1, 0x00);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 fc1a 	bl	8000f34 <writeRegister>
	writeRegister(CELLBAL2, 0x00);
 8000700:	2100      	movs	r1, #0
 8000702:	2002      	movs	r0, #2
 8000704:	f000 fc16 	bl	8000f34 <writeRegister>
	writeRegister(CELLBAL3, 0x00);
 8000708:	2100      	movs	r1, #0
 800070a:	2003      	movs	r0, #3
 800070c:	f000 fc12 	bl	8000f34 <writeRegister>
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <processDataRegisters>:

static void processDataRegisters(void) {
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	af00      	add	r7, sp, #0
	data->status_reg = afeStatus;
 800071c:	4b4e      	ldr	r3, [pc, #312]	; (8000858 <processDataRegisters+0x140>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a4e      	ldr	r2, [pc, #312]	; (800085c <processDataRegisters+0x144>)
 8000722:	7811      	ldrb	r1, [r2, #0]
 8000724:	2226      	movs	r2, #38	; 0x26
 8000726:	5499      	strb	r1, [r3, r2]

	// cell voltage
	data->cells[0] = convertCellVoltage(0);
 8000728:	4b4b      	ldr	r3, [pc, #300]	; (8000858 <processDataRegisters+0x140>)
 800072a:	681c      	ldr	r4, [r3, #0]
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f899 	bl	8000864 <convertCellVoltage>
 8000732:	0003      	movs	r3, r0
 8000734:	8023      	strh	r3, [r4, #0]
	data->cells[1] = convertCellVoltage(1);
 8000736:	4b48      	ldr	r3, [pc, #288]	; (8000858 <processDataRegisters+0x140>)
 8000738:	681c      	ldr	r4, [r3, #0]
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f892 	bl	8000864 <convertCellVoltage>
 8000740:	0003      	movs	r3, r0
 8000742:	8063      	strh	r3, [r4, #2]
	data->cells[2] = convertCellVoltage(2);
 8000744:	4b44      	ldr	r3, [pc, #272]	; (8000858 <processDataRegisters+0x140>)
 8000746:	681c      	ldr	r4, [r3, #0]
 8000748:	2002      	movs	r0, #2
 800074a:	f000 f88b 	bl	8000864 <convertCellVoltage>
 800074e:	0003      	movs	r3, r0
 8000750:	80a3      	strh	r3, [r4, #4]
	data->cells[3] = convertCellVoltage(3);
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <processDataRegisters+0x140>)
 8000754:	681c      	ldr	r4, [r3, #0]
 8000756:	2003      	movs	r0, #3
 8000758:	f000 f884 	bl	8000864 <convertCellVoltage>
 800075c:	0003      	movs	r3, r0
 800075e:	80e3      	strh	r3, [r4, #6]
	data->cells[4] = convertCellVoltage(4);
 8000760:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <processDataRegisters+0x140>)
 8000762:	681c      	ldr	r4, [r3, #0]
 8000764:	2004      	movs	r0, #4
 8000766:	f000 f87d 	bl	8000864 <convertCellVoltage>
 800076a:	0003      	movs	r3, r0
 800076c:	8123      	strh	r3, [r4, #8]
	data->cells[5] = convertCellVoltage(5);
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <processDataRegisters+0x140>)
 8000770:	681c      	ldr	r4, [r3, #0]
 8000772:	2005      	movs	r0, #5
 8000774:	f000 f876 	bl	8000864 <convertCellVoltage>
 8000778:	0003      	movs	r3, r0
 800077a:	8163      	strh	r3, [r4, #10]
	data->cells[6] = convertCellVoltage(6);
 800077c:	4b36      	ldr	r3, [pc, #216]	; (8000858 <processDataRegisters+0x140>)
 800077e:	681c      	ldr	r4, [r3, #0]
 8000780:	2006      	movs	r0, #6
 8000782:	f000 f86f 	bl	8000864 <convertCellVoltage>
 8000786:	0003      	movs	r3, r0
 8000788:	81a3      	strh	r3, [r4, #12]
	data->cells[7] = convertCellVoltage(7);
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <processDataRegisters+0x140>)
 800078c:	681c      	ldr	r4, [r3, #0]
 800078e:	2007      	movs	r0, #7
 8000790:	f000 f868 	bl	8000864 <convertCellVoltage>
 8000794:	0003      	movs	r3, r0
 8000796:	81e3      	strh	r3, [r4, #14]
	data->cells[8] = convertCellVoltage(8);
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <processDataRegisters+0x140>)
 800079a:	681c      	ldr	r4, [r3, #0]
 800079c:	2008      	movs	r0, #8
 800079e:	f000 f861 	bl	8000864 <convertCellVoltage>
 80007a2:	0003      	movs	r3, r0
 80007a4:	8223      	strh	r3, [r4, #16]
	data->cells[9] = convertCellVoltage(9);
 80007a6:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <processDataRegisters+0x140>)
 80007a8:	681c      	ldr	r4, [r3, #0]
 80007aa:	2009      	movs	r0, #9
 80007ac:	f000 f85a 	bl	8000864 <convertCellVoltage>
 80007b0:	0003      	movs	r3, r0
 80007b2:	8263      	strh	r3, [r4, #18]
	data->cells[10] = convertCellVoltage(10);
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <processDataRegisters+0x140>)
 80007b6:	681c      	ldr	r4, [r3, #0]
 80007b8:	200a      	movs	r0, #10
 80007ba:	f000 f853 	bl	8000864 <convertCellVoltage>
 80007be:	0003      	movs	r3, r0
 80007c0:	82a3      	strh	r3, [r4, #20]
	data->cells[11] = convertCellVoltage(11);
 80007c2:	4b25      	ldr	r3, [pc, #148]	; (8000858 <processDataRegisters+0x140>)
 80007c4:	681c      	ldr	r4, [r3, #0]
 80007c6:	200b      	movs	r0, #11
 80007c8:	f000 f84c 	bl	8000864 <convertCellVoltage>
 80007cc:	0003      	movs	r3, r0
 80007ce:	82e3      	strh	r3, [r4, #22]
	data->cells[12] = convertCellVoltage(12);
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <processDataRegisters+0x140>)
 80007d2:	681c      	ldr	r4, [r3, #0]
 80007d4:	200c      	movs	r0, #12
 80007d6:	f000 f845 	bl	8000864 <convertCellVoltage>
 80007da:	0003      	movs	r3, r0
 80007dc:	8323      	strh	r3, [r4, #24]
	data->cells[13] = convertCellVoltage(13);
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <processDataRegisters+0x140>)
 80007e0:	681c      	ldr	r4, [r3, #0]
 80007e2:	200d      	movs	r0, #13
 80007e4:	f000 f83e 	bl	8000864 <convertCellVoltage>
 80007e8:	0003      	movs	r3, r0
 80007ea:	8363      	strh	r3, [r4, #26]
	data->cells[14] = convertCellVoltage(14);
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <processDataRegisters+0x140>)
 80007ee:	681c      	ldr	r4, [r3, #0]
 80007f0:	200e      	movs	r0, #14
 80007f2:	f000 f837 	bl	8000864 <convertCellVoltage>
 80007f6:	0003      	movs	r3, r0
 80007f8:	83a3      	strh	r3, [r4, #28]

	// total voltage
	data->total_voltage=convertPackVolage();
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <processDataRegisters+0x140>)
 80007fc:	681c      	ldr	r4, [r3, #0]
 80007fe:	f000 f88b 	bl	8000918 <convertPackVolage>
 8000802:	0003      	movs	r3, r0
 8000804:	83e3      	strh	r3, [r4, #30]

	// current
	data->system_current = convertPackCurrent();
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <processDataRegisters+0x140>)
 8000808:	681c      	ldr	r4, [r3, #0]
 800080a:	f000 f8c1 	bl	8000990 <convertPackCurrent>
 800080e:	0003      	movs	r3, r0
 8000810:	84a3      	strh	r3, [r4, #36]	; 0x24
	if((data->system_current>0)&&(data->system_current>config->chargeCurrent_mA)) {
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <processDataRegisters+0x140>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2224      	movs	r2, #36	; 0x24
 8000818:	5e9b      	ldrsh	r3, [r3, r2]
 800081a:	2b00      	cmp	r3, #0
 800081c:	dd13      	ble.n	8000846 <processDataRegisters+0x12e>
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <processDataRegisters+0x140>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2224      	movs	r2, #36	; 0x24
 8000824:	5e9a      	ldrsh	r2, [r3, r2]
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <processDataRegisters+0x148>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	210a      	movs	r1, #10
 800082c:	5e5b      	ldrsh	r3, [r3, r1]
 800082e:	429a      	cmp	r2, r3
 8000830:	dd09      	ble.n	8000846 <processDataRegisters+0x12e>
		// over current charge protection;
		afeStatus |= 0b11000000;
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <processDataRegisters+0x144>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2240      	movs	r2, #64	; 0x40
 8000838:	4252      	negs	r2, r2
 800083a:	4313      	orrs	r3, r2
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <processDataRegisters+0x144>)
 8000840:	701a      	strb	r2, [r3, #0]
		bqDisableAll();
 8000842:	f7ff ff25 	bl	8000690 <bqDisableAll>
	}
	//ts1
	data->die_temperature = convertPackDieTS1();
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <processDataRegisters+0x140>)
 8000848:	681c      	ldr	r4, [r3, #0]
 800084a:	f000 f8d9 	bl	8000a00 <convertPackDieTS1>
 800084e:	0003      	movs	r3, r0
 8000850:	6223      	str	r3, [r4, #32]
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	bdb0      	pop	{r4, r5, r7, pc}
 8000858:	2000006c 	.word	0x2000006c
 800085c:	20000074 	.word	0x20000074
 8000860:	20000070 	.word	0x20000070

08000864 <convertCellVoltage>:

static uint16_t convertCellVoltage(uint8_t cellIndex) {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	701a      	strb	r2, [r3, #0]
	if(0==(config->enabled_cells&(1<<cellIndex))) {
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <convertCellVoltage+0xa4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	001a      	movs	r2, r3
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	411a      	asrs	r2, r3
 800087e:	0013      	movs	r3, r2
 8000880:	2201      	movs	r2, #1
 8000882:	4013      	ands	r3, r2
 8000884:	d101      	bne.n	800088a <convertCellVoltage+0x26>
		return 0;
 8000886:	2300      	movs	r3, #0
 8000888:	e03a      	b.n	8000900 <convertCellVoltage+0x9c>
	} else {
		uint8_t high;
		uint8_t low;
		high = afeRawData[cellIndex*2];
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	005a      	lsls	r2, r3, #1
 8000890:	200f      	movs	r0, #15
 8000892:	183b      	adds	r3, r7, r0
 8000894:	491d      	ldr	r1, [pc, #116]	; (800090c <convertCellVoltage+0xa8>)
 8000896:	5c8a      	ldrb	r2, [r1, r2]
 8000898:	701a      	strb	r2, [r3, #0]
		low = afeRawData[(cellIndex*2)+1];
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	240e      	movs	r4, #14
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	4919      	ldr	r1, [pc, #100]	; (800090c <convertCellVoltage+0xa8>)
 80008a8:	5c8a      	ldrb	r2, [r1, r2]
 80008aa:	701a      	strb	r2, [r3, #0]
		uint16_t rawAdcValue = ((uint16_t)(high<<8) | (uint16_t)low) & 0x3FFF;
 80008ac:	183b      	adds	r3, r7, r0
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	b29a      	uxth	r2, r3
 80008c0:	210c      	movs	r1, #12
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	0492      	lsls	r2, r2, #18
 80008c6:	0c92      	lsrs	r2, r2, #18
 80008c8:	801a      	strh	r2, [r3, #0]
		uint16_t outData = (uint16_t)((((uint32_t)adcGain * (uint32_t)rawAdcValue) + (uint32_t)(adcOffset*1000))/1000);
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	881a      	ldrh	r2, [r3, #0]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <convertCellVoltage+0xac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4353      	muls	r3, r2
 80008d4:	0019      	movs	r1, r3
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <convertCellVoltage+0xb0>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	0013      	movs	r3, r2
 80008dc:	015b      	lsls	r3, r3, #5
 80008de:	1a9b      	subs	r3, r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	189b      	adds	r3, r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	18ca      	adds	r2, r1, r3
 80008e8:	23fa      	movs	r3, #250	; 0xfa
 80008ea:	0099      	lsls	r1, r3, #2
 80008ec:	0010      	movs	r0, r2
 80008ee:	f7ff fc0b 	bl	8000108 <__udivsi3>
 80008f2:	0003      	movs	r3, r0
 80008f4:	001a      	movs	r2, r3
 80008f6:	210a      	movs	r1, #10
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	801a      	strh	r2, [r3, #0]
		return outData;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	881b      	ldrh	r3, [r3, #0]
	}
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b005      	add	sp, #20
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	20000070 	.word	0x20000070
 800090c:	20000020 	.word	0x20000020
 8000910:	20000068 	.word	0x20000068
 8000914:	20000064 	.word	0x20000064

08000918 <convertPackVolage>:

static uint16_t convertPackVolage(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
	// V (BAT) = 4 x GAIN x ADC(cell) + (#Cells x OFFSET)
	// GAIN is stored in units of μV/LSB, while OFFSET is stored in mV units.
	uint8_t high;
	uint8_t low;
	high = afeRawData[BAT_HI_BYTE-VC1_HI_BYTE];
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <convertPackVolage+0x6c>)
 8000922:	7f92      	ldrb	r2, [r2, #30]
 8000924:	701a      	strb	r2, [r3, #0]
	low = afeRawData[BAT_LO_BYTE-VC1_HI_BYTE];
 8000926:	1dbb      	adds	r3, r7, #6
 8000928:	4a16      	ldr	r2, [pc, #88]	; (8000984 <convertPackVolage+0x6c>)
 800092a:	7fd2      	ldrb	r2, [r2, #31]
 800092c:	701a      	strb	r2, [r3, #0]
	uint16_t rawAdcValue = (uint16_t)(high<<8) | (uint16_t)low;
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b29b      	uxth	r3, r3
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b299      	uxth	r1, r3
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b29a      	uxth	r2, r3
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	430a      	orrs	r2, r1
 8000942:	801a      	strh	r2, [r3, #0]
	uint16_t outData = (uint16_t)(((uint32_t)4*(uint32_t)adcGain*(uint32_t)rawAdcValue + ((uint32_t)4*adcOffset*1000))/(uint32_t)1000);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	881a      	ldrh	r2, [r3, #0]
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <convertPackVolage+0x70>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4353      	muls	r3, r2
 800094e:	0019      	movs	r1, r3
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <convertPackVolage+0x74>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	0013      	movs	r3, r2
 8000956:	015b      	lsls	r3, r3, #5
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	189b      	adds	r3, r3, r2
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	18cb      	adds	r3, r1, r3
 8000962:	009a      	lsls	r2, r3, #2
 8000964:	23fa      	movs	r3, #250	; 0xfa
 8000966:	0099      	lsls	r1, r3, #2
 8000968:	0010      	movs	r0, r2
 800096a:	f7ff fbcd 	bl	8000108 <__udivsi3>
 800096e:	0003      	movs	r3, r0
 8000970:	001a      	movs	r2, r3
 8000972:	1cbb      	adds	r3, r7, #2
 8000974:	801a      	strh	r2, [r3, #0]
	return outData;
 8000976:	1cbb      	adds	r3, r7, #2
 8000978:	881b      	ldrh	r3, [r3, #0]
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000020 	.word	0x20000020
 8000988:	20000068 	.word	0x20000068
 800098c:	20000064 	.word	0x20000064

08000990 <convertPackCurrent>:

static int16_t convertPackCurrent(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	uint8_t high;
	uint8_t low;
	high = afeRawData[CC_HI_BYTE-VC1_HI_BYTE];
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <convertPackCurrent+0x68>)
 800099a:	2126      	movs	r1, #38	; 0x26
 800099c:	5c52      	ldrb	r2, [r2, r1]
 800099e:	701a      	strb	r2, [r3, #0]
	low = afeRawData[CC_LO_BYTE-VC1_HI_BYTE];
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <convertPackCurrent+0x68>)
 80009a4:	2127      	movs	r1, #39	; 0x27
 80009a6:	5c52      	ldrb	r2, [r2, r1]
 80009a8:	701a      	strb	r2, [r3, #0]
	int16_t rawAdcValue = (uint16_t)(high<<8) | (uint16_t)low;
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b29a      	uxth	r2, r3
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	801a      	strh	r2, [r3, #0]
	int16_t outData = (int16_t)((((int32_t)rawAdcValue*(int32_t)844))/((int32_t)100*(int32_t)config->shuntValue));
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	5e9b      	ldrsh	r3, [r3, r2]
 80009c8:	22d3      	movs	r2, #211	; 0xd3
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	435a      	muls	r2, r3
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <convertPackCurrent+0x6c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	891b      	ldrh	r3, [r3, #8]
 80009d4:	0019      	movs	r1, r3
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	434b      	muls	r3, r1
 80009da:	0019      	movs	r1, r3
 80009dc:	0010      	movs	r0, r2
 80009de:	f7ff fc1d 	bl	800021c <__divsi3>
 80009e2:	0003      	movs	r3, r0
 80009e4:	001a      	movs	r2, r3
 80009e6:	1cbb      	adds	r3, r7, #2
 80009e8:	801a      	strh	r2, [r3, #0]
	return outData;
 80009ea:	1cbb      	adds	r3, r7, #2
 80009ec:	2200      	movs	r2, #0
 80009ee:	5e9b      	ldrsh	r3, [r3, r2]
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000020 	.word	0x20000020
 80009fc:	20000070 	.word	0x20000070

08000a00 <convertPackDieTS1>:

static int32_t convertPackDieTS1(void) {
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
	uint8_t high;
	uint8_t low;
	high = afeRawData[TS1_HI_BYTE-VC1_HI_BYTE];
 8000a06:	200f      	movs	r0, #15
 8000a08:	183b      	adds	r3, r7, r0
 8000a0a:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <convertPackDieTS1+0x74>)
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	5c52      	ldrb	r2, [r2, r1]
 8000a10:	701a      	strb	r2, [r3, #0]
	low = afeRawData[TS1_LO_BYTE-VC1_HI_BYTE];
 8000a12:	240e      	movs	r4, #14
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <convertPackDieTS1+0x74>)
 8000a18:	2121      	movs	r1, #33	; 0x21
 8000a1a:	5c52      	ldrb	r2, [r2, r1]
 8000a1c:	701a      	strb	r2, [r3, #0]
	uint16_t rawAdcValue = ((uint16_t)(high<<8) | (uint16_t)low) & 0x3FFF;
 8000a1e:	183b      	adds	r3, r7, r0
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	210c      	movs	r1, #12
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	0492      	lsls	r2, r2, #18
 8000a38:	0c92      	lsrs	r2, r2, #18
 8000a3a:	801a      	strh	r2, [r3, #0]
	int32_t vtsx = rawAdcValue * 382; //uV
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	881a      	ldrh	r2, [r3, #0]
 8000a40:	0013      	movs	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	189b      	adds	r3, r3, r2
 8000a46:	019b      	lsls	r3, r3, #6
 8000a48:	1a9b      	subs	r3, r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
	int32_t temp = (int32_t)((int32_t)25000 - ((int32_t)vtsx-(int32_t)1200000) /(int32_t) 4);
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <convertPackDieTS1+0x78>)
 8000a52:	4694      	mov	ip, r2
 8000a54:	4463      	add	r3, ip
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da00      	bge.n	8000a5c <convertPackDieTS1+0x5c>
 8000a5a:	3303      	adds	r3, #3
 8000a5c:	109b      	asrs	r3, r3, #2
 8000a5e:	425b      	negs	r3, r3
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <convertPackDieTS1+0x7c>)
 8000a62:	4694      	mov	ip, r2
 8000a64:	4463      	add	r3, ip
 8000a66:	607b      	str	r3, [r7, #4]
	return temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b005      	add	sp, #20
 8000a70:	bd90      	pop	{r4, r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000020 	.word	0x20000020
 8000a78:	ffedb080 	.word	0xffedb080
 8000a7c:	000061a8 	.word	0x000061a8

08000a80 <getRealOv>:

static uint16_t getRealOv(void) {
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
	uint8_t raw = readRegister(OV_TRIP);
 8000a86:	1dfc      	adds	r4, r7, #7
 8000a88:	2009      	movs	r0, #9
 8000a8a:	f000 fa6d 	bl	8000f68 <readRegister>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	7023      	strb	r3, [r4, #0]
	uint16_t val =(uint16_t)((((uint32_t)(raw<<4)|(uint32_t)(1<<13))*(uint32_t)adcGain+(uint32_t)(adcOffset*1000))/(uint32_t)1000);
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <getRealOv+0x58>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4353      	muls	r3, r2
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <getRealOv+0x5c>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	0013      	movs	r3, r2
 8000aae:	015b      	lsls	r3, r3, #5
 8000ab0:	1a9b      	subs	r3, r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	189b      	adds	r3, r3, r2
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	18ca      	adds	r2, r1, r3
 8000aba:	23fa      	movs	r3, #250	; 0xfa
 8000abc:	0099      	lsls	r1, r3, #2
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff fb22 	bl	8000108 <__udivsi3>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	801a      	strh	r2, [r3, #0]
	return val;
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	881b      	ldrh	r3, [r3, #0]
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	20000068 	.word	0x20000068
 8000adc:	20000064 	.word	0x20000064

08000ae0 <getRealUv>:

static uint16_t getRealUv(void) {
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
	uint8_t raw = readRegister(UV_TRIP);
 8000ae6:	1dfc      	adds	r4, r7, #7
 8000ae8:	200a      	movs	r0, #10
 8000aea:	f000 fa3d 	bl	8000f68 <readRegister>
 8000aee:	0003      	movs	r3, r0
 8000af0:	7023      	strb	r3, [r4, #0]
	uint16_t val =(uint16_t)((((uint32_t)(raw<<4)|(uint32_t)(1<<12))*(uint32_t)adcGain+(uint32_t)(adcOffset*1000))/(uint32_t)1000);
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	001a      	movs	r2, r3
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	015b      	lsls	r3, r3, #5
 8000afe:	431a      	orrs	r2, r3
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <getRealUv+0x58>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4353      	muls	r3, r2
 8000b06:	0019      	movs	r1, r3
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <getRealUv+0x5c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	015b      	lsls	r3, r3, #5
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	189b      	adds	r3, r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	18ca      	adds	r2, r1, r3
 8000b1a:	23fa      	movs	r3, #250	; 0xfa
 8000b1c:	0099      	lsls	r1, r3, #2
 8000b1e:	0010      	movs	r0, r2
 8000b20:	f7ff faf2 	bl	8000108 <__udivsi3>
 8000b24:	0003      	movs	r3, r0
 8000b26:	001a      	movs	r2, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	801a      	strh	r2, [r3, #0]
	return val;
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	881b      	ldrh	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b003      	add	sp, #12
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	20000068 	.word	0x20000068
 8000b3c:	20000064 	.word	0x20000064

08000b40 <setCurrentProtection>:


static void setCurrentProtection(threshold range,
        short_circuit_delay_us sc_delay, short_circuit_discharge_mv sc_voltage,
        over_current_delay_ms oc_delay, over_current_discharge_mv oc_voltage ) {
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	0005      	movs	r5, r0
 8000b48:	000c      	movs	r4, r1
 8000b4a:	0010      	movs	r0, r2
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	1c2a      	adds	r2, r5, #0
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	1dbb      	adds	r3, r7, #6
 8000b56:	1c22      	adds	r2, r4, #0
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	1d7b      	adds	r3, r7, #5
 8000b5c:	1c02      	adds	r2, r0, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	1c0a      	adds	r2, r1, #0
 8000b64:	701a      	strb	r2, [r3, #0]

	uint8_t reg = readRegister(PROTECT1) & 0b01100000;
 8000b66:	2006      	movs	r0, #6
 8000b68:	f000 f9fe 	bl	8000f68 <readRegister>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	0019      	movs	r1, r3
 8000b70:	230f      	movs	r3, #15
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2260      	movs	r2, #96	; 0x60
 8000b76:	400a      	ands	r2, r1
 8000b78:	701a      	strb	r2, [r3, #0]
	// range control
	switch(range) {
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00a      	beq.n	8000b98 <setCurrentProtection+0x58>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d109      	bne.n	8000b9a <setCurrentProtection+0x5a>
		case threshold_lower:
			break;
		case threshold_upper:
			reg |= 0b10000000; // SET RSNS high
 8000b86:	220f      	movs	r2, #15
 8000b88:	18bb      	adds	r3, r7, r2
 8000b8a:	18ba      	adds	r2, r7, r2
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	4249      	negs	r1, r1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
			break;
 8000b96:	e000      	b.n	8000b9a <setCurrentProtection+0x5a>
			break;
 8000b98:	46c0      	nop			; (mov r8, r8)
	}

	switch(sc_delay) {
 8000b9a:	1dbb      	adds	r3, r7, #6
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d005      	beq.n	8000bae <setCurrentProtection+0x6e>
 8000ba2:	dd1c      	ble.n	8000bde <setCurrentProtection+0x9e>
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d00a      	beq.n	8000bbe <setCurrentProtection+0x7e>
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d010      	beq.n	8000bce <setCurrentProtection+0x8e>
 8000bac:	e018      	b.n	8000be0 <setCurrentProtection+0xa0>
		case scd_70_us:
			break;
		case scd_100_us:
			reg |= 0b00001000;
 8000bae:	220f      	movs	r2, #15
 8000bb0:	18bb      	adds	r3, r7, r2
 8000bb2:	18ba      	adds	r2, r7, r2
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]
			break;
 8000bbc:	e010      	b.n	8000be0 <setCurrentProtection+0xa0>
		case scd_200_us:
			reg |= 0b00010000;
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	18bb      	adds	r3, r7, r2
 8000bc2:	18ba      	adds	r2, r7, r2
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]
			break;
 8000bcc:	e008      	b.n	8000be0 <setCurrentProtection+0xa0>
		case scd_400_us:
			reg |= 0b00011000;
 8000bce:	220f      	movs	r2, #15
 8000bd0:	18bb      	adds	r3, r7, r2
 8000bd2:	18ba      	adds	r2, r7, r2
 8000bd4:	7812      	ldrb	r2, [r2, #0]
 8000bd6:	2118      	movs	r1, #24
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
			break;
 8000bdc:	e000      	b.n	8000be0 <setCurrentProtection+0xa0>
			break;
 8000bde:	46c0      	nop			; (mov r8, r8)
	}

	switch(sc_voltage) {
 8000be0:	1d7b      	adds	r3, r7, #5
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d83d      	bhi.n	8000c64 <setCurrentProtection+0x124>
 8000be8:	009a      	lsls	r2, r3, #2
 8000bea:	4b8f      	ldr	r3, [pc, #572]	; (8000e28 <setCurrentProtection+0x2e8>)
 8000bec:	18d3      	adds	r3, r2, r3
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	469f      	mov	pc, r3
		case scd_44_22_mv:
			break;
		case scd_67_33_mv:
			reg |= 0b00000001;
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	18bb      	adds	r3, r7, r2
 8000bf6:	18ba      	adds	r2, r7, r2
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	701a      	strb	r2, [r3, #0]
			break;
 8000c00:	e030      	b.n	8000c64 <setCurrentProtection+0x124>
		case scd_89_44_mv:
			reg |= 0b00000010;
 8000c02:	220f      	movs	r2, #15
 8000c04:	18bb      	adds	r3, r7, r2
 8000c06:	18ba      	adds	r2, r7, r2
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	701a      	strb	r2, [r3, #0]
			break;
 8000c10:	e028      	b.n	8000c64 <setCurrentProtection+0x124>
		case scd_111_56_mv:
			reg |= 0b00000011;
 8000c12:	220f      	movs	r2, #15
 8000c14:	18bb      	adds	r3, r7, r2
 8000c16:	18ba      	adds	r2, r7, r2
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	701a      	strb	r2, [r3, #0]
			break;
 8000c20:	e020      	b.n	8000c64 <setCurrentProtection+0x124>
		case scd_133_67_mv:
			reg |= 0b00000100;
 8000c22:	220f      	movs	r2, #15
 8000c24:	18bb      	adds	r3, r7, r2
 8000c26:	18ba      	adds	r2, r7, r2
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
			break;
 8000c30:	e018      	b.n	8000c64 <setCurrentProtection+0x124>
		case scd_155_78_mv:
			reg |= 0b00000101;
 8000c32:	220f      	movs	r2, #15
 8000c34:	18bb      	adds	r3, r7, r2
 8000c36:	18ba      	adds	r2, r7, r2
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	701a      	strb	r2, [r3, #0]
			break;
 8000c40:	e010      	b.n	8000c64 <setCurrentProtection+0x124>
		case scd_178_89_mv:
			reg |= 0b00000110;
 8000c42:	220f      	movs	r2, #15
 8000c44:	18bb      	adds	r3, r7, r2
 8000c46:	18ba      	adds	r2, r7, r2
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	2106      	movs	r1, #6
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	701a      	strb	r2, [r3, #0]
			break;
 8000c50:	e008      	b.n	8000c64 <setCurrentProtection+0x124>
		case scd_200_100_mv:
			reg |= 0b00000111;
 8000c52:	220f      	movs	r2, #15
 8000c54:	18bb      	adds	r3, r7, r2
 8000c56:	18ba      	adds	r2, r7, r2
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	2107      	movs	r1, #7
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
			break;
 8000c60:	e000      	b.n	8000c64 <setCurrentProtection+0x124>
			break;
 8000c62:	46c0      	nop			; (mov r8, r8)
	}
	writeRegister(PROTECT1, reg);
 8000c64:	240f      	movs	r4, #15
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f000 f961 	bl	8000f34 <writeRegister>

	reg = readRegister(PROTECT2) & 0b10000000;
 8000c72:	2007      	movs	r0, #7
 8000c74:	f000 f978 	bl	8000f68 <readRegister>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	227f      	movs	r2, #127	; 0x7f
 8000c80:	4391      	bics	r1, r2
 8000c82:	000a      	movs	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]

	switch(oc_delay) {
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	d83d      	bhi.n	8000d0a <setCurrentProtection+0x1ca>
 8000c8e:	009a      	lsls	r2, r3, #2
 8000c90:	4b66      	ldr	r3, [pc, #408]	; (8000e2c <setCurrentProtection+0x2ec>)
 8000c92:	18d3      	adds	r3, r2, r3
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	469f      	mov	pc, r3
		case ocd_8_ms:
			break;
		case ocd_20_ms:
			reg |= 0b00010000;
 8000c98:	220f      	movs	r2, #15
 8000c9a:	18bb      	adds	r3, r7, r2
 8000c9c:	18ba      	adds	r2, r7, r2
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	2110      	movs	r1, #16
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
			break;
 8000ca6:	e030      	b.n	8000d0a <setCurrentProtection+0x1ca>
		case ocd_40_ms:
			reg |= 0b00100000;
 8000ca8:	220f      	movs	r2, #15
 8000caa:	18bb      	adds	r3, r7, r2
 8000cac:	18ba      	adds	r2, r7, r2
 8000cae:	7812      	ldrb	r2, [r2, #0]
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
			break;
 8000cb6:	e028      	b.n	8000d0a <setCurrentProtection+0x1ca>
		case ocd_80_ms:
			reg |= 0b00110000;
 8000cb8:	220f      	movs	r2, #15
 8000cba:	18bb      	adds	r3, r7, r2
 8000cbc:	18ba      	adds	r2, r7, r2
 8000cbe:	7812      	ldrb	r2, [r2, #0]
 8000cc0:	2130      	movs	r1, #48	; 0x30
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
			break;
 8000cc6:	e020      	b.n	8000d0a <setCurrentProtection+0x1ca>
		case ocd_160_ms:
			reg |= 0b01000000;
 8000cc8:	220f      	movs	r2, #15
 8000cca:	18bb      	adds	r3, r7, r2
 8000ccc:	18ba      	adds	r2, r7, r2
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	2140      	movs	r1, #64	; 0x40
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
			break;
 8000cd6:	e018      	b.n	8000d0a <setCurrentProtection+0x1ca>
		case ocd_320_ms:
			reg |= 0b01010000;
 8000cd8:	220f      	movs	r2, #15
 8000cda:	18bb      	adds	r3, r7, r2
 8000cdc:	18ba      	adds	r2, r7, r2
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	2150      	movs	r1, #80	; 0x50
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
			break;
 8000ce6:	e010      	b.n	8000d0a <setCurrentProtection+0x1ca>
		case ocd_640_ms:
			reg |= 0b01100000;
 8000ce8:	220f      	movs	r2, #15
 8000cea:	18bb      	adds	r3, r7, r2
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	2160      	movs	r1, #96	; 0x60
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
			break;
 8000cf6:	e008      	b.n	8000d0a <setCurrentProtection+0x1ca>
		case ocd_1280_ms:
			reg |= 0b01110000;
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	18bb      	adds	r3, r7, r2
 8000cfc:	18ba      	adds	r2, r7, r2
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	2170      	movs	r1, #112	; 0x70
 8000d02:	430a      	orrs	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
			break;
 8000d06:	e000      	b.n	8000d0a <setCurrentProtection+0x1ca>
			break;
 8000d08:	46c0      	nop			; (mov r8, r8)
	}

	switch(oc_voltage) {
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d900      	bls.n	8000d16 <setCurrentProtection+0x1d6>
 8000d14:	e07d      	b.n	8000e12 <setCurrentProtection+0x2d2>
 8000d16:	009a      	lsls	r2, r3, #2
 8000d18:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <setCurrentProtection+0x2f0>)
 8000d1a:	18d3      	adds	r3, r2, r3
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	469f      	mov	pc, r3
		case ocd_17_8_mv:
			break;
		case ocd_22_11_mv:
			reg |= 0b00000001;
 8000d20:	220f      	movs	r2, #15
 8000d22:	18bb      	adds	r3, r7, r2
 8000d24:	18ba      	adds	r2, r7, r2
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
			break;
 8000d2e:	e070      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_28_14_mv:
			reg |= 0b00000010;
 8000d30:	220f      	movs	r2, #15
 8000d32:	18bb      	adds	r3, r7, r2
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	7812      	ldrb	r2, [r2, #0]
 8000d38:	2102      	movs	r1, #2
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
			break;
 8000d3e:	e068      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_33_17_mv:
			reg |= 0b00000011;
 8000d40:	220f      	movs	r2, #15
 8000d42:	18bb      	adds	r3, r7, r2
 8000d44:	18ba      	adds	r2, r7, r2
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	2103      	movs	r1, #3
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
			break;
 8000d4e:	e060      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_39_19_mv:
			reg |= 0b00000100;
 8000d50:	220f      	movs	r2, #15
 8000d52:	18bb      	adds	r3, r7, r2
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	2104      	movs	r1, #4
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
			break;
 8000d5e:	e058      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_44_22_mv:
			reg |= 0b00000101;
 8000d60:	220f      	movs	r2, #15
 8000d62:	18bb      	adds	r3, r7, r2
 8000d64:	18ba      	adds	r2, r7, r2
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	2105      	movs	r1, #5
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
			break;
 8000d6e:	e050      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_50_25_mv:
			reg |= 0b00000110;
 8000d70:	220f      	movs	r2, #15
 8000d72:	18bb      	adds	r3, r7, r2
 8000d74:	18ba      	adds	r2, r7, r2
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	2106      	movs	r1, #6
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
			break;
 8000d7e:	e048      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_56_28_mv:
			reg |= 0b00000111;
 8000d80:	220f      	movs	r2, #15
 8000d82:	18bb      	adds	r3, r7, r2
 8000d84:	18ba      	adds	r2, r7, r2
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	2107      	movs	r1, #7
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
			break;
 8000d8e:	e040      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_61_31_mv:
			reg |= 0b00001000;
 8000d90:	220f      	movs	r2, #15
 8000d92:	18bb      	adds	r3, r7, r2
 8000d94:	18ba      	adds	r2, r7, r2
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	2108      	movs	r1, #8
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
			break;
 8000d9e:	e038      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_67_33_mv:
			reg |= 0b00001001;
 8000da0:	220f      	movs	r2, #15
 8000da2:	18bb      	adds	r3, r7, r2
 8000da4:	18ba      	adds	r2, r7, r2
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	2109      	movs	r1, #9
 8000daa:	430a      	orrs	r2, r1
 8000dac:	701a      	strb	r2, [r3, #0]
			break;
 8000dae:	e030      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_72_36_mv:
			reg |= 0b00001010;
 8000db0:	220f      	movs	r2, #15
 8000db2:	18bb      	adds	r3, r7, r2
 8000db4:	18ba      	adds	r2, r7, r2
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	210a      	movs	r1, #10
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	701a      	strb	r2, [r3, #0]
			break;
 8000dbe:	e028      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_78_39_mv:
			reg |= 0b00001011;
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	18bb      	adds	r3, r7, r2
 8000dc4:	18ba      	adds	r2, r7, r2
 8000dc6:	7812      	ldrb	r2, [r2, #0]
 8000dc8:	210b      	movs	r1, #11
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
			break;
 8000dce:	e020      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_83_42_mv:
			reg |= 0b00001100;
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	18bb      	adds	r3, r7, r2
 8000dd4:	18ba      	adds	r2, r7, r2
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	210c      	movs	r1, #12
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
			break;
 8000dde:	e018      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_89_44_mv:
			reg |= 0b00001101;
 8000de0:	220f      	movs	r2, #15
 8000de2:	18bb      	adds	r3, r7, r2
 8000de4:	18ba      	adds	r2, r7, r2
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	210d      	movs	r1, #13
 8000dea:	430a      	orrs	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
			break;
 8000dee:	e010      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_94_47_mv:
			reg |= 0b00001110;
 8000df0:	220f      	movs	r2, #15
 8000df2:	18bb      	adds	r3, r7, r2
 8000df4:	18ba      	adds	r2, r7, r2
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	210e      	movs	r1, #14
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
			break;
 8000dfe:	e008      	b.n	8000e12 <setCurrentProtection+0x2d2>
		case ocd_100_50_mv:
			reg |= 0b00001111;
 8000e00:	220f      	movs	r2, #15
 8000e02:	18bb      	adds	r3, r7, r2
 8000e04:	18ba      	adds	r2, r7, r2
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	210f      	movs	r1, #15
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]
			break;
 8000e0e:	e000      	b.n	8000e12 <setCurrentProtection+0x2d2>
			break;
 8000e10:	46c0      	nop			; (mov r8, r8)
	}
	writeRegister(PROTECT2, reg);
 8000e12:	230f      	movs	r3, #15
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	0019      	movs	r1, r3
 8000e1a:	2007      	movs	r0, #7
 8000e1c:	f000 f88a 	bl	8000f34 <writeRegister>
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bdb0      	pop	{r4, r5, r7, pc}
 8000e28:	08002a44 	.word	0x08002a44
 8000e2c:	08002a64 	.word	0x08002a64
 8000e30:	08002a84 	.word	0x08002a84

08000e34 <setOvUvProtection>:

static void setOvUvProtection(under_voltage_delay_s uv_delay, uint8_t uvLimit, over_voltage_delay_s  ov_delay, uint8_t ovLimit) {
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0005      	movs	r5, r0
 8000e3c:	000c      	movs	r4, r1
 8000e3e:	0010      	movs	r0, r2
 8000e40:	0019      	movs	r1, r3
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	1c2a      	adds	r2, r5, #0
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	1dbb      	adds	r3, r7, #6
 8000e4a:	1c22      	adds	r2, r4, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	1d7b      	adds	r3, r7, #5
 8000e50:	1c02      	adds	r2, r0, #0
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	1c0a      	adds	r2, r1, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	uint8_t reg = readRegister(PROTECT3) & 0b00001111;
 8000e5a:	2008      	movs	r0, #8
 8000e5c:	f000 f884 	bl	8000f68 <readRegister>
 8000e60:	0003      	movs	r3, r0
 8000e62:	0019      	movs	r1, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	220f      	movs	r2, #15
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	switch(uv_delay) {
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d00e      	beq.n	8000e94 <setOvUvProtection+0x60>
 8000e76:	dc02      	bgt.n	8000e7e <setOvUvProtection+0x4a>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d005      	beq.n	8000e88 <setOvUvProtection+0x54>
 8000e7c:	e026      	b.n	8000ecc <setOvUvProtection+0x98>
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d00e      	beq.n	8000ea0 <setOvUvProtection+0x6c>
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d017      	beq.n	8000eb6 <setOvUvProtection+0x82>
 8000e86:	e021      	b.n	8000ecc <setOvUvProtection+0x98>
		case uvd_1_s:
			reg |= 00000000;
 8000e88:	220f      	movs	r2, #15
 8000e8a:	18bb      	adds	r3, r7, r2
 8000e8c:	18ba      	adds	r2, r7, r2
 8000e8e:	7812      	ldrb	r2, [r2, #0]
 8000e90:	701a      	strb	r2, [r3, #0]
			break;
 8000e92:	e01b      	b.n	8000ecc <setOvUvProtection+0x98>
		case uvd_4_s:
			reg |= 01000000;
 8000e94:	220f      	movs	r2, #15
 8000e96:	18bb      	adds	r3, r7, r2
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	7812      	ldrb	r2, [r2, #0]
 8000e9c:	701a      	strb	r2, [r3, #0]
			break;
 8000e9e:	e015      	b.n	8000ecc <setOvUvProtection+0x98>
		case uvd_8_s:
			reg |= 10000000;
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	4252      	negs	r2, r2
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b25a      	sxtb	r2, r3
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
			break;
 8000eb4:	e00a      	b.n	8000ecc <setOvUvProtection+0x98>
		case uvd_16_s:
			reg |= 11000000;
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	2240      	movs	r2, #64	; 0x40
 8000ec0:	4252      	negs	r2, r2
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b25a      	sxtb	r2, r3
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
			break;
 8000eca:	46c0      	nop			; (mov r8, r8)
	}

	switch(ov_delay) {
 8000ecc:	1d7b      	adds	r3, r7, #5
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d005      	beq.n	8000ee0 <setOvUvProtection+0xac>
 8000ed4:	dd16      	ble.n	8000f04 <setOvUvProtection+0xd0>
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d008      	beq.n	8000eec <setOvUvProtection+0xb8>
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d00c      	beq.n	8000ef8 <setOvUvProtection+0xc4>
 8000ede:	e012      	b.n	8000f06 <setOvUvProtection+0xd2>
		case ovd_1_s:
			break;
		case ovd_2_s:
			reg |= 00010000;
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	18bb      	adds	r3, r7, r2
 8000ee4:	18ba      	adds	r2, r7, r2
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	701a      	strb	r2, [r3, #0]
			break;
 8000eea:	e00c      	b.n	8000f06 <setOvUvProtection+0xd2>
		case ovd_4_s:
			reg |= 00100000;
 8000eec:	220f      	movs	r2, #15
 8000eee:	18bb      	adds	r3, r7, r2
 8000ef0:	18ba      	adds	r2, r7, r2
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	701a      	strb	r2, [r3, #0]
			break;
 8000ef6:	e006      	b.n	8000f06 <setOvUvProtection+0xd2>
		case ovd_8_s:
			reg |= 00110000;
 8000ef8:	220f      	movs	r2, #15
 8000efa:	18bb      	adds	r3, r7, r2
 8000efc:	18ba      	adds	r2, r7, r2
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	701a      	strb	r2, [r3, #0]
			break;
 8000f02:	e000      	b.n	8000f06 <setOvUvProtection+0xd2>
			break;
 8000f04:	46c0      	nop			; (mov r8, r8)
	}

	writeRegister(PROTECT3, reg);
 8000f06:	230f      	movs	r3, #15
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	2008      	movs	r0, #8
 8000f10:	f000 f810 	bl	8000f34 <writeRegister>
	writeRegister(UV_TRIP, uvLimit);
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	0019      	movs	r1, r3
 8000f1a:	200a      	movs	r0, #10
 8000f1c:	f000 f80a 	bl	8000f34 <writeRegister>
	writeRegister(OV_TRIP, ovLimit);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	0019      	movs	r1, r3
 8000f26:	2009      	movs	r0, #9
 8000f28:	f000 f804 	bl	8000f34 <writeRegister>
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bdb0      	pop	{r4, r5, r7, pc}

08000f34 <writeRegister>:

static uint8_t writeRegister(uint8_t reg, uint8_t data) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	1dbb      	adds	r3, r7, #6
 8000f42:	1c0a      	adds	r2, r1, #0
 8000f44:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];
	buf[0]=data;
 8000f46:	210c      	movs	r1, #12
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	1dba      	adds	r2, r7, #6
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	701a      	strb	r2, [r3, #0]
	return bqSendData(reg,buf,1);
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2201      	movs	r2, #1
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f81d 	bl	8000f98 <bqSendData>
 8000f5e:	0003      	movs	r3, r0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <readRegister>:

static uint8_t readRegister(uint8_t reg) {
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	0002      	movs	r2, r0
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1]={0};
 8000f74:	240c      	movs	r4, #12
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	bqReadData(reg,buf,1);
 8000f7c:	1939      	adds	r1, r7, r4
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2201      	movs	r2, #1
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 f877 	bl	8001078 <bqReadData>
	return buf[0];
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	781b      	ldrb	r3, [r3, #0]
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b005      	add	sp, #20
 8000f94:	bd90      	pop	{r4, r7, pc}
	...

08000f98 <bqSendData>:

static uint8_t bqSendData(uint8_t addr, uint8_t *buffer, uint8_t count) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6039      	str	r1, [r7, #0]
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	1c02      	adds	r2, r0, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	1dbb      	adds	r3, r7, #6
 8000faa:	1c0a      	adds	r2, r1, #0
 8000fac:	701a      	strb	r2, [r3, #0]
	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, (count+1)
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <bqSendData+0xd8>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	1dbb      	adds	r3, r7, #6
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	001a      	movs	r2, r3
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <bqSendData+0xdc>)
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	049b      	lsls	r3, r3, #18
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2130      	movs	r1, #48	; 0x30
 8000fca:	f7ff fa55 	bl	8000478 <LL_I2C_HandleTransfer>
			, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_TXIS(bqI2C)));
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <bqSendData+0xd8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff fa2f 	bl	8000438 <LL_I2C_IsActiveFlag_NACK>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d106      	bne.n	8000fec <bqSendData+0x54>
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <bqSendData+0xd8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fa06 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d0f1      	beq.n	8000fd0 <bqSendData+0x38>
	if(1==LL_I2C_IsActiveFlag_TXIS(bqI2C)) {
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <bqSendData+0xd8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff f9ff 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d12c      	bne.n	8001056 <bqSendData+0xbe>
		LL_I2C_TransmitData8(bqI2C, addr);
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <bqSendData+0xd8>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	0019      	movs	r1, r3
 8001006:	0010      	movs	r0, r2
 8001008:	f7ff fa67 	bl	80004da <LL_I2C_TransmitData8>
		for(uint8_t cnt=0;cnt<count;cnt++) {
 800100c:	230f      	movs	r3, #15
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e017      	b.n	8001046 <bqSendData+0xae>
			while(0==LL_I2C_IsActiveFlag_TXIS(bqI2C));
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <bqSendData+0xd8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff f9e9 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d0f8      	beq.n	8001018 <bqSendData+0x80>
			LL_I2C_TransmitData8(bqI2C, buffer[cnt]);
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <bqSendData+0xd8>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	240f      	movs	r4, #15
 800102c:	193b      	adds	r3, r7, r4
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	18d3      	adds	r3, r2, r3
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	0019      	movs	r1, r3
 8001038:	f7ff fa4f 	bl	80004da <LL_I2C_TransmitData8>
		for(uint8_t cnt=0;cnt<count;cnt++) {
 800103c:	193b      	adds	r3, r7, r4
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	193b      	adds	r3, r7, r4
 8001042:	3201      	adds	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	230f      	movs	r3, #15
 8001048:	18fa      	adds	r2, r7, r3
 800104a:	1dbb      	adds	r3, r7, #6
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3e0      	bcc.n	8001016 <bqSendData+0x7e>
 8001054:	e006      	b.n	8001064 <bqSendData+0xcc>
		}
	} else {
		LL_I2C_ClearFlag_NACK(bqI2C);
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <bqSendData+0xd8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff f9fd 	bl	800045a <LL_I2C_ClearFlag_NACK>
		return 0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	e000      	b.n	8001066 <bqSendData+0xce>
	}
	return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b005      	add	sp, #20
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	20000060 	.word	0x20000060
 8001074:	80002000 	.word	0x80002000

08001078 <bqReadData>:

static uint8_t bqReadData(uint8_t addr, uint8_t *buffer, uint8_t count) {
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6039      	str	r1, [r7, #0]
 8001080:	0011      	movs	r1, r2
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	1c02      	adds	r2, r0, #0
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	1dbb      	adds	r3, r7, #6
 800108a:	1c0a      	adds	r2, r1, #0
 800108c:	701a      	strb	r2, [r3, #0]
	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE );
 800108e:	4b3f      	ldr	r3, [pc, #252]	; (800118c <bqReadData+0x114>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <bqReadData+0x118>)
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	2300      	movs	r3, #0
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2200      	movs	r2, #0
 800109e:	2130      	movs	r1, #48	; 0x30
 80010a0:	f7ff f9ea 	bl	8000478 <LL_I2C_HandleTransfer>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_TXIS(bqI2C)));
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <bqReadData+0x114>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff f9c4 	bl	8000438 <LL_I2C_IsActiveFlag_NACK>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d106      	bne.n	80010c2 <bqReadData+0x4a>
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <bqReadData+0x114>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff f99b 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 80010be:	1e03      	subs	r3, r0, #0
 80010c0:	d0f1      	beq.n	80010a6 <bqReadData+0x2e>
	if(1==LL_I2C_IsActiveFlag_TXIS(bqI2C)) {
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <bqReadData+0x114>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff f994 	bl	80003f4 <LL_I2C_IsActiveFlag_TXIS>
 80010cc:	0003      	movs	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d116      	bne.n	8001100 <bqReadData+0x88>
		LL_I2C_TransmitData8(bqI2C, addr);
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <bqReadData+0x114>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	0019      	movs	r1, r3
 80010dc:	0010      	movs	r0, r2
 80010de:	f7ff f9fc 	bl	80004da <LL_I2C_TransmitData8>
	} else {
		return 0;
	}

	LL_I2C_HandleTransfer(bqI2C, I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, count, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ );
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <bqReadData+0x114>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	1dbb      	adds	r3, r7, #6
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <bqReadData+0x11c>)
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	049b      	lsls	r3, r3, #18
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	0013      	movs	r3, r2
 80010f6:	2200      	movs	r2, #0
 80010f8:	2130      	movs	r1, #48	; 0x30
 80010fa:	f7ff f9bd 	bl	8000478 <LL_I2C_HandleTransfer>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_RXNE(bqI2C)));
 80010fe:	e001      	b.n	8001104 <bqReadData+0x8c>
		return 0;
 8001100:	2300      	movs	r3, #0
 8001102:	e03e      	b.n	8001182 <bqReadData+0x10a>
	while((0==LL_I2C_IsActiveFlag_NACK(bqI2C))&&(0==LL_I2C_IsActiveFlag_RXNE(bqI2C)));
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <bqReadData+0x114>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff f995 	bl	8000438 <LL_I2C_IsActiveFlag_NACK>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d106      	bne.n	8001120 <bqReadData+0xa8>
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <bqReadData+0x114>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0018      	movs	r0, r3
 8001118:	f7ff f97d 	bl	8000416 <LL_I2C_IsActiveFlag_RXNE>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d0f1      	beq.n	8001104 <bqReadData+0x8c>
	if(1==LL_I2C_IsActiveFlag_RXNE(bqI2C)) {
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <bqReadData+0x114>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff f976 	bl	8000416 <LL_I2C_IsActiveFlag_RXNE>
 800112a:	0003      	movs	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d125      	bne.n	800117c <bqReadData+0x104>
		for(uint8_t cnt=0; cnt<count;cnt++) {
 8001130:	230f      	movs	r3, #15
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e018      	b.n	800116c <bqReadData+0xf4>
			while(0==LL_I2C_IsActiveFlag_RXNE(bqI2C));
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <bqReadData+0x114>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff f968 	bl	8000416 <LL_I2C_IsActiveFlag_RXNE>
 8001146:	1e03      	subs	r3, r0, #0
 8001148:	d0f8      	beq.n	800113c <bqReadData+0xc4>
			buffer[cnt]=LL_I2C_ReceiveData8(bqI2C);
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <bqReadData+0x114>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	250f      	movs	r5, #15
 8001150:	197b      	adds	r3, r7, r5
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	18d4      	adds	r4, r2, r3
 8001158:	0008      	movs	r0, r1
 800115a:	f7ff f9b3 	bl	80004c4 <LL_I2C_ReceiveData8>
 800115e:	0003      	movs	r3, r0
 8001160:	7023      	strb	r3, [r4, #0]
		for(uint8_t cnt=0; cnt<count;cnt++) {
 8001162:	197b      	adds	r3, r7, r5
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	197b      	adds	r3, r7, r5
 8001168:	3201      	adds	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	230f      	movs	r3, #15
 800116e:	18fa      	adds	r2, r7, r3
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3df      	bcc.n	800113a <bqReadData+0xc2>
 800117a:	e001      	b.n	8001180 <bqReadData+0x108>
		}
	} else {
		return 0;
 800117c:	2300      	movs	r3, #0
 800117e:	e000      	b.n	8001182 <bqReadData+0x10a>
	}
	return 1;
 8001180:	2301      	movs	r3, #1
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000060 	.word	0x20000060
 8001190:	80002000 	.word	0x80002000
 8001194:	80002400 	.word	0x80002400

08001198 <LL_I2C_EnableClockStretching>:
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a03      	ldr	r2, [pc, #12]	; (80011b4 <LL_I2C_EnableClockStretching+0x1c>)
 80011a6:	401a      	ands	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	fffdffff 	.word	0xfffdffff

080011b8 <LL_I2C_DisableGeneralCall>:
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <LL_I2C_DisableGeneralCall+0x1c>)
 80011c6:	401a      	ands	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	fff7ffff 	.word	0xfff7ffff

080011d8 <LL_I2C_SetOwnAddress2>:
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <LL_I2C_SetOwnAddress2+0x28>)
 80011ea:	401a      	ands	r2, r3
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	60da      	str	r2, [r3, #12]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b004      	add	sp, #16
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	fffff801 	.word	0xfffff801

08001204 <LL_I2C_DisableOwnAddress2>:
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a03      	ldr	r2, [pc, #12]	; (8001220 <LL_I2C_DisableOwnAddress2+0x1c>)
 8001212:	401a      	ands	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	ffff7fff 	.word	0xffff7fff

08001224 <LL_I2C_EnableAutoEndMode>:
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	0492      	lsls	r2, r2, #18
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	605a      	str	r2, [r3, #4]
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <LL_RCC_MSI_Enable+0x18>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <LL_RCC_MSI_Enable+0x18>)
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	0049      	lsls	r1, r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <LL_RCC_MSI_IsReady+0x24>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	401a      	ands	r2, r3
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	429a      	cmp	r2, r3
 8001274:	d101      	bne.n	800127a <LL_RCC_MSI_IsReady+0x1a>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_RCC_MSI_IsReady+0x1c>
 800127a:	2300      	movs	r3, #0
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40021000 	.word	0x40021000

08001288 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <LL_RCC_MSI_SetRange+0x24>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <LL_RCC_MSI_SetRange+0x28>)
 8001296:	4013      	ands	r3, r2
 8001298:	0019      	movs	r1, r3
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <LL_RCC_MSI_SetRange+0x24>)
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40021000 	.word	0x40021000
 80012b0:	ffff1fff 	.word	0xffff1fff

080012b4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	0a19      	lsrs	r1, r3, #8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	061a      	lsls	r2, r3, #24
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40021000 	.word	0x40021000

080012dc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <LL_RCC_SetSysClkSource+0x24>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4393      	bics	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <LL_RCC_SetSysClkSource+0x24>)
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]
}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	40021000 	.word	0x40021000

08001304 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <LL_RCC_GetSysClkSource+0x14>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	220c      	movs	r2, #12
 800130e:	4013      	ands	r3, r2
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	40021000 	.word	0x40021000

0800131c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <LL_RCC_SetAHBPrescaler+0x24>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	22f0      	movs	r2, #240	; 0xf0
 800132a:	4393      	bics	r3, r2
 800132c:	0019      	movs	r1, r3
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <LL_RCC_SetAHBPrescaler+0x24>)
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	430a      	orrs	r2, r1
 8001334:	60da      	str	r2, [r3, #12]
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	40021000 	.word	0x40021000

08001344 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <LL_RCC_SetAPB1Prescaler+0x24>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001352:	4013      	ands	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	430a      	orrs	r2, r1
 800135c:	60da      	str	r2, [r3, #12]
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40021000 	.word	0x40021000
 800136c:	fffff8ff 	.word	0xfffff8ff

08001370 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <LL_RCC_SetAPB2Prescaler+0x24>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <LL_RCC_SetAPB2Prescaler+0x28>)
 800137e:	4013      	ands	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	430a      	orrs	r2, r1
 8001388:	60da      	str	r2, [r3, #12]
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40021000 	.word	0x40021000
 8001398:	ffffc7ff 	.word	0xffffc7ff

0800139c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	0c12      	lsrs	r2, r2, #16
 80013ac:	43d2      	mvns	r2, r2
 80013ae:	401a      	ands	r2, r3
 80013b0:	0011      	movs	r1, r2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	0c1a      	lsrs	r2, r3, #16
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40021000 	.word	0x40021000

080013cc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <LL_RCC_SetI2CClockSource+0x34>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	0911      	lsrs	r1, r2, #4
 80013dc:	22ff      	movs	r2, #255	; 0xff
 80013de:	0312      	lsls	r2, r2, #12
 80013e0:	400a      	ands	r2, r1
 80013e2:	43d2      	mvns	r2, r2
 80013e4:	401a      	ands	r2, r3
 80013e6:	0011      	movs	r1, r2
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	011a      	lsls	r2, r3, #4
 80013ec:	23ff      	movs	r3, #255	; 0xff
 80013ee:	031b      	lsls	r3, r3, #12
 80013f0:	401a      	ands	r2, r3
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <LL_RCC_SetI2CClockSource+0x34>)
 80013f4:	430a      	orrs	r2, r1
 80013f6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000

08001404 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <LL_APB1_GRP1_EnableClock+0x28>)
 800140e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <LL_APB1_GRP1_EnableClock+0x28>)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	430a      	orrs	r2, r1
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <LL_APB1_GRP1_EnableClock+0x28>)
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000

08001430 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <LL_APB2_GRP1_EnableClock+0x28>)
 800143a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <LL_APB2_GRP1_EnableClock+0x28>)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	430a      	orrs	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <LL_APB2_GRP1_EnableClock+0x28>)
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4013      	ands	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000

0800145c <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <LL_IOP_GRP1_EnableClock+0x28>)
 8001466:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <LL_IOP_GRP1_EnableClock+0x28>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	430a      	orrs	r2, r1
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <LL_IOP_GRP1_EnableClock+0x28>)
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b004      	add	sp, #16
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000

08001488 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <LL_FLASH_SetLatency+0x24>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2201      	movs	r2, #1
 8001496:	4393      	bics	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LL_FLASH_SetLatency+0x24>)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40022000 	.word	0x40022000

080014b0 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <LL_FLASH_GetLatency+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	4013      	ands	r3, r2
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	40022000 	.word	0x40022000

080014c8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <LL_PWR_SetRegulVoltageScaling+0x28>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40007000 	.word	0x40007000
 80014f0:	ffffe7ff 	.word	0xffffe7ff

080014f4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	601a      	str	r2, [r3, #0]
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <LL_USART_ConfigAsyncMode+0x2c>)
 800151e:	401a      	ands	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	222a      	movs	r2, #42	; 0x2a
 800152a:	4393      	bics	r3, r2
 800152c:	001a      	movs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	ffffb7ff 	.word	0xffffb7ff

08001540 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	4013      	ands	r3, r2
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	425a      	negs	r2, r3
 8001558:	4153      	adcs	r3, r2
 800155a:	b2db      	uxtb	r3, r3
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}

08001564 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	619a      	str	r2, [r3, #24]
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b002      	add	sp, #8
 800157a:	bd80      	pop	{r7, pc}

0800157c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff ff49 	bl	8001430 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	055b      	lsls	r3, r3, #21
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff ff2e 	bl	8001404 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f89c 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f000 f9e0 	bl	8001970 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015b0:	f000 f8e0 	bl	8001774 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015b4:	f000 f964 	bl	8001880 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  afeConfig.enabled_cells=0b00010111;
 80015b8:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <main+0x13c>)
 80015ba:	2217      	movs	r2, #23
 80015bc:	801a      	strh	r2, [r3, #0]
  afeConfig.range = threshold_upper;
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <main+0x13c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	709a      	strb	r2, [r3, #2]
  afeConfig.sc_delay = scd_400_us;
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <main+0x13c>)
 80015c6:	2203      	movs	r2, #3
 80015c8:	70da      	strb	r2, [r3, #3]
  afeConfig.sc_voltage=scd_44_22_mv;
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <main+0x13c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	711a      	strb	r2, [r3, #4]
  afeConfig.oc_delay=ocd_8_ms;
 80015d0:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <main+0x13c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	715a      	strb	r2, [r3, #5]
  afeConfig.oc_voltage=ocd_17_8_mv;
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <main+0x13c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	719a      	strb	r2, [r3, #6]
  afeConfig.shuntValue=5; // 5 mOhms
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <main+0x13c>)
 80015de:	2205      	movs	r2, #5
 80015e0:	811a      	strh	r2, [r3, #8]
  afeConfig.chargeCurrent_mA = 1500;
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <main+0x13c>)
 80015e4:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <main+0x140>)
 80015e6:	815a      	strh	r2, [r3, #10]
  afeConfig.uv_delay=uvd_4_s;
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <main+0x13c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	731a      	strb	r2, [r3, #12]
  afeConfig.uvLimit=0xE0;
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <main+0x13c>)
 80015f0:	22e0      	movs	r2, #224	; 0xe0
 80015f2:	735a      	strb	r2, [r3, #13]
  afeConfig.ov_delay=ovd_2_s;
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <main+0x13c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	739a      	strb	r2, [r3, #14]
  afeConfig.ovLimit=0xB0;
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <main+0x13c>)
 80015fc:	22b0      	movs	r2, #176	; 0xb0
 80015fe:	73da      	strb	r2, [r3, #15]

  if(0==bqInit(I2C1, &afeData, &afeConfig)) {
 8001600:	4a33      	ldr	r2, [pc, #204]	; (80016d0 <main+0x13c>)
 8001602:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <main+0x144>)
 8001604:	4835      	ldr	r0, [pc, #212]	; (80016dc <main+0x148>)
 8001606:	0019      	movs	r1, r3
 8001608:	f7fe ff76 	bl	80004f8 <bqInit>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d101      	bne.n	8001614 <main+0x80>
	  // ERROR
	  asm volatile ("bkpt 0");
 8001610:	be00      	bkpt	0x0000
 8001612:	e001      	b.n	8001618 <main+0x84>
  } else {
	  bqEnableAll();
 8001614:	f7ff f855 	bl	80006c2 <bqEnableAll>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(LL_GPIO_IsInputPinSet(SIGNAL_GPIO_Port,SIGNAL_Pin)) {
 8001618:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <main+0x14c>)
 800161a:	2102      	movs	r1, #2
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff ff8f 	bl	8001540 <LL_GPIO_IsInputPinSet>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d051      	beq.n	80016ca <main+0x136>
		  LL_GPIO_SetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001626:	23a0      	movs	r3, #160	; 0xa0
 8001628:	05db      	lsls	r3, r3, #23
 800162a:	2120      	movs	r1, #32
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff ff99 	bl	8001564 <LL_GPIO_SetOutputPin>
		  // AFE event signaled,
		  if(1==bqAct()) {
 8001632:	f7fe ffed 	bl	8000610 <bqAct>
 8001636:	0003      	movs	r3, r0
 8001638:	2b01      	cmp	r3, #1
 800163a:	d13d      	bne.n	80016b8 <main+0x124>
			  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED1_Pin);
 800163c:	23a0      	movs	r3, #160	; 0xa0
 800163e:	05db      	lsls	r3, r3, #23
 8001640:	2140      	movs	r1, #64	; 0x40
 8001642:	0018      	movs	r0, r3
 8001644:	f7ff ff9a 	bl	800157c <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED2_Pin);
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	2110      	movs	r1, #16
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff ff94 	bl	800157c <LL_GPIO_ResetOutputPin>
			  if(0b00001100&afeData.status_reg) { // voltage problem
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <main+0x144>)
 8001656:	2226      	movs	r2, #38	; 0x26
 8001658:	5c9b      	ldrb	r3, [r3, r2]
 800165a:	220c      	movs	r2, #12
 800165c:	4013      	ands	r3, r2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <main+0xde>
				  LL_GPIO_SetOutputPin(LED0_GPIO_Port, LED1_Pin);
 8001664:	23a0      	movs	r3, #160	; 0xa0
 8001666:	05db      	lsls	r3, r3, #23
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff ff7a 	bl	8001564 <LL_GPIO_SetOutputPin>
 8001670:	e022      	b.n	80016b8 <main+0x124>
			  } else if(0b00000011&afeData.status_reg) { // discharge current problem
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <main+0x144>)
 8001674:	2226      	movs	r2, #38	; 0x26
 8001676:	5c9b      	ldrb	r3, [r3, r2]
 8001678:	2203      	movs	r2, #3
 800167a:	4013      	ands	r3, r2
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <main+0xfc>
				  LL_GPIO_SetOutputPin(LED0_GPIO_Port, LED2_Pin);
 8001682:	23a0      	movs	r3, #160	; 0xa0
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	2110      	movs	r1, #16
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff ff6b 	bl	8001564 <LL_GPIO_SetOutputPin>
 800168e:	e013      	b.n	80016b8 <main+0x124>
			  } else if (0b11000000&afeData.status_reg) { // charge current problem
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <main+0x144>)
 8001692:	2226      	movs	r2, #38	; 0x26
 8001694:	5c9b      	ldrb	r3, [r3, r2]
 8001696:	223f      	movs	r2, #63	; 0x3f
 8001698:	4393      	bics	r3, r2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <main+0x124>
				  LL_GPIO_SetOutputPin(LED0_GPIO_Port, LED1_Pin);
 80016a0:	23a0      	movs	r3, #160	; 0xa0
 80016a2:	05db      	lsls	r3, r3, #23
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff ff5c 	bl	8001564 <LL_GPIO_SetOutputPin>
				  LL_GPIO_SetOutputPin(LED0_GPIO_Port, LED2_Pin);
 80016ac:	23a0      	movs	r3, #160	; 0xa0
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	2110      	movs	r1, #16
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7ff ff56 	bl	8001564 <LL_GPIO_SetOutputPin>
			  }
		  }
		  // handle the balancing system
		  bqBalance();
 80016b8:	f7ff f81c 	bl	80006f4 <bqBalance>

		  // handle the communication system
		  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 80016bc:	23a0      	movs	r3, #160	; 0xa0
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	2120      	movs	r1, #32
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff ff5a 	bl	800157c <LL_GPIO_ResetOutputPin>
 80016c8:	e7a6      	b.n	8001618 <main+0x84>
	  } else {
		  asm volatile("nop");
 80016ca:	46c0      	nop			; (mov r8, r8)
	  if(LL_GPIO_IsInputPinSet(SIGNAL_GPIO_Port,SIGNAL_Pin)) {
 80016cc:	e7a4      	b.n	8001618 <main+0x84>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	20000078 	.word	0x20000078
 80016d4:	000005dc 	.word	0x000005dc
 80016d8:	20000088 	.word	0x20000088
 80016dc:	40005400 	.word	0x40005400
 80016e0:	50000400 	.word	0x50000400

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff fecd 	bl	8001488 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80016ee:	f7ff fedf 	bl	80014b0 <LL_FLASH_GetLatency>
 80016f2:	1e03      	subs	r3, r0, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x16>
  {
  Error_Handler();  
 80016f6:	f000 fa09 	bl	8001b0c <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff fee2 	bl	80014c8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001704:	f7ff fd9e 	bl	8001244 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	f7ff fda9 	bl	8001260 <LL_RCC_MSI_IsReady>
 800170e:	0003      	movs	r3, r0
 8001710:	2b01      	cmp	r3, #1
 8001712:	d1fa      	bne.n	800170a <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_4);
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fdb5 	bl	8001288 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fdc8 	bl	80012b4 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fdf9 	bl	800131c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fe0a 	bl	8001344 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff fe1d 	bl	8001370 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff fdd0 	bl	80012dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	f7ff fde1 	bl	8001304 <LL_RCC_GetSysClkSource>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d1fb      	bne.n	800173e <SystemClock_Config+0x5a>
  {
  
  }

  LL_Init1msTick(1048000);
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <SystemClock_Config+0x8c>)
 8001748:	0018      	movs	r0, r3
 800174a:	f001 f8b3 	bl	80028b4 <LL_Init1msTick>

  LL_SetSystemCoreClock(1048000);
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <SystemClock_Config+0x8c>)
 8001750:	0018      	movs	r0, r3
 8001752:	f001 f8bf 	bl	80028d4 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001756:	23c0      	movs	r3, #192	; 0xc0
 8001758:	031b      	lsls	r3, r3, #12
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff fe1e 	bl	800139c <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8001760:	23c0      	movs	r3, #192	; 0xc0
 8001762:	029b      	lsls	r3, r3, #10
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff fe31 	bl	80013cc <LL_RCC_SetI2CClockSource>
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	000ffdc0 	.word	0x000ffdc0

08001774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b08f      	sub	sp, #60	; 0x3c
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800177a:	241c      	movs	r4, #28
 800177c:	193b      	adds	r3, r7, r4
 800177e:	0018      	movs	r0, r3
 8001780:	231c      	movs	r3, #28
 8001782:	001a      	movs	r2, r3
 8001784:	2100      	movs	r1, #0
 8001786:	f001 f8d7 	bl	8002938 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	0018      	movs	r0, r3
 800178e:	2318      	movs	r3, #24
 8001790:	001a      	movs	r2, r3
 8001792:	2100      	movs	r1, #0
 8001794:	f001 f8d0 	bl	8002938 <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff fe5f 	bl	800145c <LL_IOP_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2202      	movs	r2, #2
 80017aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2203      	movs	r2, #3
 80017b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2201      	movs	r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2201      	movs	r2, #1
 80017c2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	1d3a      	adds	r2, r7, #4
 80017c6:	23a0      	movs	r3, #160	; 0xa0
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 fae9 	bl	8001da4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	00d2      	lsls	r2, r2, #3
 80017d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2202      	movs	r2, #2
 80017de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2203      	movs	r2, #3
 80017e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2201      	movs	r2, #1
 80017ea:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2201      	movs	r2, #1
 80017f0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2201      	movs	r2, #1
 80017f6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	1d3a      	adds	r2, r7, #4
 80017fa:	23a0      	movs	r3, #160	; 0xa0
 80017fc:	05db      	lsls	r3, r3, #23
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f000 facf 	bl	8001da4 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	039b      	lsls	r3, r3, #14
 800180a:	0018      	movs	r0, r3
 800180c:	f7ff fdfa 	bl	8001404 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_I2C1_Init+0x108>)
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff fd06 	bl	8001224 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <MX_I2C1_Init+0x108>)
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fcf2 	bl	8001204 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_I2C1_Init+0x108>)
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff fcc8 	bl	80011b8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_I2C1_Init+0x108>)
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff fcb4 	bl	8001198 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001830:	0021      	movs	r1, r4
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x00000002;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2202      	movs	r2, #2
 800183c:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 2;
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2202      	movs	r2, #2
 8001848:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800185c:	187b      	adds	r3, r7, r1
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <MX_I2C1_Init+0x108>)
 8001860:	0019      	movs	r1, r3
 8001862:	0010      	movs	r0, r2
 8001864:	f000 fc42 	bl	80020ec <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <MX_I2C1_Init+0x108>)
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	0018      	movs	r0, r3
 8001870:	f7ff fcb2 	bl	80011d8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b00f      	add	sp, #60	; 0x3c
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	40005400 	.word	0x40005400

08001880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b08f      	sub	sp, #60	; 0x3c
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001886:	241c      	movs	r4, #28
 8001888:	193b      	adds	r3, r7, r4
 800188a:	0018      	movs	r0, r3
 800188c:	231c      	movs	r3, #28
 800188e:	001a      	movs	r2, r3
 8001890:	2100      	movs	r1, #0
 8001892:	f001 f851 	bl	8002938 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	0018      	movs	r0, r3
 800189a:	2318      	movs	r3, #24
 800189c:	001a      	movs	r2, r3
 800189e:	2100      	movs	r1, #0
 80018a0:	f001 f84a 	bl	8002938 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff fdab 	bl	8001404 <LL_APB1_GRP1_EnableClock>
  
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fdd4 	bl	800145c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2204      	movs	r2, #4
 80018b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2202      	movs	r2, #2
 80018be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2203      	movs	r2, #3
 80018c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	2204      	movs	r2, #4
 80018d6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	1d3a      	adds	r2, r7, #4
 80018da:	23a0      	movs	r3, #160	; 0xa0
 80018dc:	05db      	lsls	r3, r3, #23
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 fa5f 	bl	8001da4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2208      	movs	r2, #8
 80018ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2202      	movs	r2, #2
 80018f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2203      	movs	r2, #3
 80018f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2204      	movs	r2, #4
 8001908:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	1d3a      	adds	r2, r7, #4
 800190c:	23a0      	movs	r3, #160	; 0xa0
 800190e:	05db      	lsls	r3, r3, #23
 8001910:	0011      	movs	r1, r2
 8001912:	0018      	movs	r0, r3
 8001914:	f000 fa46 	bl	8001da4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8001918:	193b      	adds	r3, r7, r4
 800191a:	2296      	movs	r2, #150	; 0x96
 800191c:	0192      	lsls	r2, r2, #6
 800191e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001920:	0021      	movs	r1, r4
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001934:	187b      	adds	r3, r7, r1
 8001936:	220c      	movs	r2, #12
 8001938:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800193a:	187b      	adds	r3, r7, r1
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001946:	187b      	adds	r3, r7, r1
 8001948:	4a08      	ldr	r2, [pc, #32]	; (800196c <MX_USART2_UART_Init+0xec>)
 800194a:	0019      	movs	r1, r3
 800194c:	0010      	movs	r0, r2
 800194e:	f000 fe89 	bl	8002664 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_USART2_UART_Init+0xec>)
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff fddb 	bl	8001510 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <MX_USART2_UART_Init+0xec>)
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff fdc9 	bl	80014f4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b00f      	add	sp, #60	; 0x3c
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40004400 	.word	0x40004400

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	003b      	movs	r3, r7
 8001978:	0018      	movs	r0, r3
 800197a:	2318      	movs	r3, #24
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f000 ffda 	bl	8002938 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001984:	2004      	movs	r0, #4
 8001986:	f7ff fd69 	bl	800145c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff fd66 	bl	800145c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8001990:	2002      	movs	r0, #2
 8001992:	f7ff fd63 	bl	800145c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001996:	23a0      	movs	r3, #160	; 0xa0
 8001998:	05db      	lsls	r3, r3, #23
 800199a:	2110      	movs	r1, #16
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fded 	bl	800157c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 80019a2:	23a0      	movs	r3, #160	; 0xa0
 80019a4:	05db      	lsls	r3, r3, #23
 80019a6:	2120      	movs	r1, #32
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff fde7 	bl	800157c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80019ae:	23a0      	movs	r3, #160	; 0xa0
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff fde1 	bl	800157c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80019ba:	003b      	movs	r3, r7
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	01d2      	lsls	r2, r2, #7
 80019c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80019c2:	003b      	movs	r3, r7
 80019c4:	2203      	movs	r2, #3
 80019c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019c8:	003b      	movs	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	003b      	movs	r3, r7
 80019d0:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <MX_GPIO_Init+0x194>)
 80019d2:	0019      	movs	r1, r3
 80019d4:	0010      	movs	r0, r2
 80019d6:	f000 f9e5 	bl	8001da4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80019da:	003b      	movs	r3, r7
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	0212      	lsls	r2, r2, #8
 80019e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80019e2:	003b      	movs	r3, r7
 80019e4:	2203      	movs	r2, #3
 80019e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019e8:	003b      	movs	r3, r7
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	003b      	movs	r3, r7
 80019f0:	4a44      	ldr	r2, [pc, #272]	; (8001b04 <MX_GPIO_Init+0x194>)
 80019f2:	0019      	movs	r1, r3
 80019f4:	0010      	movs	r0, r2
 80019f6:	f000 f9d5 	bl	8001da4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80019fa:	003b      	movs	r3, r7
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a00:	003b      	movs	r3, r7
 8001a02:	2203      	movs	r2, #3
 8001a04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a06:	003b      	movs	r3, r7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	003a      	movs	r2, r7
 8001a0e:	23a0      	movs	r3, #160	; 0xa0
 8001a10:	05db      	lsls	r3, r3, #23
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 f9c5 	bl	8001da4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001a1a:	003b      	movs	r3, r7
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a20:	003b      	movs	r3, r7
 8001a22:	2203      	movs	r2, #3
 8001a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a26:	003b      	movs	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	003a      	movs	r2, r7
 8001a2e:	23a0      	movs	r3, #160	; 0xa0
 8001a30:	05db      	lsls	r3, r3, #23
 8001a32:	0011      	movs	r1, r2
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 f9b5 	bl	8001da4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001a3a:	003b      	movs	r3, r7
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a40:	003b      	movs	r3, r7
 8001a42:	2201      	movs	r2, #1
 8001a44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a46:	003b      	movs	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a4c:	003b      	movs	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a52:	003b      	movs	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001a58:	003a      	movs	r2, r7
 8001a5a:	23a0      	movs	r3, #160	; 0xa0
 8001a5c:	05db      	lsls	r3, r3, #23
 8001a5e:	0011      	movs	r1, r2
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 f99f 	bl	8001da4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001a66:	003b      	movs	r3, r7
 8001a68:	2220      	movs	r2, #32
 8001a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a6c:	003b      	movs	r3, r7
 8001a6e:	2201      	movs	r2, #1
 8001a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a72:	003b      	movs	r3, r7
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a78:	003b      	movs	r3, r7
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a7e:	003b      	movs	r3, r7
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001a84:	003a      	movs	r2, r7
 8001a86:	23a0      	movs	r3, #160	; 0xa0
 8001a88:	05db      	lsls	r3, r3, #23
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f000 f989 	bl	8001da4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a92:	003b      	movs	r3, r7
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a98:	003b      	movs	r3, r7
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a9e:	003b      	movs	r3, r7
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aa4:	003b      	movs	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aaa:	003b      	movs	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	003a      	movs	r2, r7
 8001ab2:	23a0      	movs	r3, #160	; 0xa0
 8001ab4:	05db      	lsls	r3, r3, #23
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f000 f973 	bl	8001da4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001abe:	003b      	movs	r3, r7
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ac4:	003b      	movs	r3, r7
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aca:	003b      	movs	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	003a      	movs	r2, r7
 8001ad2:	23a0      	movs	r3, #160	; 0xa0
 8001ad4:	05db      	lsls	r3, r3, #23
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 f963 	bl	8001da4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8001ade:	003b      	movs	r3, r7
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aea:	003b      	movs	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001af0:	003b      	movs	r3, r7
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <MX_GPIO_Init+0x198>)
 8001af4:	0019      	movs	r1, r3
 8001af6:	0010      	movs	r0, r2
 8001af8:	f000 f954 	bl	8001da4 <LL_GPIO_Init>

}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b006      	add	sp, #24
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	50000800 	.word	0x50000800
 8001b08:	50000400 	.word	0x50000400

08001b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	asm volatile("bkpt 1");
 8001b10:	be01      	bkpt	0x0001
  /* USER CODE END Error_Handler_Debug */
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b002      	add	sp, #8
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <HardFault_Handler+0x4>

08001b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <SystemInit+0x64>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <SystemInit+0x64>)
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	0049      	lsls	r1, r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <SystemInit+0x64>)
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <SystemInit+0x64>)
 8001b70:	4913      	ldr	r1, [pc, #76]	; (8001bc0 <SystemInit+0x68>)
 8001b72:	400a      	ands	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <SystemInit+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <SystemInit+0x64>)
 8001b7c:	4911      	ldr	r1, [pc, #68]	; (8001bc4 <SystemInit+0x6c>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <SystemInit+0x64>)
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <SystemInit+0x64>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <SystemInit+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <SystemInit+0x64>)
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <SystemInit+0x70>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <SystemInit+0x64>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <SystemInit+0x64>)
 8001ba0:	490a      	ldr	r1, [pc, #40]	; (8001bcc <SystemInit+0x74>)
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SystemInit+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <SystemInit+0x78>)
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	0512      	lsls	r2, r2, #20
 8001bb2:	609a      	str	r2, [r3, #8]
#endif
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	88ff400c 	.word	0x88ff400c
 8001bc4:	fef6fff6 	.word	0xfef6fff6
 8001bc8:	fffbffff 	.word	0xfffbffff
 8001bcc:	ff02ffff 	.word	0xff02ffff
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001bd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
  ldr  r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopForever+0x12>)
  b  LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001bf2:	2300      	movs	r3, #0
  str  r3, [r2]
 8001bf4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf6:	3204      	adds	r2, #4

08001bf8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <LoopForever+0x16>)
  cmp  r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bfe:	f7ff ffab 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f000 fe75 	bl	80028f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff fcc5 	bl	8001594 <main>

08001c0a <LoopForever>:

LoopForever:
    b LoopForever
 8001c0a:	e7fe      	b.n	8001c0a <LoopForever>
   ldr   r0, =_estack
 8001c0c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001c10:	08002af0 	.word	0x08002af0
  ldr  r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c18:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001c1c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001c20:	200000bc 	.word	0x200000bc

08001c24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_COMP_IRQHandler>

08001c26 <LL_GPIO_SetPinMode>:
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	435a      	muls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	189b      	adds	r3, r3, r2
 8001c42:	43db      	mvns	r3, r3
 8001c44:	400b      	ands	r3, r1
 8001c46:	001a      	movs	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	434b      	muls	r3, r1
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	434b      	muls	r3, r1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b004      	add	sp, #16
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LL_GPIO_SetPinOutputType>:
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	43d2      	mvns	r2, r2
 8001c74:	401a      	ands	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	434b      	muls	r3, r1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	605a      	str	r2, [r3, #4]
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <LL_GPIO_SetPinSpeed>:
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6899      	ldr	r1, [r3, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	435a      	muls	r2, r3
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	189b      	adds	r3, r3, r2
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	400b      	ands	r3, r1
 8001caa:	001a      	movs	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	434b      	muls	r3, r1
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	434b      	muls	r3, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b004      	add	sp, #16
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <LL_GPIO_SetPinPull>:
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	68d9      	ldr	r1, [r3, #12]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	435a      	muls	r2, r3
 8001cda:	0013      	movs	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	189b      	adds	r3, r3, r2
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	434b      	muls	r3, r1
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	434b      	muls	r3, r1
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	60da      	str	r2, [r3, #12]
}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b004      	add	sp, #16
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <LL_GPIO_SetAFPin_0_7>:
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a19      	ldr	r1, [r3, #32]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	4353      	muls	r3, r2
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	4353      	muls	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	435a      	muls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	43db      	mvns	r3, r3
 8001d24:	400b      	ands	r3, r1
 8001d26:	001a      	movs	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	434b      	muls	r3, r1
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	434b      	muls	r3, r1
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	434b      	muls	r3, r1
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	434b      	muls	r3, r1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	621a      	str	r2, [r3, #32]
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <LL_GPIO_SetAFPin_8_15>:
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	0a12      	lsrs	r2, r2, #8
 8001d60:	4353      	muls	r3, r2
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	0a12      	lsrs	r2, r2, #8
 8001d66:	4353      	muls	r3, r2
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	0a12      	lsrs	r2, r2, #8
 8001d6c:	435a      	muls	r2, r3
 8001d6e:	0013      	movs	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	43db      	mvns	r3, r3
 8001d76:	400b      	ands	r3, r1
 8001d78:	001a      	movs	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	0a09      	lsrs	r1, r1, #8
 8001d82:	434b      	muls	r3, r1
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	0a09      	lsrs	r1, r1, #8
 8001d88:	434b      	muls	r3, r1
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	0a09      	lsrs	r1, r1, #8
 8001d8e:	434b      	muls	r3, r1
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	434b      	muls	r3, r1
 8001d94:	431a      	orrs	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	23a0      	movs	r3, #160	; 0xa0
 8001dba:	05db      	lsls	r3, r3, #23
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d010      	beq.n	8001de2 <LL_GPIO_Init+0x3e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a76      	ldr	r2, [pc, #472]	; (8001f9c <LL_GPIO_Init+0x1f8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00c      	beq.n	8001de2 <LL_GPIO_Init+0x3e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a75      	ldr	r2, [pc, #468]	; (8001fa0 <LL_GPIO_Init+0x1fc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d008      	beq.n	8001de2 <LL_GPIO_Init+0x3e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a74      	ldr	r2, [pc, #464]	; (8001fa4 <LL_GPIO_Init+0x200>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <LL_GPIO_Init+0x3e>
 8001dd8:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <LL_GPIO_Init+0x204>)
 8001dda:	21a3      	movs	r1, #163	; 0xa3
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff fe9b 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <LL_GPIO_Init+0x50>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a6f      	ldr	r2, [pc, #444]	; (8001fac <LL_GPIO_Init+0x208>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d904      	bls.n	8001dfe <LL_GPIO_Init+0x5a>
 8001df4:	4b6c      	ldr	r3, [pc, #432]	; (8001fa8 <LL_GPIO_Init+0x204>)
 8001df6:	21a4      	movs	r1, #164	; 0xa4
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fe8d 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <LL_GPIO_Init+0x84>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d00c      	beq.n	8001e28 <LL_GPIO_Init+0x84>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d008      	beq.n	8001e28 <LL_GPIO_Init+0x84>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d004      	beq.n	8001e28 <LL_GPIO_Init+0x84>
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <LL_GPIO_Init+0x204>)
 8001e20:	21a5      	movs	r1, #165	; 0xa5
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff fe78 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d100      	bne.n	8001e32 <LL_GPIO_Init+0x8e>
 8001e30:	e08b      	b.n	8001f4a <LL_GPIO_Init+0x1a6>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d100      	bne.n	8001e3c <LL_GPIO_Init+0x98>
 8001e3a:	e086      	b.n	8001f4a <LL_GPIO_Init+0x1a6>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d100      	bne.n	8001e46 <LL_GPIO_Init+0xa2>
 8001e44:	e081      	b.n	8001f4a <LL_GPIO_Init+0x1a6>
 8001e46:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <LL_GPIO_Init+0x204>)
 8001e48:	21a6      	movs	r1, #166	; 0xa6
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7ff fe64 	bl	8001b18 <assert_failed>
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e50:	e07b      	b.n	8001f4a <LL_GPIO_Init+0x1a6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2101      	movs	r1, #1
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4091      	lsls	r1, r2
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	4013      	ands	r3, r2
 8001e60:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d100      	bne.n	8001e6a <LL_GPIO_Init+0xc6>
 8001e68:	e06c      	b.n	8001f44 <LL_GPIO_Init+0x1a0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7ff fed7 	bl	8001c26 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d003      	beq.n	8001e88 <LL_GPIO_Init+0xe4>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d11b      	bne.n	8001ec0 <LL_GPIO_Init+0x11c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <LL_GPIO_Init+0x10e>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d00c      	beq.n	8001eb2 <LL_GPIO_Init+0x10e>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d008      	beq.n	8001eb2 <LL_GPIO_Init+0x10e>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d004      	beq.n	8001eb2 <LL_GPIO_Init+0x10e>
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <LL_GPIO_Init+0x204>)
 8001eaa:	21ba      	movs	r1, #186	; 0xba
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff fe33 	bl	8001b18 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff fee5 	bl	8001c8a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fefb 	bl	8001cc4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d136      	bne.n	8001f44 <LL_GPIO_Init+0x1a0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d020      	beq.n	8001f20 <LL_GPIO_Init+0x17c>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d01c      	beq.n	8001f20 <LL_GPIO_Init+0x17c>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d018      	beq.n	8001f20 <LL_GPIO_Init+0x17c>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d014      	beq.n	8001f20 <LL_GPIO_Init+0x17c>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d010      	beq.n	8001f20 <LL_GPIO_Init+0x17c>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d00c      	beq.n	8001f20 <LL_GPIO_Init+0x17c>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d008      	beq.n	8001f20 <LL_GPIO_Init+0x17c>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b07      	cmp	r3, #7
 8001f14:	d004      	beq.n	8001f20 <LL_GPIO_Init+0x17c>
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <LL_GPIO_Init+0x204>)
 8001f18:	21c6      	movs	r1, #198	; 0xc6
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7ff fdfc 	bl	8001b18 <assert_failed>

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d807      	bhi.n	8001f36 <LL_GPIO_Init+0x192>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff fee5 	bl	8001cfe <LL_GPIO_SetAFPin_0_7>
 8001f34:	e006      	b.n	8001f44 <LL_GPIO_Init+0x1a0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff ff02 	bl	8001d48 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3301      	adds	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	40da      	lsrs	r2, r3
 8001f52:	1e13      	subs	r3, r2, #0
 8001f54:	d000      	beq.n	8001f58 <LL_GPIO_Init+0x1b4>
 8001f56:	e77c      	b.n	8001e52 <LL_GPIO_Init+0xae>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d003      	beq.n	8001f68 <LL_GPIO_Init+0x1c4>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d114      	bne.n	8001f92 <LL_GPIO_Init+0x1ee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <LL_GPIO_Init+0x1de>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d004      	beq.n	8001f82 <LL_GPIO_Init+0x1de>
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <LL_GPIO_Init+0x204>)
 8001f7a:	21d9      	movs	r1, #217	; 0xd9
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff fdcb 	bl	8001b18 <assert_failed>

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6819      	ldr	r1, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff fe67 	bl	8001c60 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b004      	add	sp, #16
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	50000400 	.word	0x50000400
 8001fa0:	50000800 	.word	0x50000800
 8001fa4:	50001c00 	.word	0x50001c00
 8001fa8:	08002960 	.word	0x08002960
 8001fac:	0000ffff 	.word	0x0000ffff

08001fb0 <LL_I2C_Enable>:
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	601a      	str	r2, [r3, #0]
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <LL_I2C_Disable>:
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4393      	bics	r3, r2
 8001fdc:	001a      	movs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <LL_I2C_ConfigFilters>:
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <LL_I2C_ConfigFilters+0x2c>)
 8001ffe:	401a      	ands	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	0219      	lsls	r1, r3, #8
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	430b      	orrs	r3, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	ffffe0ff 	.word	0xffffe0ff

0800201c <LL_I2C_SetOwnAddress1>:
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	0adb      	lsrs	r3, r3, #11
 800202e:	02da      	lsls	r2, r3, #11
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	430b      	orrs	r3, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	609a      	str	r2, [r3, #8]
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b004      	add	sp, #16
 8002042:	bd80      	pop	{r7, pc}

08002044 <LL_I2C_EnableOwnAddress1>:
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	0212      	lsls	r2, r2, #8
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <LL_I2C_DisableOwnAddress1>:
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a03      	ldr	r2, [pc, #12]	; (8002080 <LL_I2C_DisableOwnAddress1+0x1c>)
 8002072:	401a      	ands	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}
 8002080:	ffff7fff 	.word	0xffff7fff

08002084 <LL_I2C_SetTiming>:
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	611a      	str	r2, [r3, #16]
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <LL_I2C_SetMode>:
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <LL_I2C_SetMode+0x24>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	ffcfffff 	.word	0xffcfffff

080020c4 <LL_I2C_AcknowledgeNextData>:
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <LL_I2C_AcknowledgeNextData+0x24>)
 80020d4:	401a      	ands	r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	605a      	str	r2, [r3, #4]
}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	ffff7fff 	.word	0xffff7fff

080020ec <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <LL_I2C_Init+0x14c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d004      	beq.n	8002108 <LL_I2C_Init+0x1c>
 80020fe:	4b4f      	ldr	r3, [pc, #316]	; (800223c <LL_I2C_Init+0x150>)
 8002100:	218e      	movs	r1, #142	; 0x8e
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff fd08 	bl	8001b18 <assert_failed>

  /* Check the I2C parameters from I2C_InitStruct */
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d014      	beq.n	800213a <LL_I2C_Init+0x4e>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	035b      	lsls	r3, r3, #13
 8002118:	429a      	cmp	r2, r3
 800211a:	d00e      	beq.n	800213a <LL_I2C_Init+0x4e>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <LL_I2C_Init+0x4e>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	039b      	lsls	r3, r3, #14
 800212c:	429a      	cmp	r2, r3
 800212e:	d004      	beq.n	800213a <LL_I2C_Init+0x4e>
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <LL_I2C_Init+0x150>)
 8002132:	2191      	movs	r1, #145	; 0x91
 8002134:	0018      	movs	r0, r3
 8002136:	f7ff fcef 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_I2C_ANALOG_FILTER(I2C_InitStruct->AnalogFilter));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <LL_I2C_Init+0x6c>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	015b      	lsls	r3, r3, #5
 800214a:	429a      	cmp	r2, r3
 800214c:	d004      	beq.n	8002158 <LL_I2C_Init+0x6c>
 800214e:	4b3b      	ldr	r3, [pc, #236]	; (800223c <LL_I2C_Init+0x150>)
 8002150:	2192      	movs	r1, #146	; 0x92
 8002152:	0018      	movs	r0, r3
 8002154:	f7ff fce0 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_I2C_DIGITAL_FILTER(I2C_InitStruct->DigitalFilter));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b0f      	cmp	r3, #15
 800215e:	d904      	bls.n	800216a <LL_I2C_Init+0x7e>
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <LL_I2C_Init+0x150>)
 8002162:	2193      	movs	r1, #147	; 0x93
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff fcd7 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	4a34      	ldr	r2, [pc, #208]	; (8002240 <LL_I2C_Init+0x154>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d904      	bls.n	800217e <LL_I2C_Init+0x92>
 8002174:	4b31      	ldr	r3, [pc, #196]	; (800223c <LL_I2C_Init+0x150>)
 8002176:	2194      	movs	r1, #148	; 0x94
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff fccd 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <LL_I2C_Init+0xb0>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	429a      	cmp	r2, r3
 8002190:	d004      	beq.n	800219c <LL_I2C_Init+0xb0>
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <LL_I2C_Init+0x150>)
 8002194:	2195      	movs	r1, #149	; 0x95
 8002196:	0018      	movs	r0, r3
 8002198:	f7ff fcbe 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <LL_I2C_Init+0xce>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d004      	beq.n	80021ba <LL_I2C_Init+0xce>
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <LL_I2C_Init+0x150>)
 80021b2:	2196      	movs	r1, #150	; 0x96
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7ff fcaf 	bl	8001b18 <assert_failed>

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ff05 	bl	8001fcc <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff ff0d 	bl	8001fec <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0011      	movs	r1, r2
 80021da:	0018      	movs	r0, r3
 80021dc:	f7ff ff52 	bl	8002084 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff fee4 	bl	8001fb0 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff ff3a 	bl	8002064 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6919      	ldr	r1, [r3, #16]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff ff0e 	bl	800201c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <LL_I2C_Init+0x124>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	0018      	movs	r0, r3
 800220c:	f7ff ff1a 	bl	8002044 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0011      	movs	r1, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff ff3f 	bl	800209c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0011      	movs	r1, r2
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff ff4c 	bl	80020c4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	40005400 	.word	0x40005400
 800223c:	08002998 	.word	0x08002998
 8002240:	000003ff 	.word	0x000003ff

08002244 <LL_RCC_HSI_IsReady>:
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <LL_RCC_HSI_IsReady+0x1c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2204      	movs	r2, #4
 800224e:	4013      	ands	r3, r2
 8002250:	2b04      	cmp	r3, #4
 8002252:	d101      	bne.n	8002258 <LL_RCC_HSI_IsReady+0x14>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <LL_RCC_HSI_IsReady+0x16>
 8002258:	2300      	movs	r3, #0
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000

08002264 <LL_RCC_LSE_IsReady>:
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <LL_RCC_LSE_IsReady+0x24>)
 800226a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	401a      	ands	r2, r3
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	429a      	cmp	r2, r3
 8002278:	d101      	bne.n	800227e <LL_RCC_LSE_IsReady+0x1a>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <LL_RCC_LSE_IsReady+0x1c>
 800227e:	2300      	movs	r3, #0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	40021000 	.word	0x40021000

0800228c <LL_RCC_MSI_GetRange>:
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <LL_RCC_MSI_GetRange+0x14>)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	23e0      	movs	r3, #224	; 0xe0
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	4013      	ands	r3, r2
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000

080022a4 <LL_RCC_GetSysClkSource>:
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <LL_RCC_GetSysClkSource+0x14>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	220c      	movs	r2, #12
 80022ae:	4013      	ands	r3, r2
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	40021000 	.word	0x40021000

080022bc <LL_RCC_GetAHBPrescaler>:
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <LL_RCC_GetAHBPrescaler+0x14>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	22f0      	movs	r2, #240	; 0xf0
 80022c6:	4013      	ands	r3, r2
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000

080022d4 <LL_RCC_GetAPB1Prescaler>:
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	23e0      	movs	r3, #224	; 0xe0
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4013      	ands	r3, r2
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000

080022ec <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <LL_RCC_GetUSARTClockSource+0x20>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	401a      	ands	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	4313      	orrs	r3, r2
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b002      	add	sp, #8
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40021000 	.word	0x40021000

08002310 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <LL_RCC_PLL_GetMainSource+0x14>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	025b      	lsls	r3, r3, #9
 800231c:	4013      	ands	r3, r2
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	23f0      	movs	r3, #240	; 0xf0
 8002332:	039b      	lsls	r3, r3, #14
 8002334:	4013      	ands	r3, r2
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <LL_RCC_PLL_GetDivider+0x14>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	23c0      	movs	r3, #192	; 0xc0
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	4013      	ands	r3, r2
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000

08002358 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2210      	movs	r2, #16
 8002362:	4013      	ands	r3, r2
 8002364:	2b10      	cmp	r3, #16
 8002366:	d101      	bne.n	800236c <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000

08002378 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d004      	beq.n	8002394 <LL_RCC_GetUSARTClockFreq+0x1c>
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <LL_RCC_GetUSARTClockFreq+0xa4>)
 800238c:	21fc      	movs	r1, #252	; 0xfc
 800238e:	0018      	movs	r0, r3
 8002390:	f7ff fbc2 	bl	8001b18 <assert_failed>
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d135      	bne.n	8002406 <LL_RCC_GetUSARTClockFreq+0x8e>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff ffa5 	bl	80022ec <LL_RCC_GetUSARTClockSource>
 80023a2:	0003      	movs	r3, r0
 80023a4:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <LL_RCC_GetUSARTClockFreq+0xa8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00a      	beq.n	80023c0 <LL_RCC_GetUSARTClockFreq+0x48>
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <LL_RCC_GetUSARTClockFreq+0xac>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d015      	beq.n	80023dc <LL_RCC_GetUSARTClockFreq+0x64>
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <LL_RCC_GetUSARTClockFreq+0xb0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d11a      	bne.n	80023ec <LL_RCC_GetUSARTClockFreq+0x74>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80023b6:	f000 f83d 	bl	8002434 <RCC_GetSystemClockFreq>
 80023ba:	0003      	movs	r3, r0
 80023bc:	60fb      	str	r3, [r7, #12]
        break;
 80023be:	e027      	b.n	8002410 <LL_RCC_GetUSARTClockFreq+0x98>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80023c0:	f7ff ff40 	bl	8002244 <LL_RCC_HSI_IsReady>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d020      	beq.n	800240a <LL_RCC_GetUSARTClockFreq+0x92>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80023c8:	f7ff ffc6 	bl	8002358 <LL_RCC_IsActiveFlag_HSIDIV>
 80023cc:	1e03      	subs	r3, r0, #0
 80023ce:	d002      	beq.n	80023d6 <LL_RCC_GetUSARTClockFreq+0x5e>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <LL_RCC_GetUSARTClockFreq+0xb4>)
 80023d2:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80023d4:	e019      	b.n	800240a <LL_RCC_GetUSARTClockFreq+0x92>
            usart_frequency = HSI_VALUE;
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <LL_RCC_GetUSARTClockFreq+0xb8>)
 80023d8:	60fb      	str	r3, [r7, #12]
        break;
 80023da:	e016      	b.n	800240a <LL_RCC_GetUSARTClockFreq+0x92>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80023dc:	f7ff ff42 	bl	8002264 <LL_RCC_LSE_IsReady>
 80023e0:	1e03      	subs	r3, r0, #0
 80023e2:	d014      	beq.n	800240e <LL_RCC_GetUSARTClockFreq+0x96>
        {
          usart_frequency = LSE_VALUE;
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023ea:	e010      	b.n	800240e <LL_RCC_GetUSARTClockFreq+0x96>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80023ec:	f000 f822 	bl	8002434 <RCC_GetSystemClockFreq>
 80023f0:	0003      	movs	r3, r0
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f862 	bl	80024bc <RCC_GetHCLKClockFreq>
 80023f8:	0003      	movs	r3, r0
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f874 	bl	80024e8 <RCC_GetPCLK1ClockFreq>
 8002400:	0003      	movs	r3, r0
 8002402:	60fb      	str	r3, [r7, #12]
        break;
 8002404:	e004      	b.n	8002410 <LL_RCC_GetUSARTClockFreq+0x98>
    }
  }
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	e002      	b.n	8002410 <LL_RCC_GetUSARTClockFreq+0x98>
        break;
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	e000      	b.n	8002410 <LL_RCC_GetUSARTClockFreq+0x98>
        break;
 800240e:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8002410:	68fb      	ldr	r3, [r7, #12]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b004      	add	sp, #16
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	080029d0 	.word	0x080029d0
 8002420:	000c0008 	.word	0x000c0008
 8002424:	000c000c 	.word	0x000c000c
 8002428:	000c0004 	.word	0x000c0004
 800242c:	003d0900 	.word	0x003d0900
 8002430:	00f42400 	.word	0x00f42400

08002434 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800243a:	f7ff ff33 	bl	80022a4 <LL_RCC_GetSysClkSource>
 800243e:	0003      	movs	r3, r0
 8002440:	2b04      	cmp	r3, #4
 8002442:	d013      	beq.n	800246c <RCC_GetSystemClockFreq+0x38>
 8002444:	d802      	bhi.n	800244c <RCC_GetSystemClockFreq+0x18>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <RCC_GetSystemClockFreq+0x22>
 800244a:	e021      	b.n	8002490 <RCC_GetSystemClockFreq+0x5c>
 800244c:	2b08      	cmp	r3, #8
 800244e:	d017      	beq.n	8002480 <RCC_GetSystemClockFreq+0x4c>
 8002450:	2b0c      	cmp	r3, #12
 8002452:	d018      	beq.n	8002486 <RCC_GetSystemClockFreq+0x52>
 8002454:	e01c      	b.n	8002490 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002456:	f7ff ff19 	bl	800228c <LL_RCC_MSI_GetRange>
 800245a:	0003      	movs	r3, r0
 800245c:	0b5b      	lsrs	r3, r3, #13
 800245e:	3301      	adds	r3, #1
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	0212      	lsls	r2, r2, #8
 8002464:	409a      	lsls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	607b      	str	r3, [r7, #4]
      break;
 800246a:	e01c      	b.n	80024a6 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800246c:	f7ff ff74 	bl	8002358 <LL_RCC_IsActiveFlag_HSIDIV>
 8002470:	1e03      	subs	r3, r0, #0
 8002472:	d002      	beq.n	800247a <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <RCC_GetSystemClockFreq+0x7c>)
 8002476:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8002478:	e015      	b.n	80024a6 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <RCC_GetSystemClockFreq+0x80>)
 800247c:	607b      	str	r3, [r7, #4]
      break;
 800247e:	e012      	b.n	80024a6 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <RCC_GetSystemClockFreq+0x84>)
 8002482:	607b      	str	r3, [r7, #4]
      break;
 8002484:	e00f      	b.n	80024a6 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002486:	f000 f843 	bl	8002510 <RCC_PLL_GetFreqDomain_SYS>
 800248a:	0003      	movs	r3, r0
 800248c:	607b      	str	r3, [r7, #4]
      break;
 800248e:	e00a      	b.n	80024a6 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002490:	f7ff fefc 	bl	800228c <LL_RCC_MSI_GetRange>
 8002494:	0003      	movs	r3, r0
 8002496:	0b5b      	lsrs	r3, r3, #13
 8002498:	3301      	adds	r3, #1
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	0212      	lsls	r2, r2, #8
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	607b      	str	r3, [r7, #4]
      break;
 80024a4:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80024a6:	687b      	ldr	r3, [r7, #4]
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	003d0900 	.word	0x003d0900
 80024b4:	00f42400 	.word	0x00f42400
 80024b8:	007a1200 	.word	0x007a1200

080024bc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80024c4:	f7ff fefa 	bl	80022bc <LL_RCC_GetAHBPrescaler>
 80024c8:	0003      	movs	r3, r0
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	220f      	movs	r2, #15
 80024ce:	4013      	ands	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <RCC_GetHCLKClockFreq+0x28>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	001a      	movs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	40d3      	lsrs	r3, r2
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	08002ac4 	.word	0x08002ac4

080024e8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80024f0:	f7ff fef0 	bl	80022d4 <LL_RCC_GetAPB1Prescaler>
 80024f4:	0003      	movs	r3, r0
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <RCC_GetPCLK1ClockFreq+0x24>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	001a      	movs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	40d3      	lsrs	r3, r2
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	08002ad4 	.word	0x08002ad4

08002510 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002516:	f7ff fefb 	bl	8002310 <LL_RCC_PLL_GetMainSource>
 800251a:	0003      	movs	r3, r0
 800251c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002524:	f7ff ff18 	bl	8002358 <LL_RCC_IsActiveFlag_HSIDIV>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d002      	beq.n	8002532 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800252e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8002530:	e005      	b.n	800253e <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8002534:	607b      	str	r3, [r7, #4]
      break;
 8002536:	e002      	b.n	800253e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800253a:	607b      	str	r3, [r7, #4]
      break;
 800253c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800253e:	f7ff fef3 	bl	8002328 <LL_RCC_PLL_GetMultiplicator>
 8002542:	0003      	movs	r3, r0
 8002544:	0c9b      	lsrs	r3, r3, #18
 8002546:	4a0d      	ldr	r2, [pc, #52]	; (800257c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	001a      	movs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4353      	muls	r3, r2
 8002550:	001c      	movs	r4, r3
 8002552:	f7ff fef5 	bl	8002340 <LL_RCC_PLL_GetDivider>
 8002556:	0003      	movs	r3, r0
 8002558:	0d9b      	lsrs	r3, r3, #22
 800255a:	3301      	adds	r3, #1
 800255c:	0019      	movs	r1, r3
 800255e:	0020      	movs	r0, r4
 8002560:	f7fd fdd2 	bl	8000108 <__udivsi3>
 8002564:	0003      	movs	r3, r0
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b003      	add	sp, #12
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	003d0900 	.word	0x003d0900
 8002574:	00f42400 	.word	0x00f42400
 8002578:	007a1200 	.word	0x007a1200
 800257c:	08002adc 	.word	0x08002adc

08002580 <LL_USART_IsEnabled>:
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <LL_USART_IsEnabled+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_USART_IsEnabled+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <LL_USART_SetStopBitsLength>:
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <LL_USART_SetStopBitsLength+0x24>)
 80025b4:	401a      	ands	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	605a      	str	r2, [r3, #4]
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	ffffcfff 	.word	0xffffcfff

080025cc <LL_USART_SetHWFlowCtrl>:
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <LL_USART_SetHWFlowCtrl+0x24>)
 80025dc:	401a      	ands	r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]
}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b002      	add	sp, #8
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	fffffcff 	.word	0xfffffcff

080025f4 <LL_USART_SetBaudRate>:
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	429a      	cmp	r2, r3
 800260a:	d117      	bne.n	800263c <LL_USART_SetBaudRate+0x48>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	005a      	lsls	r2, r3, #1
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	18d3      	adds	r3, r2, r3
 8002616:	6839      	ldr	r1, [r7, #0]
 8002618:	0018      	movs	r0, r3
 800261a:	f7fd fd75 	bl	8000108 <__udivsi3>
 800261e:	0003      	movs	r3, r0
 8002620:	b29b      	uxth	r3, r3
 8002622:	001d      	movs	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <LL_USART_SetBaudRate+0x6c>)
 8002626:	402b      	ands	r3, r5
 8002628:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800262a:	086b      	lsrs	r3, r5, #1
 800262c:	b29b      	uxth	r3, r3
 800262e:	001a      	movs	r2, r3
 8002630:	2307      	movs	r3, #7
 8002632:	4013      	ands	r3, r2
 8002634:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	60dc      	str	r4, [r3, #12]
}
 800263a:	e00c      	b.n	8002656 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	085a      	lsrs	r2, r3, #1
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	18d3      	adds	r3, r2, r3
 8002644:	6839      	ldr	r1, [r7, #0]
 8002646:	0018      	movs	r0, r3
 8002648:	f7fd fd5e 	bl	8000108 <__udivsi3>
 800264c:	0003      	movs	r3, r0
 800264e:	b29b      	uxth	r3, r3
 8002650:	001a      	movs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	60da      	str	r2, [r3, #12]
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bdb0      	pop	{r4, r5, r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	0000fff0 	.word	0x0000fff0

08002664 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800266e:	230f      	movs	r3, #15
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
#if defined(USART4) || defined(USART5)
  LL_RCC_ClocksTypeDef RCC_Clocks;
#endif

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a7b      	ldr	r2, [pc, #492]	; (800286c <LL_USART_Init+0x208>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <LL_USART_Init+0x28>
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <LL_USART_Init+0x20c>)
 8002684:	21ce      	movs	r1, #206	; 0xce
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff fa46 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a78      	ldr	r2, [pc, #480]	; (8002874 <LL_USART_Init+0x210>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d904      	bls.n	80026a0 <LL_USART_Init+0x3c>
 8002696:	4b76      	ldr	r3, [pc, #472]	; (8002870 <LL_USART_Init+0x20c>)
 8002698:	21cf      	movs	r1, #207	; 0xcf
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff fa3c 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	055b      	lsls	r3, r3, #21
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d00e      	beq.n	80026ca <LL_USART_Init+0x66>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <LL_USART_Init+0x66>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	015b      	lsls	r3, r3, #5
 80026bc:	429a      	cmp	r2, r3
 80026be:	d004      	beq.n	80026ca <LL_USART_Init+0x66>
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <LL_USART_Init+0x20c>)
 80026c2:	21d0      	movs	r1, #208	; 0xd0
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff fa27 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	015b      	lsls	r3, r3, #5
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d014      	beq.n	8002700 <LL_USART_Init+0x9c>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <LL_USART_Init+0x9c>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	23c0      	movs	r3, #192	; 0xc0
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d00a      	beq.n	8002700 <LL_USART_Init+0x9c>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	019b      	lsls	r3, r3, #6
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d004      	beq.n	8002700 <LL_USART_Init+0x9c>
 80026f6:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <LL_USART_Init+0x20c>)
 80026f8:	21d1      	movs	r1, #209	; 0xd1
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff fa0c 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <LL_USART_Init+0xc6>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	429a      	cmp	r2, r3
 8002712:	d00a      	beq.n	800272a <LL_USART_Init+0xc6>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	23c0      	movs	r3, #192	; 0xc0
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	429a      	cmp	r2, r3
 800271e:	d004      	beq.n	800272a <LL_USART_Init+0xc6>
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <LL_USART_Init+0x20c>)
 8002722:	21d2      	movs	r1, #210	; 0xd2
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff f9f7 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d010      	beq.n	8002754 <LL_USART_Init+0xf0>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d00c      	beq.n	8002754 <LL_USART_Init+0xf0>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d008      	beq.n	8002754 <LL_USART_Init+0xf0>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d004      	beq.n	8002754 <LL_USART_Init+0xf0>
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <LL_USART_Init+0x20c>)
 800274c:	21d3      	movs	r1, #211	; 0xd3
 800274e:	0018      	movs	r0, r3
 8002750:	f7ff f9e2 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <LL_USART_Init+0x126>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	429a      	cmp	r2, r3
 8002766:	d010      	beq.n	800278a <LL_USART_Init+0x126>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d00a      	beq.n	800278a <LL_USART_Init+0x126>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	23c0      	movs	r3, #192	; 0xc0
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d004      	beq.n	800278a <LL_USART_Init+0x126>
 8002780:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <LL_USART_Init+0x20c>)
 8002782:	21d4      	movs	r1, #212	; 0xd4
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff f9c7 	bl	8001b18 <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <LL_USART_Init+0x144>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	429a      	cmp	r2, r3
 800279c:	d004      	beq.n	80027a8 <LL_USART_Init+0x144>
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <LL_USART_Init+0x20c>)
 80027a0:	21d5      	movs	r1, #213	; 0xd5
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff f9b8 	bl	8001b18 <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7ff fee8 	bl	8002580 <LL_USART_IsEnabled>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d153      	bne.n	800285c <LL_USART_Init+0x1f8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <LL_USART_Init+0x214>)
 80027ba:	401a      	ands	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4319      	orrs	r1, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	4319      	orrs	r1, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	0011      	movs	r1, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7ff fedf 	bl	80025a4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff feec 	bl	80025cc <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <LL_USART_Init+0x208>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d104      	bne.n	8002806 <LL_USART_Init+0x1a2>
#endif
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80027fc:	200c      	movs	r0, #12
 80027fe:	f7ff fdbb 	bl	8002378 <LL_RCC_GetUSARTClockFreq>
 8002802:	0003      	movs	r3, r0
 8002804:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d027      	beq.n	800285c <LL_USART_Init+0x1f8>
        && (USART_InitStruct->BaudRate != 0U))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d023      	beq.n	800285c <LL_USART_Init+0x1f8>
    {
      status = SUCCESS;
 8002814:	230f      	movs	r3, #15
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fee4 	bl	80025f4 <LL_USART_SetBaudRate>
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d807      	bhi.n	8002844 <LL_USART_Init+0x1e0>
 8002834:	232a      	movs	r3, #42	; 0x2a
 8002836:	33ff      	adds	r3, #255	; 0xff
 8002838:	001a      	movs	r2, r3
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <LL_USART_Init+0x20c>)
 800283c:	0011      	movs	r1, r2
 800283e:	0018      	movs	r0, r3
 8002840:	f7ff f96a 	bl	8001b18 <assert_failed>

      /* Check BRR is lower than or equal to 0xFFFF */
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a0c      	ldr	r2, [pc, #48]	; (800287c <LL_USART_Init+0x218>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d906      	bls.n	800285c <LL_USART_Init+0x1f8>
 800284e:	2396      	movs	r3, #150	; 0x96
 8002850:	005a      	lsls	r2, r3, #1
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <LL_USART_Init+0x20c>)
 8002854:	0011      	movs	r1, r2
 8002856:	0018      	movs	r0, r3
 8002858:	f7ff f95e 	bl	8001b18 <assert_failed>
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800285c:	230f      	movs	r3, #15
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	781b      	ldrb	r3, [r3, #0]
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	40004400 	.word	0x40004400
 8002870:	08002a08 	.word	0x08002a08
 8002874:	003d0900 	.word	0x003d0900
 8002878:	efff69f3 	.word	0xefff69f3
 800287c:	0000ffff 	.word	0x0000ffff

08002880 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800288a:	6839      	ldr	r1, [r7, #0]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fd fc3b 	bl	8000108 <__udivsi3>
 8002892:	0003      	movs	r3, r0
 8002894:	001a      	movs	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <LL_InitTick+0x30>)
 8002898:	3a01      	subs	r2, #1
 800289a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <LL_InitTick+0x30>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <LL_InitTick+0x30>)
 80028a4:	2205      	movs	r2, #5
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80028bc:	23fa      	movs	r3, #250	; 0xfa
 80028be:	009a      	lsls	r2, r3, #2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ffdb 	bl	8002880 <LL_InitTick>
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b002      	add	sp, #8
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <LL_SetSystemCoreClock+0x18>)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	20000000 	.word	0x20000000

080028f0 <__libc_init_array>:
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	2600      	movs	r6, #0
 80028f4:	4d0c      	ldr	r5, [pc, #48]	; (8002928 <__libc_init_array+0x38>)
 80028f6:	4c0d      	ldr	r4, [pc, #52]	; (800292c <__libc_init_array+0x3c>)
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d109      	bne.n	8002914 <__libc_init_array+0x24>
 8002900:	2600      	movs	r6, #0
 8002902:	f000 f821 	bl	8002948 <_init>
 8002906:	4d0a      	ldr	r5, [pc, #40]	; (8002930 <__libc_init_array+0x40>)
 8002908:	4c0a      	ldr	r4, [pc, #40]	; (8002934 <__libc_init_array+0x44>)
 800290a:	1b64      	subs	r4, r4, r5
 800290c:	10a4      	asrs	r4, r4, #2
 800290e:	42a6      	cmp	r6, r4
 8002910:	d105      	bne.n	800291e <__libc_init_array+0x2e>
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	00b3      	lsls	r3, r6, #2
 8002916:	58eb      	ldr	r3, [r5, r3]
 8002918:	4798      	blx	r3
 800291a:	3601      	adds	r6, #1
 800291c:	e7ee      	b.n	80028fc <__libc_init_array+0xc>
 800291e:	00b3      	lsls	r3, r6, #2
 8002920:	58eb      	ldr	r3, [r5, r3]
 8002922:	4798      	blx	r3
 8002924:	3601      	adds	r6, #1
 8002926:	e7f2      	b.n	800290e <__libc_init_array+0x1e>
 8002928:	08002ae8 	.word	0x08002ae8
 800292c:	08002ae8 	.word	0x08002ae8
 8002930:	08002ae8 	.word	0x08002ae8
 8002934:	08002aec 	.word	0x08002aec

08002938 <memset>:
 8002938:	0003      	movs	r3, r0
 800293a:	1812      	adds	r2, r2, r0
 800293c:	4293      	cmp	r3, r2
 800293e:	d100      	bne.n	8002942 <memset+0xa>
 8002940:	4770      	bx	lr
 8002942:	7019      	strb	r1, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	e7f9      	b.n	800293c <memset+0x4>

08002948 <_init>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr

08002954 <_fini>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr
